using System.Buffers;
using System.Buffers.Text;
using System.Runtime.InteropServices;

namespace Rena.Interop.EGL;

public unsafe partial class EGL
{
    public static ReadOnlySpan<byte> eglChooseConfigFunctionName => "eglChooseConfig"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int*, /* EGLConfig */ void**, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> ChooseConfig;
    public static ReadOnlySpan<byte> eglCopyBuffersFunctionName => "eglCopyBuffers"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLNativePixmapType */ void*, /* EGLBoolean */ int> CopyBuffers;
    public static ReadOnlySpan<byte> eglCreateContextFunctionName => "eglCreateContext"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLContext */ void*, /* EGLint */ int*, /* EGLContext */ void*> CreateContext;
    public static ReadOnlySpan<byte> eglCreatePbufferSurfaceFunctionName => "eglCreatePbufferSurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLint */ int*, /* EGLSurface */ void*> CreatePbufferSurface;
    public static ReadOnlySpan<byte> eglCreatePixmapSurfaceFunctionName => "eglCreatePixmapSurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLNativePixmapType */ void*, /* EGLint */ int*, /* EGLSurface */ void*> CreatePixmapSurface;
    public static ReadOnlySpan<byte> eglCreateWindowSurfaceFunctionName => "eglCreateWindowSurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLNativeWindowType */ void*, /* EGLint */ int*, /* EGLSurface */ void*> CreateWindowSurface;
    public static ReadOnlySpan<byte> eglDestroyContextFunctionName => "eglDestroyContext"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLContext */ void*, /* EGLBoolean */ int> DestroyContext;
    public static ReadOnlySpan<byte> eglDestroySurfaceFunctionName => "eglDestroySurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLBoolean */ int> DestroySurface;
    public static ReadOnlySpan<byte> eglGetConfigAttribFunctionName => "eglGetConfigAttrib"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> GetConfigAttrib;
    public static ReadOnlySpan<byte> eglGetConfigsFunctionName => "eglGetConfigs"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void**, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> GetConfigs;
    public static ReadOnlySpan<byte> eglGetCurrentDisplayFunctionName => "eglGetCurrentDisplay"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*> GetCurrentDisplay;
    public static ReadOnlySpan<byte> eglGetCurrentSurfaceFunctionName => "eglGetCurrentSurface"u8;
    public readonly delegate* unmanaged</* EGLint */ int, /* EGLSurface */ void*> GetCurrentSurface;
    public static ReadOnlySpan<byte> eglGetDisplayFunctionName => "eglGetDisplay"u8;
    public readonly delegate* unmanaged</* EGLNativeDisplayType */ void*, /* EGLDisplay */ void*> GetDisplay;
    public static ReadOnlySpan<byte> eglGetErrorFunctionName => "eglGetError"u8;
    public readonly delegate* unmanaged</* EGLint */ int> GetError;
    public static ReadOnlySpan<byte> eglGetProcAddressFunctionName => "eglGetProcAddress"u8;
    public readonly delegate* unmanaged</* char */ byte*, /* __eglMustCastToProperFunctionPointerType */ void*> GetProcAddress;
    public static ReadOnlySpan<byte> eglInitializeFunctionName => "eglInitialize"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int*, /* EGLint */ int*, /* EGLBoolean */ int> Initialize;
    public static ReadOnlySpan<byte> eglMakeCurrentFunctionName => "eglMakeCurrent"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLSurface */ void*, /* EGLContext */ void*, /* EGLBoolean */ int> MakeCurrent;
    public static ReadOnlySpan<byte> eglQueryContextFunctionName => "eglQueryContext"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLContext */ void*, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> QueryContext;
    public static ReadOnlySpan<byte> eglQueryStringFunctionName => "eglQueryString"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int, /* char */ byte*> QueryString;
    public static ReadOnlySpan<byte> eglQuerySurfaceFunctionName => "eglQuerySurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> QuerySurface;
    public static ReadOnlySpan<byte> eglSwapBuffersFunctionName => "eglSwapBuffers"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLBoolean */ int> SwapBuffers;
    public static ReadOnlySpan<byte> eglTerminateFunctionName => "eglTerminate"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLBoolean */ int> Terminate;
    public static ReadOnlySpan<byte> eglWaitGLFunctionName => "eglWaitGL"u8;
    public readonly delegate* unmanaged</* EGLBoolean */ int> WaitGL;
    public static ReadOnlySpan<byte> eglWaitNativeFunctionName => "eglWaitNative"u8;
    public readonly delegate* unmanaged</* EGLint */ int, /* EGLBoolean */ int> WaitNative;
    public static ReadOnlySpan<byte> eglBindTexImageFunctionName => "eglBindTexImage"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLBoolean */ int> BindTexImage;
    public static ReadOnlySpan<byte> eglReleaseTexImageFunctionName => "eglReleaseTexImage"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLBoolean */ int> ReleaseTexImage;
    public static ReadOnlySpan<byte> eglSurfaceAttribFunctionName => "eglSurfaceAttrib"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLint */ int, /* EGLBoolean */ int> SurfaceAttrib;
    public static ReadOnlySpan<byte> eglSwapIntervalFunctionName => "eglSwapInterval"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int, /* EGLBoolean */ int> SwapInterval;
    public static ReadOnlySpan<byte> eglBindAPIFunctionName => "eglBindAPI"u8;
    public readonly delegate* unmanaged</* EGLenum */ int, /* EGLBoolean */ int> BindAPI;
    public static ReadOnlySpan<byte> eglQueryAPIFunctionName => "eglQueryAPI"u8;
    public readonly delegate* unmanaged</* EGLenum */ int> QueryAPI;
    public static ReadOnlySpan<byte> eglCreatePbufferFromClientBufferFunctionName => "eglCreatePbufferFromClientBuffer"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLenum */ int, /* EGLClientBuffer */ void*, /* EGLConfig */ void*, /* EGLint */ int*, /* EGLSurface */ void*> CreatePbufferFromClientBuffer;
    public static ReadOnlySpan<byte> eglReleaseThreadFunctionName => "eglReleaseThread"u8;
    public readonly delegate* unmanaged</* EGLBoolean */ int> ReleaseThread;
    public static ReadOnlySpan<byte> eglWaitClientFunctionName => "eglWaitClient"u8;
    public readonly delegate* unmanaged</* EGLBoolean */ int> WaitClient;
    public static ReadOnlySpan<byte> eglGetCurrentContextFunctionName => "eglGetCurrentContext"u8;
    public readonly delegate* unmanaged</* EGLContext */ void*> GetCurrentContext;
    public static ReadOnlySpan<byte> eglCreateSyncFunctionName => "eglCreateSync"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLenum */ int, /* EGLAttrib */ nint*, /* EGLSync */ void*> CreateSync;
    public static ReadOnlySpan<byte> eglDestroySyncFunctionName => "eglDestroySync"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLBoolean */ int> DestroySync;
    public static ReadOnlySpan<byte> eglClientWaitSyncFunctionName => "eglClientWaitSync"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLint */ int, /* EGLTime */ ulong, /* EGLint */ int> ClientWaitSync;
    public static ReadOnlySpan<byte> eglGetSyncAttribFunctionName => "eglGetSyncAttrib"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLint */ int, /* EGLAttrib */ nint*, /* EGLBoolean */ int> GetSyncAttrib;
    public static ReadOnlySpan<byte> eglCreateImageFunctionName => "eglCreateImage"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLContext */ void*, /* EGLenum */ int, /* EGLClientBuffer */ void*, /* EGLAttrib */ nint*, /* EGLImage */ void*> CreateImage;
    public static ReadOnlySpan<byte> eglDestroyImageFunctionName => "eglDestroyImage"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLImage */ void*, /* EGLBoolean */ int> DestroyImage;
    public static ReadOnlySpan<byte> eglGetPlatformDisplayFunctionName => "eglGetPlatformDisplay"u8;
    public readonly delegate* unmanaged</* EGLenum */ int, /* void */ void*, /* EGLAttrib */ nint*, /* EGLDisplay */ void*> GetPlatformDisplay;
    public static ReadOnlySpan<byte> eglCreatePlatformWindowSurfaceFunctionName => "eglCreatePlatformWindowSurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* void */ void*, /* EGLAttrib */ nint*, /* EGLSurface */ void*> CreatePlatformWindowSurface;
    public static ReadOnlySpan<byte> eglCreatePlatformPixmapSurfaceFunctionName => "eglCreatePlatformPixmapSurface"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* void */ void*, /* EGLAttrib */ nint*, /* EGLSurface */ void*> CreatePlatformPixmapSurface;
    public static ReadOnlySpan<byte> eglWaitSyncFunctionName => "eglWaitSync"u8;
    public readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLint */ int, /* EGLBoolean */ int> WaitSync;
}
