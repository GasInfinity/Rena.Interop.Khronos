using System.Buffers;
using System.Buffers.Text;
using System.Runtime.InteropServices;

namespace Rena.Interop.OpenGL;

public unsafe partial class GLCompat
{
    public delegate void* LoadFunction(byte* name);
    public readonly ushort Major;
    public readonly ushort Minor;
    
    public readonly bool Version10;
    public readonly bool Version11;
    public readonly bool Version12;
    public readonly bool Version13;
    public readonly bool Version14;
    public readonly bool Version15;
    public readonly bool Version20;
    public readonly bool Version21;
    public readonly bool Version30;
    public readonly bool Version31;
    public readonly bool Version32;
    public readonly bool Version33;
    public readonly bool Version40;
    public readonly bool Version41;
    public readonly bool Version42;
    public readonly bool Version43;
    public readonly bool Version44;
    public readonly bool Version45;
    public readonly bool Version46;
    
    public readonly bool IsEmbedded;
    
    public GLCompat(LoadFunction loadFunc)
    {
        delegate* unmanaged<int, byte*> glGetString;
        fixed(byte* name = glGetStringFunctionName)
            glGetString = (delegate* unmanaged<int, byte*>)loadFunc(name);
        if(glGetString == null) return;
        var version = glGetString(GL_VERSION);
        if(version is null) return;
        if(!TryParseVersion(MemoryMarshal.CreateReadOnlySpanFromNullTerminated(version), out Major, out Minor, out IsEmbedded)) return;
        
        Version10 = Major > 1 | (Major == 1 & Minor >= 0);
        Version11 = Major > 1 | (Major == 1 & Minor >= 1);
        Version12 = Major > 1 | (Major == 1 & Minor >= 2);
        Version13 = Major > 1 | (Major == 1 & Minor >= 3);
        Version14 = Major > 1 | (Major == 1 & Minor >= 4);
        Version15 = Major > 1 | (Major == 1 & Minor >= 5);
        Version20 = Major > 2 | (Major == 2 & Minor >= 0);
        Version21 = Major > 2 | (Major == 2 & Minor >= 1);
        Version30 = Major > 3 | (Major == 3 & Minor >= 0);
        Version31 = Major > 3 | (Major == 3 & Minor >= 1);
        Version32 = Major > 3 | (Major == 3 & Minor >= 2);
        Version33 = Major > 3 | (Major == 3 & Minor >= 3);
        Version40 = Major > 4 | (Major == 4 & Minor >= 0);
        Version41 = Major > 4 | (Major == 4 & Minor >= 1);
        Version42 = Major > 4 | (Major == 4 & Minor >= 2);
        Version43 = Major > 4 | (Major == 4 & Minor >= 3);
        Version44 = Major > 4 | (Major == 4 & Minor >= 4);
        Version45 = Major > 4 | (Major == 4 & Minor >= 5);
        Version46 = Major > 4 | (Major == 4 & Minor >= 6);
        
        if(!IsEmbedded & Version10)
        {
            fixed(byte* name = glCullFaceFunctionName)
                this.CullFace = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFrontFaceFunctionName)
                this.FrontFace = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glHintFunctionName)
                this.Hint = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLineWidthFunctionName)
                this.LineWidth = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPointSizeFunctionName)
                this.PointSize = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPolygonModeFunctionName)
                this.PolygonMode = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glScissorFunctionName)
                this.Scissor = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexParameterfFunctionName)
                this.TexParameterf = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexParameterfvFunctionName)
                this.TexParameterfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexParameteriFunctionName)
                this.TexParameteri = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexParameterivFunctionName)
                this.TexParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexImage1DFunctionName)
                this.TexImage1D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexImage2DFunctionName)
                this.TexImage2D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawBufferFunctionName)
                this.DrawBuffer = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearFunctionName)
                this.Clear = (delegate* unmanaged</* GLbitfield */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearColorFunctionName)
                this.ClearColor = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearStencilFunctionName)
                this.ClearStencil = (delegate* unmanaged</* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearDepthFunctionName)
                this.ClearDepth = (delegate* unmanaged</* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glStencilMaskFunctionName)
                this.StencilMask = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorMaskFunctionName)
                this.ColorMask = (delegate* unmanaged</* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDepthMaskFunctionName)
                this.DepthMask = (delegate* unmanaged</* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDisableFunctionName)
                this.Disable = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEnableFunctionName)
                this.Enable = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFinishFunctionName)
                this.Finish = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glFlushFunctionName)
                this.Flush = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendFuncFunctionName)
                this.BlendFunc = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLogicOpFunctionName)
                this.LogicOp = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glStencilFuncFunctionName)
                this.StencilFunc = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glStencilOpFunctionName)
                this.StencilOp = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDepthFuncFunctionName)
                this.DepthFunc = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelStorefFunctionName)
                this.PixelStoref = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelStoreiFunctionName)
                this.PixelStorei = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glReadBufferFunctionName)
                this.ReadBuffer = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glReadPixelsFunctionName)
                this.ReadPixels = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetBooleanvFunctionName)
                this.GetBooleanv = (delegate* unmanaged</* GLenum */ int, /* GLboolean */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetDoublevFunctionName)
                this.GetDoublev = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetErrorFunctionName)
                this.GetError = (delegate* unmanaged</* GLenum */ int>)loadFunc(name);
            fixed(byte* name = glGetFloatvFunctionName)
                this.GetFloatv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetIntegervFunctionName)
                this.GetIntegerv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetStringFunctionName)
                this.GetString = (delegate* unmanaged</* GLenum */ int, /* GLubyte */ byte*>)loadFunc(name);
            fixed(byte* name = glGetTexImageFunctionName)
                this.GetTexImage = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexParameterfvFunctionName)
                this.GetTexParameterfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexParameterivFunctionName)
                this.GetTexParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexLevelParameterfvFunctionName)
                this.GetTexLevelParameterfv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexLevelParameterivFunctionName)
                this.GetTexLevelParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsEnabledFunctionName)
                this.IsEnabled = (delegate* unmanaged</* GLenum */ int, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glDepthRangeFunctionName)
                this.DepthRange = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glViewportFunctionName)
                this.Viewport = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNewListFunctionName)
                this.NewList = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEndListFunctionName)
                this.EndList = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glCallListFunctionName)
                this.CallList = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCallListsFunctionName)
                this.CallLists = (delegate* unmanaged</* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteListsFunctionName)
                this.DeleteLists = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenListsFunctionName)
                this.GenLists = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glListBaseFunctionName)
                this.ListBase = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBeginFunctionName)
                this.Begin = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBitmapFunctionName)
                this.Bitmap = (delegate* unmanaged</* GLsizei */ int, /* GLsizei */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3bFunctionName)
                this.Color3b = (delegate* unmanaged</* GLbyte */ byte, /* GLbyte */ byte, /* GLbyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3bvFunctionName)
                this.Color3bv = (delegate* unmanaged</* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3dFunctionName)
                this.Color3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3dvFunctionName)
                this.Color3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3fFunctionName)
                this.Color3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3fvFunctionName)
                this.Color3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3iFunctionName)
                this.Color3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3ivFunctionName)
                this.Color3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3sFunctionName)
                this.Color3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3svFunctionName)
                this.Color3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3ubFunctionName)
                this.Color3ub = (delegate* unmanaged</* GLubyte */ byte, /* GLubyte */ byte, /* GLubyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3ubvFunctionName)
                this.Color3ubv = (delegate* unmanaged</* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3uiFunctionName)
                this.Color3ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3uivFunctionName)
                this.Color3uiv = (delegate* unmanaged</* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3usFunctionName)
                this.Color3us = (delegate* unmanaged</* GLushort */ ushort, /* GLushort */ ushort, /* GLushort */ ushort, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor3usvFunctionName)
                this.Color3usv = (delegate* unmanaged</* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4bFunctionName)
                this.Color4b = (delegate* unmanaged</* GLbyte */ byte, /* GLbyte */ byte, /* GLbyte */ byte, /* GLbyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4bvFunctionName)
                this.Color4bv = (delegate* unmanaged</* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4dFunctionName)
                this.Color4d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4dvFunctionName)
                this.Color4dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4fFunctionName)
                this.Color4f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4fvFunctionName)
                this.Color4fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4iFunctionName)
                this.Color4i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4ivFunctionName)
                this.Color4iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4sFunctionName)
                this.Color4s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4svFunctionName)
                this.Color4sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4ubFunctionName)
                this.Color4ub = (delegate* unmanaged</* GLubyte */ byte, /* GLubyte */ byte, /* GLubyte */ byte, /* GLubyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4ubvFunctionName)
                this.Color4ubv = (delegate* unmanaged</* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4uiFunctionName)
                this.Color4ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4uivFunctionName)
                this.Color4uiv = (delegate* unmanaged</* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4usFunctionName)
                this.Color4us = (delegate* unmanaged</* GLushort */ ushort, /* GLushort */ ushort, /* GLushort */ ushort, /* GLushort */ ushort, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColor4usvFunctionName)
                this.Color4usv = (delegate* unmanaged</* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEdgeFlagFunctionName)
                this.EdgeFlag = (delegate* unmanaged</* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEdgeFlagvFunctionName)
                this.EdgeFlagv = (delegate* unmanaged</* GLboolean */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEndFunctionName)
                this.End = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexdFunctionName)
                this.Indexd = (delegate* unmanaged</* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexdvFunctionName)
                this.Indexdv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexfFunctionName)
                this.Indexf = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexfvFunctionName)
                this.Indexfv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexiFunctionName)
                this.Indexi = (delegate* unmanaged</* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexivFunctionName)
                this.Indexiv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexsFunctionName)
                this.Indexs = (delegate* unmanaged</* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexsvFunctionName)
                this.Indexsv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3bFunctionName)
                this.Normal3b = (delegate* unmanaged</* GLbyte */ byte, /* GLbyte */ byte, /* GLbyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3bvFunctionName)
                this.Normal3bv = (delegate* unmanaged</* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3dFunctionName)
                this.Normal3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3dvFunctionName)
                this.Normal3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3fFunctionName)
                this.Normal3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3fvFunctionName)
                this.Normal3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3iFunctionName)
                this.Normal3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3ivFunctionName)
                this.Normal3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3sFunctionName)
                this.Normal3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormal3svFunctionName)
                this.Normal3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2dFunctionName)
                this.RasterPos2d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2dvFunctionName)
                this.RasterPos2dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2fFunctionName)
                this.RasterPos2f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2fvFunctionName)
                this.RasterPos2fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2iFunctionName)
                this.RasterPos2i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2ivFunctionName)
                this.RasterPos2iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2sFunctionName)
                this.RasterPos2s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos2svFunctionName)
                this.RasterPos2sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3dFunctionName)
                this.RasterPos3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3dvFunctionName)
                this.RasterPos3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3fFunctionName)
                this.RasterPos3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3fvFunctionName)
                this.RasterPos3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3iFunctionName)
                this.RasterPos3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3ivFunctionName)
                this.RasterPos3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3sFunctionName)
                this.RasterPos3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos3svFunctionName)
                this.RasterPos3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4dFunctionName)
                this.RasterPos4d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4dvFunctionName)
                this.RasterPos4dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4fFunctionName)
                this.RasterPos4f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4fvFunctionName)
                this.RasterPos4fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4iFunctionName)
                this.RasterPos4i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4ivFunctionName)
                this.RasterPos4iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4sFunctionName)
                this.RasterPos4s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRasterPos4svFunctionName)
                this.RasterPos4sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectdFunctionName)
                this.Rectd = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectdvFunctionName)
                this.Rectdv = (delegate* unmanaged</* GLdouble */ double*, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectfFunctionName)
                this.Rectf = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectfvFunctionName)
                this.Rectfv = (delegate* unmanaged</* GLfloat */ float*, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectiFunctionName)
                this.Recti = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectivFunctionName)
                this.Rectiv = (delegate* unmanaged</* GLint */ int*, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectsFunctionName)
                this.Rects = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRectsvFunctionName)
                this.Rectsv = (delegate* unmanaged</* GLshort */ short*, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1dFunctionName)
                this.TexCoord1d = (delegate* unmanaged</* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1dvFunctionName)
                this.TexCoord1dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1fFunctionName)
                this.TexCoord1f = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1fvFunctionName)
                this.TexCoord1fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1iFunctionName)
                this.TexCoord1i = (delegate* unmanaged</* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1ivFunctionName)
                this.TexCoord1iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1sFunctionName)
                this.TexCoord1s = (delegate* unmanaged</* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord1svFunctionName)
                this.TexCoord1sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2dFunctionName)
                this.TexCoord2d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2dvFunctionName)
                this.TexCoord2dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2fFunctionName)
                this.TexCoord2f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2fvFunctionName)
                this.TexCoord2fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2iFunctionName)
                this.TexCoord2i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2ivFunctionName)
                this.TexCoord2iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2sFunctionName)
                this.TexCoord2s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord2svFunctionName)
                this.TexCoord2sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3dFunctionName)
                this.TexCoord3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3dvFunctionName)
                this.TexCoord3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3fFunctionName)
                this.TexCoord3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3fvFunctionName)
                this.TexCoord3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3iFunctionName)
                this.TexCoord3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3ivFunctionName)
                this.TexCoord3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3sFunctionName)
                this.TexCoord3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord3svFunctionName)
                this.TexCoord3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4dFunctionName)
                this.TexCoord4d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4dvFunctionName)
                this.TexCoord4dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4fFunctionName)
                this.TexCoord4f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4fvFunctionName)
                this.TexCoord4fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4iFunctionName)
                this.TexCoord4i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4ivFunctionName)
                this.TexCoord4iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4sFunctionName)
                this.TexCoord4s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoord4svFunctionName)
                this.TexCoord4sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2dFunctionName)
                this.Vertex2d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2dvFunctionName)
                this.Vertex2dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2fFunctionName)
                this.Vertex2f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2fvFunctionName)
                this.Vertex2fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2iFunctionName)
                this.Vertex2i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2ivFunctionName)
                this.Vertex2iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2sFunctionName)
                this.Vertex2s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex2svFunctionName)
                this.Vertex2sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3dFunctionName)
                this.Vertex3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3dvFunctionName)
                this.Vertex3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3fFunctionName)
                this.Vertex3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3fvFunctionName)
                this.Vertex3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3iFunctionName)
                this.Vertex3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3ivFunctionName)
                this.Vertex3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3sFunctionName)
                this.Vertex3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex3svFunctionName)
                this.Vertex3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4dFunctionName)
                this.Vertex4d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4dvFunctionName)
                this.Vertex4dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4fFunctionName)
                this.Vertex4f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4fvFunctionName)
                this.Vertex4fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4iFunctionName)
                this.Vertex4i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4ivFunctionName)
                this.Vertex4iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4sFunctionName)
                this.Vertex4s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertex4svFunctionName)
                this.Vertex4sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClipPlaneFunctionName)
                this.ClipPlane = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorMaterialFunctionName)
                this.ColorMaterial = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogfFunctionName)
                this.Fogf = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogfvFunctionName)
                this.Fogfv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogiFunctionName)
                this.Fogi = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogivFunctionName)
                this.Fogiv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightfFunctionName)
                this.Lightf = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightfvFunctionName)
                this.Lightfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightiFunctionName)
                this.Lighti = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightivFunctionName)
                this.Lightiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightModelfFunctionName)
                this.LightModelf = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightModelfvFunctionName)
                this.LightModelfv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightModeliFunctionName)
                this.LightModeli = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLightModelivFunctionName)
                this.LightModeliv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLineStippleFunctionName)
                this.LineStipple = (delegate* unmanaged</* GLint */ int, /* GLushort */ ushort, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMaterialfFunctionName)
                this.Materialf = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMaterialfvFunctionName)
                this.Materialfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMaterialiFunctionName)
                this.Materiali = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMaterialivFunctionName)
                this.Materialiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPolygonStippleFunctionName)
                this.PolygonStipple = (delegate* unmanaged</* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glShadeModelFunctionName)
                this.ShadeModel = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexEnvfFunctionName)
                this.TexEnvf = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexEnvfvFunctionName)
                this.TexEnvfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexEnviFunctionName)
                this.TexEnvi = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexEnvivFunctionName)
                this.TexEnviv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexGendFunctionName)
                this.TexGend = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexGendvFunctionName)
                this.TexGendv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexGenfFunctionName)
                this.TexGenf = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexGenfvFunctionName)
                this.TexGenfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexGeniFunctionName)
                this.TexGeni = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexGenivFunctionName)
                this.TexGeniv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFeedbackBufferFunctionName)
                this.FeedbackBuffer = (delegate* unmanaged</* GLsizei */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSelectBufferFunctionName)
                this.SelectBuffer = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRenderModeFunctionName)
                this.RenderMode = (delegate* unmanaged</* GLenum */ int, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glInitNamesFunctionName)
                this.InitNames = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glLoadNameFunctionName)
                this.LoadName = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPassThroughFunctionName)
                this.PassThrough = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPopNameFunctionName)
                this.PopName = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glPushNameFunctionName)
                this.PushName = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearAccumFunctionName)
                this.ClearAccum = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearIndexFunctionName)
                this.ClearIndex = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexMaskFunctionName)
                this.IndexMask = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glAccumFunctionName)
                this.Accum = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPopAttribFunctionName)
                this.PopAttrib = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glPushAttribFunctionName)
                this.PushAttrib = (delegate* unmanaged</* GLbitfield */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMap1dFunctionName)
                this.Map1d = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLint */ int, /* GLint */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMap1fFunctionName)
                this.Map1f = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLint */ int, /* GLint */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMap2dFunctionName)
                this.Map2d = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLint */ int, /* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLint */ int, /* GLint */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMap2fFunctionName)
                this.Map2f = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLint */ int, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLint */ int, /* GLint */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapGrid1dFunctionName)
                this.MapGrid1d = (delegate* unmanaged</* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapGrid1fFunctionName)
                this.MapGrid1f = (delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapGrid2dFunctionName)
                this.MapGrid2d = (delegate* unmanaged</* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapGrid2fFunctionName)
                this.MapGrid2f = (delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord1dFunctionName)
                this.EvalCoord1d = (delegate* unmanaged</* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord1dvFunctionName)
                this.EvalCoord1dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord1fFunctionName)
                this.EvalCoord1f = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord1fvFunctionName)
                this.EvalCoord1fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord2dFunctionName)
                this.EvalCoord2d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord2dvFunctionName)
                this.EvalCoord2dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord2fFunctionName)
                this.EvalCoord2f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalCoord2fvFunctionName)
                this.EvalCoord2fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalMesh1FunctionName)
                this.EvalMesh1 = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalPoint1FunctionName)
                this.EvalPoint1 = (delegate* unmanaged</* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalMesh2FunctionName)
                this.EvalMesh2 = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEvalPoint2FunctionName)
                this.EvalPoint2 = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glAlphaFuncFunctionName)
                this.AlphaFunc = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelZoomFunctionName)
                this.PixelZoom = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelTransferfFunctionName)
                this.PixelTransferf = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelTransferiFunctionName)
                this.PixelTransferi = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelMapfvFunctionName)
                this.PixelMapfv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelMapuivFunctionName)
                this.PixelMapuiv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPixelMapusvFunctionName)
                this.PixelMapusv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyPixelsFunctionName)
                this.CopyPixels = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawPixelsFunctionName)
                this.DrawPixels = (delegate* unmanaged</* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetClipPlaneFunctionName)
                this.GetClipPlane = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetLightfvFunctionName)
                this.GetLightfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetLightivFunctionName)
                this.GetLightiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetMapdvFunctionName)
                this.GetMapdv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetMapfvFunctionName)
                this.GetMapfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetMapivFunctionName)
                this.GetMapiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetMaterialfvFunctionName)
                this.GetMaterialfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetMaterialivFunctionName)
                this.GetMaterialiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetPixelMapfvFunctionName)
                this.GetPixelMapfv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetPixelMapuivFunctionName)
                this.GetPixelMapuiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetPixelMapusvFunctionName)
                this.GetPixelMapusv = (delegate* unmanaged</* GLenum */ int, /* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetPolygonStippleFunctionName)
                this.GetPolygonStipple = (delegate* unmanaged</* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexEnvfvFunctionName)
                this.GetTexEnvfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexEnvivFunctionName)
                this.GetTexEnviv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexGendvFunctionName)
                this.GetTexGendv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexGenfvFunctionName)
                this.GetTexGenfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexGenivFunctionName)
                this.GetTexGeniv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsListFunctionName)
                this.IsList = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glFrustumFunctionName)
                this.Frustum = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLoadIdentityFunctionName)
                this.LoadIdentity = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glLoadMatrixfFunctionName)
                this.LoadMatrixf = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLoadMatrixdFunctionName)
                this.LoadMatrixd = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMatrixModeFunctionName)
                this.MatrixMode = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultMatrixfFunctionName)
                this.MultMatrixf = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultMatrixdFunctionName)
                this.MultMatrixd = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glOrthoFunctionName)
                this.Ortho = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPopMatrixFunctionName)
                this.PopMatrix = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glPushMatrixFunctionName)
                this.PushMatrix = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glRotatedFunctionName)
                this.Rotated = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRotatefFunctionName)
                this.Rotatef = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glScaledFunctionName)
                this.Scaled = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glScalefFunctionName)
                this.Scalef = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTranslatedFunctionName)
                this.Translated = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTranslatefFunctionName)
                this.Translatef = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version11)
        {
            fixed(byte* name = glDrawArraysFunctionName)
                this.DrawArrays = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawElementsFunctionName)
                this.DrawElements = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetPointervFunctionName)
                this.GetPointerv = (delegate* unmanaged</* GLenum */ int, /* void */ void**, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPolygonOffsetFunctionName)
                this.PolygonOffset = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTexImage1DFunctionName)
                this.CopyTexImage1D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTexImage2DFunctionName)
                this.CopyTexImage2D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTexSubImage1DFunctionName)
                this.CopyTexSubImage1D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTexSubImage2DFunctionName)
                this.CopyTexSubImage2D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexSubImage1DFunctionName)
                this.TexSubImage1D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexSubImage2DFunctionName)
                this.TexSubImage2D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindTextureFunctionName)
                this.BindTexture = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteTexturesFunctionName)
                this.DeleteTextures = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenTexturesFunctionName)
                this.GenTextures = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsTextureFunctionName)
                this.IsTexture = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glArrayElementFunctionName)
                this.ArrayElement = (delegate* unmanaged</* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorPointerFunctionName)
                this.ColorPointer = (delegate* unmanaged</* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDisableClientStateFunctionName)
                this.DisableClientState = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEdgeFlagPointerFunctionName)
                this.EdgeFlagPointer = (delegate* unmanaged</* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEnableClientStateFunctionName)
                this.EnableClientState = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexPointerFunctionName)
                this.IndexPointer = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInterleavedArraysFunctionName)
                this.InterleavedArrays = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormalPointerFunctionName)
                this.NormalPointer = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordPointerFunctionName)
                this.TexCoordPointer = (delegate* unmanaged</* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexPointerFunctionName)
                this.VertexPointer = (delegate* unmanaged</* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glAreTexturesResidentFunctionName)
                this.AreTexturesResident = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* GLboolean */ int*, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glPrioritizeTexturesFunctionName)
                this.PrioritizeTextures = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexubFunctionName)
                this.Indexub = (delegate* unmanaged</* GLubyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIndexubvFunctionName)
                this.Indexubv = (delegate* unmanaged</* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPopClientAttribFunctionName)
                this.PopClientAttrib = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glPushClientAttribFunctionName)
                this.PushClientAttrib = (delegate* unmanaged</* GLbitfield */ int, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version12)
        {
            fixed(byte* name = glDrawRangeElementsFunctionName)
                this.DrawRangeElements = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexImage3DFunctionName)
                this.TexImage3D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexSubImage3DFunctionName)
                this.TexSubImage3D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTexSubImage3DFunctionName)
                this.CopyTexSubImage3D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version13)
        {
            fixed(byte* name = glActiveTextureFunctionName)
                this.ActiveTexture = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSampleCoverageFunctionName)
                this.SampleCoverage = (delegate* unmanaged</* GLfloat */ float, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTexImage3DFunctionName)
                this.CompressedTexImage3D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTexImage2DFunctionName)
                this.CompressedTexImage2D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTexImage1DFunctionName)
                this.CompressedTexImage1D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTexSubImage3DFunctionName)
                this.CompressedTexSubImage3D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTexSubImage2DFunctionName)
                this.CompressedTexSubImage2D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTexSubImage1DFunctionName)
                this.CompressedTexSubImage1D = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetCompressedTexImageFunctionName)
                this.GetCompressedTexImage = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClientActiveTextureFunctionName)
                this.ClientActiveTexture = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1dFunctionName)
                this.MultiTexCoord1d = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1dvFunctionName)
                this.MultiTexCoord1dv = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1fFunctionName)
                this.MultiTexCoord1f = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1fvFunctionName)
                this.MultiTexCoord1fv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1iFunctionName)
                this.MultiTexCoord1i = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1ivFunctionName)
                this.MultiTexCoord1iv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1sFunctionName)
                this.MultiTexCoord1s = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord1svFunctionName)
                this.MultiTexCoord1sv = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2dFunctionName)
                this.MultiTexCoord2d = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2dvFunctionName)
                this.MultiTexCoord2dv = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2fFunctionName)
                this.MultiTexCoord2f = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2fvFunctionName)
                this.MultiTexCoord2fv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2iFunctionName)
                this.MultiTexCoord2i = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2ivFunctionName)
                this.MultiTexCoord2iv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2sFunctionName)
                this.MultiTexCoord2s = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord2svFunctionName)
                this.MultiTexCoord2sv = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3dFunctionName)
                this.MultiTexCoord3d = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3dvFunctionName)
                this.MultiTexCoord3dv = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3fFunctionName)
                this.MultiTexCoord3f = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3fvFunctionName)
                this.MultiTexCoord3fv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3iFunctionName)
                this.MultiTexCoord3i = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3ivFunctionName)
                this.MultiTexCoord3iv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3sFunctionName)
                this.MultiTexCoord3s = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord3svFunctionName)
                this.MultiTexCoord3sv = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4dFunctionName)
                this.MultiTexCoord4d = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4dvFunctionName)
                this.MultiTexCoord4dv = (delegate* unmanaged</* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4fFunctionName)
                this.MultiTexCoord4f = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4fvFunctionName)
                this.MultiTexCoord4fv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4iFunctionName)
                this.MultiTexCoord4i = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4ivFunctionName)
                this.MultiTexCoord4iv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4sFunctionName)
                this.MultiTexCoord4s = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoord4svFunctionName)
                this.MultiTexCoord4sv = (delegate* unmanaged</* GLenum */ int, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLoadTransposeMatrixfFunctionName)
                this.LoadTransposeMatrixf = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glLoadTransposeMatrixdFunctionName)
                this.LoadTransposeMatrixd = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultTransposeMatrixfFunctionName)
                this.MultTransposeMatrixf = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultTransposeMatrixdFunctionName)
                this.MultTransposeMatrixd = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version14)
        {
            fixed(byte* name = glBlendFuncSeparateFunctionName)
                this.BlendFuncSeparate = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawArraysFunctionName)
                this.MultiDrawArrays = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* GLsizei */ int*, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawElementsFunctionName)
                this.MultiDrawElements = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int*, /* GLenum */ int, /* void */ void**, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPointParameterfFunctionName)
                this.PointParameterf = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPointParameterfvFunctionName)
                this.PointParameterfv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPointParameteriFunctionName)
                this.PointParameteri = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPointParameterivFunctionName)
                this.PointParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogCoordfFunctionName)
                this.FogCoordf = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogCoordfvFunctionName)
                this.FogCoordfv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogCoorddFunctionName)
                this.FogCoordd = (delegate* unmanaged</* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogCoorddvFunctionName)
                this.FogCoorddv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFogCoordPointerFunctionName)
                this.FogCoordPointer = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3bFunctionName)
                this.SecondaryColor3b = (delegate* unmanaged</* GLbyte */ byte, /* GLbyte */ byte, /* GLbyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3bvFunctionName)
                this.SecondaryColor3bv = (delegate* unmanaged</* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3dFunctionName)
                this.SecondaryColor3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3dvFunctionName)
                this.SecondaryColor3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3fFunctionName)
                this.SecondaryColor3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3fvFunctionName)
                this.SecondaryColor3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3iFunctionName)
                this.SecondaryColor3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3ivFunctionName)
                this.SecondaryColor3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3sFunctionName)
                this.SecondaryColor3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3svFunctionName)
                this.SecondaryColor3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3ubFunctionName)
                this.SecondaryColor3ub = (delegate* unmanaged</* GLubyte */ byte, /* GLubyte */ byte, /* GLubyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3ubvFunctionName)
                this.SecondaryColor3ubv = (delegate* unmanaged</* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3uiFunctionName)
                this.SecondaryColor3ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3uivFunctionName)
                this.SecondaryColor3uiv = (delegate* unmanaged</* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3usFunctionName)
                this.SecondaryColor3us = (delegate* unmanaged</* GLushort */ ushort, /* GLushort */ ushort, /* GLushort */ ushort, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColor3usvFunctionName)
                this.SecondaryColor3usv = (delegate* unmanaged</* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColorPointerFunctionName)
                this.SecondaryColorPointer = (delegate* unmanaged</* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2dFunctionName)
                this.WindowPos2d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2dvFunctionName)
                this.WindowPos2dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2fFunctionName)
                this.WindowPos2f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2fvFunctionName)
                this.WindowPos2fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2iFunctionName)
                this.WindowPos2i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2ivFunctionName)
                this.WindowPos2iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2sFunctionName)
                this.WindowPos2s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos2svFunctionName)
                this.WindowPos2sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3dFunctionName)
                this.WindowPos3d = (delegate* unmanaged</* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3dvFunctionName)
                this.WindowPos3dv = (delegate* unmanaged</* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3fFunctionName)
                this.WindowPos3f = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3fvFunctionName)
                this.WindowPos3fv = (delegate* unmanaged</* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3iFunctionName)
                this.WindowPos3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3ivFunctionName)
                this.WindowPos3iv = (delegate* unmanaged</* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3sFunctionName)
                this.WindowPos3s = (delegate* unmanaged</* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glWindowPos3svFunctionName)
                this.WindowPos3sv = (delegate* unmanaged</* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendColorFunctionName)
                this.BlendColor = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendEquationFunctionName)
                this.BlendEquation = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version15)
        {
            fixed(byte* name = glGenQueriesFunctionName)
                this.GenQueries = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteQueriesFunctionName)
                this.DeleteQueries = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsQueryFunctionName)
                this.IsQuery = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glBeginQueryFunctionName)
                this.BeginQuery = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEndQueryFunctionName)
                this.EndQuery = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryivFunctionName)
                this.GetQueryiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryObjectivFunctionName)
                this.GetQueryObjectiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryObjectuivFunctionName)
                this.GetQueryObjectuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBufferFunctionName)
                this.BindBuffer = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteBuffersFunctionName)
                this.DeleteBuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenBuffersFunctionName)
                this.GenBuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsBufferFunctionName)
                this.IsBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glBufferDataFunctionName)
                this.BufferData = (delegate* unmanaged</* GLenum */ int, /* GLsizeiptr */ nint, /* void */ void*, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBufferSubDataFunctionName)
                this.BufferSubData = (delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetBufferSubDataFunctionName)
                this.GetBufferSubData = (delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapBufferFunctionName)
                this.MapBuffer = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void*>)loadFunc(name);
            fixed(byte* name = glUnmapBufferFunctionName)
                this.UnmapBuffer = (delegate* unmanaged</* GLenum */ int, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glGetBufferParameterivFunctionName)
                this.GetBufferParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetBufferPointervFunctionName)
                this.GetBufferPointerv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void**, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version20)
        {
            fixed(byte* name = glBlendEquationSeparateFunctionName)
                this.BlendEquationSeparate = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawBuffersFunctionName)
                this.DrawBuffers = (delegate* unmanaged</* GLsizei */ int, /* GLenum */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glStencilOpSeparateFunctionName)
                this.StencilOpSeparate = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glStencilFuncSeparateFunctionName)
                this.StencilFuncSeparate = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glStencilMaskSeparateFunctionName)
                this.StencilMaskSeparate = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glAttachShaderFunctionName)
                this.AttachShader = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindAttribLocationFunctionName)
                this.BindAttribLocation = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompileShaderFunctionName)
                this.CompileShader = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateProgramFunctionName)
                this.CreateProgram = (delegate* unmanaged</* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glCreateShaderFunctionName)
                this.CreateShader = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glDeleteProgramFunctionName)
                this.DeleteProgram = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteShaderFunctionName)
                this.DeleteShader = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDetachShaderFunctionName)
                this.DetachShader = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDisableVertexAttribArrayFunctionName)
                this.DisableVertexAttribArray = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEnableVertexAttribArrayFunctionName)
                this.EnableVertexAttribArray = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveAttribFunctionName)
                this.GetActiveAttrib = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* GLenum */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveUniformFunctionName)
                this.GetActiveUniform = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* GLenum */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetAttachedShadersFunctionName)
                this.GetAttachedShaders = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetAttribLocationFunctionName)
                this.GetAttribLocation = (delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glGetProgramivFunctionName)
                this.GetProgramiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramInfoLogFunctionName)
                this.GetProgramInfoLog = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetShaderivFunctionName)
                this.GetShaderiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetShaderInfoLogFunctionName)
                this.GetShaderInfoLog = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetShaderSourceFunctionName)
                this.GetShaderSource = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformLocationFunctionName)
                this.GetUniformLocation = (delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glGetUniformfvFunctionName)
                this.GetUniformfv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformivFunctionName)
                this.GetUniformiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribdvFunctionName)
                this.GetVertexAttribdv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribfvFunctionName)
                this.GetVertexAttribfv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribivFunctionName)
                this.GetVertexAttribiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribPointervFunctionName)
                this.GetVertexAttribPointerv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void**, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsProgramFunctionName)
                this.IsProgram = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glIsShaderFunctionName)
                this.IsShader = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glLinkProgramFunctionName)
                this.LinkProgram = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glShaderSourceFunctionName)
                this.ShaderSource = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte**, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUseProgramFunctionName)
                this.UseProgram = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1fFunctionName)
                this.Uniform1f = (delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2fFunctionName)
                this.Uniform2f = (delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3fFunctionName)
                this.Uniform3f = (delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4fFunctionName)
                this.Uniform4f = (delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1iFunctionName)
                this.Uniform1i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2iFunctionName)
                this.Uniform2i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3iFunctionName)
                this.Uniform3i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4iFunctionName)
                this.Uniform4i = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1fvFunctionName)
                this.Uniform1fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2fvFunctionName)
                this.Uniform2fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3fvFunctionName)
                this.Uniform3fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4fvFunctionName)
                this.Uniform4fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1ivFunctionName)
                this.Uniform1iv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2ivFunctionName)
                this.Uniform2iv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3ivFunctionName)
                this.Uniform3iv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4ivFunctionName)
                this.Uniform4iv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix2fvFunctionName)
                this.UniformMatrix2fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix3fvFunctionName)
                this.UniformMatrix3fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix4fvFunctionName)
                this.UniformMatrix4fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glValidateProgramFunctionName)
                this.ValidateProgram = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib1dFunctionName)
                this.VertexAttrib1d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib1dvFunctionName)
                this.VertexAttrib1dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib1fFunctionName)
                this.VertexAttrib1f = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib1fvFunctionName)
                this.VertexAttrib1fv = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib1sFunctionName)
                this.VertexAttrib1s = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib1svFunctionName)
                this.VertexAttrib1sv = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib2dFunctionName)
                this.VertexAttrib2d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib2dvFunctionName)
                this.VertexAttrib2dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib2fFunctionName)
                this.VertexAttrib2f = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib2fvFunctionName)
                this.VertexAttrib2fv = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib2sFunctionName)
                this.VertexAttrib2s = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib2svFunctionName)
                this.VertexAttrib2sv = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib3dFunctionName)
                this.VertexAttrib3d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib3dvFunctionName)
                this.VertexAttrib3dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib3fFunctionName)
                this.VertexAttrib3f = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib3fvFunctionName)
                this.VertexAttrib3fv = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib3sFunctionName)
                this.VertexAttrib3s = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib3svFunctionName)
                this.VertexAttrib3sv = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NbvFunctionName)
                this.VertexAttrib4Nbv = (delegate* unmanaged</* GLuint */ uint, /* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NivFunctionName)
                this.VertexAttrib4Niv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NsvFunctionName)
                this.VertexAttrib4Nsv = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NubFunctionName)
                this.VertexAttrib4Nub = (delegate* unmanaged</* GLuint */ uint, /* GLubyte */ byte, /* GLubyte */ byte, /* GLubyte */ byte, /* GLubyte */ byte, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NubvFunctionName)
                this.VertexAttrib4Nubv = (delegate* unmanaged</* GLuint */ uint, /* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NuivFunctionName)
                this.VertexAttrib4Nuiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4NusvFunctionName)
                this.VertexAttrib4Nusv = (delegate* unmanaged</* GLuint */ uint, /* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4bvFunctionName)
                this.VertexAttrib4bv = (delegate* unmanaged</* GLuint */ uint, /* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4dFunctionName)
                this.VertexAttrib4d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4dvFunctionName)
                this.VertexAttrib4dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4fFunctionName)
                this.VertexAttrib4f = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4fvFunctionName)
                this.VertexAttrib4fv = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4ivFunctionName)
                this.VertexAttrib4iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4sFunctionName)
                this.VertexAttrib4s = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* GLshort */ short, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4svFunctionName)
                this.VertexAttrib4sv = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4ubvFunctionName)
                this.VertexAttrib4ubv = (delegate* unmanaged</* GLuint */ uint, /* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4uivFunctionName)
                this.VertexAttrib4uiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttrib4usvFunctionName)
                this.VertexAttrib4usv = (delegate* unmanaged</* GLuint */ uint, /* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribPointerFunctionName)
                this.VertexAttribPointer = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLboolean */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version21)
        {
            fixed(byte* name = glUniformMatrix2x3fvFunctionName)
                this.UniformMatrix2x3fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix3x2fvFunctionName)
                this.UniformMatrix3x2fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix2x4fvFunctionName)
                this.UniformMatrix2x4fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix4x2fvFunctionName)
                this.UniformMatrix4x2fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix3x4fvFunctionName)
                this.UniformMatrix3x4fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix4x3fvFunctionName)
                this.UniformMatrix4x3fv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version30)
        {
            fixed(byte* name = glColorMaskiFunctionName)
                this.ColorMaski = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetBooleani_vFunctionName)
                this.GetBooleani_v = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLboolean */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetIntegeri_vFunctionName)
                this.GetIntegeri_v = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEnableiFunctionName)
                this.Enablei = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDisableiFunctionName)
                this.Disablei = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsEnablediFunctionName)
                this.IsEnabledi = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glBeginTransformFeedbackFunctionName)
                this.BeginTransformFeedback = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEndTransformFeedbackFunctionName)
                this.EndTransformFeedback = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBufferRangeFunctionName)
                this.BindBufferRange = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBufferBaseFunctionName)
                this.BindBufferBase = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTransformFeedbackVaryingsFunctionName)
                this.TransformFeedbackVaryings = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte**, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTransformFeedbackVaryingFunctionName)
                this.GetTransformFeedbackVarying = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLsizei */ int*, /* GLenum */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClampColorFunctionName)
                this.ClampColor = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBeginConditionalRenderFunctionName)
                this.BeginConditionalRender = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEndConditionalRenderFunctionName)
                this.EndConditionalRender = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribIPointerFunctionName)
                this.VertexAttribIPointer = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribIivFunctionName)
                this.GetVertexAttribIiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribIuivFunctionName)
                this.GetVertexAttribIuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI1iFunctionName)
                this.VertexAttribI1i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI2iFunctionName)
                this.VertexAttribI2i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI3iFunctionName)
                this.VertexAttribI3i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4iFunctionName)
                this.VertexAttribI4i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI1uiFunctionName)
                this.VertexAttribI1ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI2uiFunctionName)
                this.VertexAttribI2ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI3uiFunctionName)
                this.VertexAttribI3ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4uiFunctionName)
                this.VertexAttribI4ui = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI1ivFunctionName)
                this.VertexAttribI1iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI2ivFunctionName)
                this.VertexAttribI2iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI3ivFunctionName)
                this.VertexAttribI3iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4ivFunctionName)
                this.VertexAttribI4iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI1uivFunctionName)
                this.VertexAttribI1uiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI2uivFunctionName)
                this.VertexAttribI2uiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI3uivFunctionName)
                this.VertexAttribI3uiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4uivFunctionName)
                this.VertexAttribI4uiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4bvFunctionName)
                this.VertexAttribI4bv = (delegate* unmanaged</* GLuint */ uint, /* GLbyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4svFunctionName)
                this.VertexAttribI4sv = (delegate* unmanaged</* GLuint */ uint, /* GLshort */ short*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4ubvFunctionName)
                this.VertexAttribI4ubv = (delegate* unmanaged</* GLuint */ uint, /* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribI4usvFunctionName)
                this.VertexAttribI4usv = (delegate* unmanaged</* GLuint */ uint, /* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformuivFunctionName)
                this.GetUniformuiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindFragDataLocationFunctionName)
                this.BindFragDataLocation = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetFragDataLocationFunctionName)
                this.GetFragDataLocation = (delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glUniform1uiFunctionName)
                this.Uniform1ui = (delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2uiFunctionName)
                this.Uniform2ui = (delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3uiFunctionName)
                this.Uniform3ui = (delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4uiFunctionName)
                this.Uniform4ui = (delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1uivFunctionName)
                this.Uniform1uiv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2uivFunctionName)
                this.Uniform2uiv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3uivFunctionName)
                this.Uniform3uiv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4uivFunctionName)
                this.Uniform4uiv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexParameterIivFunctionName)
                this.TexParameterIiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexParameterIuivFunctionName)
                this.TexParameterIuiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexParameterIivFunctionName)
                this.GetTexParameterIiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTexParameterIuivFunctionName)
                this.GetTexParameterIuiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearBufferivFunctionName)
                this.ClearBufferiv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearBufferuivFunctionName)
                this.ClearBufferuiv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearBufferfvFunctionName)
                this.ClearBufferfv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearBufferfiFunctionName)
                this.ClearBufferfi = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLfloat */ float, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetStringiFunctionName)
                this.GetStringi = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLubyte */ byte*>)loadFunc(name);
            fixed(byte* name = glIsRenderbufferFunctionName)
                this.IsRenderbuffer = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glBindRenderbufferFunctionName)
                this.BindRenderbuffer = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteRenderbuffersFunctionName)
                this.DeleteRenderbuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenRenderbuffersFunctionName)
                this.GenRenderbuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRenderbufferStorageFunctionName)
                this.RenderbufferStorage = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetRenderbufferParameterivFunctionName)
                this.GetRenderbufferParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsFramebufferFunctionName)
                this.IsFramebuffer = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glBindFramebufferFunctionName)
                this.BindFramebuffer = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteFramebuffersFunctionName)
                this.DeleteFramebuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenFramebuffersFunctionName)
                this.GenFramebuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCheckFramebufferStatusFunctionName)
                this.CheckFramebufferStatus = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int>)loadFunc(name);
            fixed(byte* name = glFramebufferTexture1DFunctionName)
                this.FramebufferTexture1D = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFramebufferTexture2DFunctionName)
                this.FramebufferTexture2D = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFramebufferTexture3DFunctionName)
                this.FramebufferTexture3D = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFramebufferRenderbufferFunctionName)
                this.FramebufferRenderbuffer = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetFramebufferAttachmentParameterivFunctionName)
                this.GetFramebufferAttachmentParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenerateMipmapFunctionName)
                this.GenerateMipmap = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlitFramebufferFunctionName)
                this.BlitFramebuffer = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLbitfield */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glRenderbufferStorageMultisampleFunctionName)
                this.RenderbufferStorageMultisample = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFramebufferTextureLayerFunctionName)
                this.FramebufferTextureLayer = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapBufferRangeFunctionName)
                this.MapBufferRange = (delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* GLbitfield */ int, /* void */ void*>)loadFunc(name);
            fixed(byte* name = glFlushMappedBufferRangeFunctionName)
                this.FlushMappedBufferRange = (delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindVertexArrayFunctionName)
                this.BindVertexArray = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteVertexArraysFunctionName)
                this.DeleteVertexArrays = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenVertexArraysFunctionName)
                this.GenVertexArrays = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsVertexArrayFunctionName)
                this.IsVertexArray = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version31)
        {
            fixed(byte* name = glDrawArraysInstancedFunctionName)
                this.DrawArraysInstanced = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawElementsInstancedFunctionName)
                this.DrawElementsInstanced = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexBufferFunctionName)
                this.TexBuffer = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPrimitiveRestartIndexFunctionName)
                this.PrimitiveRestartIndex = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyBufferSubDataFunctionName)
                this.CopyBufferSubData = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLintptr */ nint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformIndicesFunctionName)
                this.GetUniformIndices = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte**, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveUniformsivFunctionName)
                this.GetActiveUniformsiv = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveUniformNameFunctionName)
                this.GetActiveUniformName = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformBlockIndexFunctionName)
                this.GetUniformBlockIndex = (delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glGetActiveUniformBlockivFunctionName)
                this.GetActiveUniformBlockiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveUniformBlockNameFunctionName)
                this.GetActiveUniformBlockName = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformBlockBindingFunctionName)
                this.UniformBlockBinding = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBufferRangeFunctionName)
                this.BindBufferRange = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBufferBaseFunctionName)
                this.BindBufferBase = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetIntegeri_vFunctionName)
                this.GetIntegeri_v = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version32)
        {
            fixed(byte* name = glDrawElementsBaseVertexFunctionName)
                this.DrawElementsBaseVertex = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawRangeElementsBaseVertexFunctionName)
                this.DrawRangeElementsBaseVertex = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawElementsInstancedBaseVertexFunctionName)
                this.DrawElementsInstancedBaseVertex = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawElementsBaseVertexFunctionName)
                this.MultiDrawElementsBaseVertex = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int*, /* GLenum */ int, /* void */ void**, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProvokingVertexFunctionName)
                this.ProvokingVertex = (delegate* unmanaged</* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFenceSyncFunctionName)
                this.FenceSync = (delegate* unmanaged</* GLenum */ int, /* GLbitfield */ int, /* GLsync */ void*>)loadFunc(name);
            fixed(byte* name = glIsSyncFunctionName)
                this.IsSync = (delegate* unmanaged</* GLsync */ void*, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glDeleteSyncFunctionName)
                this.DeleteSync = (delegate* unmanaged</* GLsync */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClientWaitSyncFunctionName)
                this.ClientWaitSync = (delegate* unmanaged</* GLsync */ void*, /* GLbitfield */ int, /* GLuint64 */ ulong, /* GLenum */ int>)loadFunc(name);
            fixed(byte* name = glWaitSyncFunctionName)
                this.WaitSync = (delegate* unmanaged</* GLsync */ void*, /* GLbitfield */ int, /* GLuint64 */ ulong, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetInteger64vFunctionName)
                this.GetInteger64v = (delegate* unmanaged</* GLenum */ int, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetSyncivFunctionName)
                this.GetSynciv = (delegate* unmanaged</* GLsync */ void*, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetInteger64i_vFunctionName)
                this.GetInteger64i_v = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetBufferParameteri64vFunctionName)
                this.GetBufferParameteri64v = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFramebufferTextureFunctionName)
                this.FramebufferTexture = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexImage2DMultisampleFunctionName)
                this.TexImage2DMultisample = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexImage3DMultisampleFunctionName)
                this.TexImage3DMultisample = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetMultisamplefvFunctionName)
                this.GetMultisamplefv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSampleMaskiFunctionName)
                this.SampleMaski = (delegate* unmanaged</* GLuint */ uint, /* GLbitfield */ int, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version33)
        {
            fixed(byte* name = glBindFragDataLocationIndexedFunctionName)
                this.BindFragDataLocationIndexed = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetFragDataIndexFunctionName)
                this.GetFragDataIndex = (delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glGenSamplersFunctionName)
                this.GenSamplers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteSamplersFunctionName)
                this.DeleteSamplers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsSamplerFunctionName)
                this.IsSampler = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glBindSamplerFunctionName)
                this.BindSampler = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSamplerParameteriFunctionName)
                this.SamplerParameteri = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSamplerParameterivFunctionName)
                this.SamplerParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSamplerParameterfFunctionName)
                this.SamplerParameterf = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSamplerParameterfvFunctionName)
                this.SamplerParameterfv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSamplerParameterIivFunctionName)
                this.SamplerParameterIiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSamplerParameterIuivFunctionName)
                this.SamplerParameterIuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetSamplerParameterivFunctionName)
                this.GetSamplerParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetSamplerParameterIivFunctionName)
                this.GetSamplerParameterIiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetSamplerParameterfvFunctionName)
                this.GetSamplerParameterfv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetSamplerParameterIuivFunctionName)
                this.GetSamplerParameterIuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glQueryCounterFunctionName)
                this.QueryCounter = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryObjecti64vFunctionName)
                this.GetQueryObjecti64v = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryObjectui64vFunctionName)
                this.GetQueryObjectui64v = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint64 */ ulong*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribDivisorFunctionName)
                this.VertexAttribDivisor = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP1uiFunctionName)
                this.VertexAttribP1ui = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP1uivFunctionName)
                this.VertexAttribP1uiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP2uiFunctionName)
                this.VertexAttribP2ui = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP2uivFunctionName)
                this.VertexAttribP2uiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP3uiFunctionName)
                this.VertexAttribP3ui = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP3uivFunctionName)
                this.VertexAttribP3uiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP4uiFunctionName)
                this.VertexAttribP4ui = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribP4uivFunctionName)
                this.VertexAttribP4uiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexP2uiFunctionName)
                this.VertexP2ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexP2uivFunctionName)
                this.VertexP2uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexP3uiFunctionName)
                this.VertexP3ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexP3uivFunctionName)
                this.VertexP3uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexP4uiFunctionName)
                this.VertexP4ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexP4uivFunctionName)
                this.VertexP4uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP1uiFunctionName)
                this.TexCoordP1ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP1uivFunctionName)
                this.TexCoordP1uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP2uiFunctionName)
                this.TexCoordP2ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP2uivFunctionName)
                this.TexCoordP2uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP3uiFunctionName)
                this.TexCoordP3ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP3uivFunctionName)
                this.TexCoordP3uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP4uiFunctionName)
                this.TexCoordP4ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexCoordP4uivFunctionName)
                this.TexCoordP4uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP1uiFunctionName)
                this.MultiTexCoordP1ui = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP1uivFunctionName)
                this.MultiTexCoordP1uiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP2uiFunctionName)
                this.MultiTexCoordP2ui = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP2uivFunctionName)
                this.MultiTexCoordP2uiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP3uiFunctionName)
                this.MultiTexCoordP3ui = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP3uivFunctionName)
                this.MultiTexCoordP3uiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP4uiFunctionName)
                this.MultiTexCoordP4ui = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiTexCoordP4uivFunctionName)
                this.MultiTexCoordP4uiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormalP3uiFunctionName)
                this.NormalP3ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNormalP3uivFunctionName)
                this.NormalP3uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorP3uiFunctionName)
                this.ColorP3ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorP3uivFunctionName)
                this.ColorP3uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorP4uiFunctionName)
                this.ColorP4ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glColorP4uivFunctionName)
                this.ColorP4uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColorP3uiFunctionName)
                this.SecondaryColorP3ui = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glSecondaryColorP3uivFunctionName)
                this.SecondaryColorP3uiv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version40)
        {
            fixed(byte* name = glMinSampleShadingFunctionName)
                this.MinSampleShading = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendEquationiFunctionName)
                this.BlendEquationi = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendEquationSeparateiFunctionName)
                this.BlendEquationSeparatei = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendFunciFunctionName)
                this.BlendFunci = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlendFuncSeparateiFunctionName)
                this.BlendFuncSeparatei = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawArraysIndirectFunctionName)
                this.DrawArraysIndirect = (delegate* unmanaged</* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawElementsIndirectFunctionName)
                this.DrawElementsIndirect = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1dFunctionName)
                this.Uniform1d = (delegate* unmanaged</* GLint */ int, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2dFunctionName)
                this.Uniform2d = (delegate* unmanaged</* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3dFunctionName)
                this.Uniform3d = (delegate* unmanaged</* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4dFunctionName)
                this.Uniform4d = (delegate* unmanaged</* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform1dvFunctionName)
                this.Uniform1dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform2dvFunctionName)
                this.Uniform2dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform3dvFunctionName)
                this.Uniform3dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniform4dvFunctionName)
                this.Uniform4dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix2dvFunctionName)
                this.UniformMatrix2dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix3dvFunctionName)
                this.UniformMatrix3dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix4dvFunctionName)
                this.UniformMatrix4dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix2x3dvFunctionName)
                this.UniformMatrix2x3dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix2x4dvFunctionName)
                this.UniformMatrix2x4dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix3x2dvFunctionName)
                this.UniformMatrix3x2dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix3x4dvFunctionName)
                this.UniformMatrix3x4dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix4x2dvFunctionName)
                this.UniformMatrix4x2dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformMatrix4x3dvFunctionName)
                this.UniformMatrix4x3dv = (delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformdvFunctionName)
                this.GetUniformdv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetSubroutineUniformLocationFunctionName)
                this.GetSubroutineUniformLocation = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glGetSubroutineIndexFunctionName)
                this.GetSubroutineIndex = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glGetActiveSubroutineUniformivFunctionName)
                this.GetActiveSubroutineUniformiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveSubroutineUniformNameFunctionName)
                this.GetActiveSubroutineUniformName = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveSubroutineNameFunctionName)
                this.GetActiveSubroutineName = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUniformSubroutinesuivFunctionName)
                this.UniformSubroutinesuiv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetUniformSubroutineuivFunctionName)
                this.GetUniformSubroutineuiv = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramStageivFunctionName)
                this.GetProgramStageiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPatchParameteriFunctionName)
                this.PatchParameteri = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPatchParameterfvFunctionName)
                this.PatchParameterfv = (delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindTransformFeedbackFunctionName)
                this.BindTransformFeedback = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteTransformFeedbacksFunctionName)
                this.DeleteTransformFeedbacks = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenTransformFeedbacksFunctionName)
                this.GenTransformFeedbacks = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsTransformFeedbackFunctionName)
                this.IsTransformFeedback = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glPauseTransformFeedbackFunctionName)
                this.PauseTransformFeedback = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glResumeTransformFeedbackFunctionName)
                this.ResumeTransformFeedback = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawTransformFeedbackFunctionName)
                this.DrawTransformFeedback = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawTransformFeedbackStreamFunctionName)
                this.DrawTransformFeedbackStream = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBeginQueryIndexedFunctionName)
                this.BeginQueryIndexed = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEndQueryIndexedFunctionName)
                this.EndQueryIndexed = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryIndexedivFunctionName)
                this.GetQueryIndexediv = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version41)
        {
            fixed(byte* name = glReleaseShaderCompilerFunctionName)
                this.ReleaseShaderCompiler = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glShaderBinaryFunctionName)
                this.ShaderBinary = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetShaderPrecisionFormatFunctionName)
                this.GetShaderPrecisionFormat = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDepthRangefFunctionName)
                this.DepthRangef = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearDepthfFunctionName)
                this.ClearDepthf = (delegate* unmanaged</* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramBinaryFunctionName)
                this.GetProgramBinary = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLenum */ int*, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramBinaryFunctionName)
                this.ProgramBinary = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramParameteriFunctionName)
                this.ProgramParameteri = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glUseProgramStagesFunctionName)
                this.UseProgramStages = (delegate* unmanaged</* GLuint */ uint, /* GLbitfield */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glActiveShaderProgramFunctionName)
                this.ActiveShaderProgram = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateShaderProgramvFunctionName)
                this.CreateShaderProgramv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLchar */ byte**, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glBindProgramPipelineFunctionName)
                this.BindProgramPipeline = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDeleteProgramPipelinesFunctionName)
                this.DeleteProgramPipelines = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenProgramPipelinesFunctionName)
                this.GenProgramPipelines = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glIsProgramPipelineFunctionName)
                this.IsProgramPipeline = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glGetProgramPipelineivFunctionName)
                this.GetProgramPipelineiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramParameteriFunctionName)
                this.ProgramParameteri = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1iFunctionName)
                this.ProgramUniform1i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1ivFunctionName)
                this.ProgramUniform1iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1fFunctionName)
                this.ProgramUniform1f = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1fvFunctionName)
                this.ProgramUniform1fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1dFunctionName)
                this.ProgramUniform1d = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1dvFunctionName)
                this.ProgramUniform1dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1uiFunctionName)
                this.ProgramUniform1ui = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform1uivFunctionName)
                this.ProgramUniform1uiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2iFunctionName)
                this.ProgramUniform2i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2ivFunctionName)
                this.ProgramUniform2iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2fFunctionName)
                this.ProgramUniform2f = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2fvFunctionName)
                this.ProgramUniform2fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2dFunctionName)
                this.ProgramUniform2d = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2dvFunctionName)
                this.ProgramUniform2dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2uiFunctionName)
                this.ProgramUniform2ui = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform2uivFunctionName)
                this.ProgramUniform2uiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3iFunctionName)
                this.ProgramUniform3i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3ivFunctionName)
                this.ProgramUniform3iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3fFunctionName)
                this.ProgramUniform3f = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3fvFunctionName)
                this.ProgramUniform3fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3dFunctionName)
                this.ProgramUniform3d = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3dvFunctionName)
                this.ProgramUniform3dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3uiFunctionName)
                this.ProgramUniform3ui = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform3uivFunctionName)
                this.ProgramUniform3uiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4iFunctionName)
                this.ProgramUniform4i = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4ivFunctionName)
                this.ProgramUniform4iv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4fFunctionName)
                this.ProgramUniform4f = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4fvFunctionName)
                this.ProgramUniform4fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4dFunctionName)
                this.ProgramUniform4d = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4dvFunctionName)
                this.ProgramUniform4dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4uiFunctionName)
                this.ProgramUniform4ui = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniform4uivFunctionName)
                this.ProgramUniform4uiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix2fvFunctionName)
                this.ProgramUniformMatrix2fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix3fvFunctionName)
                this.ProgramUniformMatrix3fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix4fvFunctionName)
                this.ProgramUniformMatrix4fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix2dvFunctionName)
                this.ProgramUniformMatrix2dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix3dvFunctionName)
                this.ProgramUniformMatrix3dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix4dvFunctionName)
                this.ProgramUniformMatrix4dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix2x3fvFunctionName)
                this.ProgramUniformMatrix2x3fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix3x2fvFunctionName)
                this.ProgramUniformMatrix3x2fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix2x4fvFunctionName)
                this.ProgramUniformMatrix2x4fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix4x2fvFunctionName)
                this.ProgramUniformMatrix4x2fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix3x4fvFunctionName)
                this.ProgramUniformMatrix3x4fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix4x3fvFunctionName)
                this.ProgramUniformMatrix4x3fv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix2x3dvFunctionName)
                this.ProgramUniformMatrix2x3dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix3x2dvFunctionName)
                this.ProgramUniformMatrix3x2dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix2x4dvFunctionName)
                this.ProgramUniformMatrix2x4dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix4x2dvFunctionName)
                this.ProgramUniformMatrix4x2dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix3x4dvFunctionName)
                this.ProgramUniformMatrix3x4dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glProgramUniformMatrix4x3dvFunctionName)
                this.ProgramUniformMatrix4x3dv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glValidateProgramPipelineFunctionName)
                this.ValidateProgramPipeline = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramPipelineInfoLogFunctionName)
                this.GetProgramPipelineInfoLog = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL1dFunctionName)
                this.VertexAttribL1d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL2dFunctionName)
                this.VertexAttribL2d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL3dFunctionName)
                this.VertexAttribL3d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL4dFunctionName)
                this.VertexAttribL4d = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL1dvFunctionName)
                this.VertexAttribL1dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL2dvFunctionName)
                this.VertexAttribL2dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL3dvFunctionName)
                this.VertexAttribL3dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribL4dvFunctionName)
                this.VertexAttribL4dv = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribLPointerFunctionName)
                this.VertexAttribLPointer = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexAttribLdvFunctionName)
                this.GetVertexAttribLdv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glViewportArrayvFunctionName)
                this.ViewportArrayv = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glViewportIndexedfFunctionName)
                this.ViewportIndexedf = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glViewportIndexedfvFunctionName)
                this.ViewportIndexedfv = (delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glScissorArrayvFunctionName)
                this.ScissorArrayv = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glScissorIndexedFunctionName)
                this.ScissorIndexed = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glScissorIndexedvFunctionName)
                this.ScissorIndexedv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDepthRangeArrayvFunctionName)
                this.DepthRangeArrayv = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDepthRangeIndexedFunctionName)
                this.DepthRangeIndexed = (delegate* unmanaged</* GLuint */ uint, /* GLdouble */ double, /* GLdouble */ double, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetFloati_vFunctionName)
                this.GetFloati_v = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetDoublei_vFunctionName)
                this.GetDoublei_v = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version42)
        {
            fixed(byte* name = glDrawArraysInstancedBaseInstanceFunctionName)
                this.DrawArraysInstancedBaseInstance = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawElementsInstancedBaseInstanceFunctionName)
                this.DrawElementsInstancedBaseInstance = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawElementsInstancedBaseVertexBaseInstanceFunctionName)
                this.DrawElementsInstancedBaseVertexBaseInstance = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* GLint */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetInternalformativFunctionName)
                this.GetInternalformativ = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetActiveAtomicCounterBufferivFunctionName)
                this.GetActiveAtomicCounterBufferiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindImageTextureFunctionName)
                this.BindImageTexture = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLint */ int, /* GLboolean */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMemoryBarrierFunctionName)
                this.MemoryBarrier = (delegate* unmanaged</* GLbitfield */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexStorage1DFunctionName)
                this.TexStorage1D = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexStorage2DFunctionName)
                this.TexStorage2D = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexStorage3DFunctionName)
                this.TexStorage3D = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawTransformFeedbackInstancedFunctionName)
                this.DrawTransformFeedbackInstanced = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDrawTransformFeedbackStreamInstancedFunctionName)
                this.DrawTransformFeedbackStreamInstanced = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version43)
        {
            fixed(byte* name = glClearBufferDataFunctionName)
                this.ClearBufferData = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearBufferSubDataFunctionName)
                this.ClearBufferSubData = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDispatchComputeFunctionName)
                this.DispatchCompute = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDispatchComputeIndirectFunctionName)
                this.DispatchComputeIndirect = (delegate* unmanaged</* GLintptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyImageSubDataFunctionName)
                this.CopyImageSubData = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glFramebufferParameteriFunctionName)
                this.FramebufferParameteri = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetFramebufferParameterivFunctionName)
                this.GetFramebufferParameteriv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetInternalformati64vFunctionName)
                this.GetInternalformati64v = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateTexSubImageFunctionName)
                this.InvalidateTexSubImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateTexImageFunctionName)
                this.InvalidateTexImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateBufferSubDataFunctionName)
                this.InvalidateBufferSubData = (delegate* unmanaged</* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateBufferDataFunctionName)
                this.InvalidateBufferData = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateFramebufferFunctionName)
                this.InvalidateFramebuffer = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateSubFramebufferFunctionName)
                this.InvalidateSubFramebuffer = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int*, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawArraysIndirectFunctionName)
                this.MultiDrawArraysIndirect = (delegate* unmanaged</* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawElementsIndirectFunctionName)
                this.MultiDrawElementsIndirect = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramInterfaceivFunctionName)
                this.GetProgramInterfaceiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramResourceIndexFunctionName)
                this.GetProgramResourceIndex = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glGetProgramResourceNameFunctionName)
                this.GetProgramResourceName = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramResourceivFunctionName)
                this.GetProgramResourceiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetProgramResourceLocationFunctionName)
                this.GetProgramResourceLocation = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glGetProgramResourceLocationIndexFunctionName)
                this.GetProgramResourceLocationIndex = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLint */ int>)loadFunc(name);
            fixed(byte* name = glShaderStorageBlockBindingFunctionName)
                this.ShaderStorageBlockBinding = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexBufferRangeFunctionName)
                this.TexBufferRange = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexStorage2DMultisampleFunctionName)
                this.TexStorage2DMultisample = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTexStorage3DMultisampleFunctionName)
                this.TexStorage3DMultisample = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureViewFunctionName)
                this.TextureView = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindVertexBufferFunctionName)
                this.BindVertexBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribFormatFunctionName)
                this.VertexAttribFormat = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribIFormatFunctionName)
                this.VertexAttribIFormat = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribLFormatFunctionName)
                this.VertexAttribLFormat = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexAttribBindingFunctionName)
                this.VertexAttribBinding = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexBindingDivisorFunctionName)
                this.VertexBindingDivisor = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDebugMessageControlFunctionName)
                this.DebugMessageControl = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDebugMessageInsertFunctionName)
                this.DebugMessageInsert = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLenum */ int, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDebugMessageCallbackFunctionName)
                this.DebugMessageCallback = (delegate* unmanaged</* GLDEBUGPROC */ delegate* unmanaged<int, int, uint, int, nint, sbyte*, void*, void>, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetDebugMessageLogFunctionName)
                this.GetDebugMessageLog = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* GLenum */ int*, /* GLuint */ uint*, /* GLenum */ int*, /* GLsizei */ int*, /* GLchar */ byte*, /* GLuint */ uint>)loadFunc(name);
            fixed(byte* name = glPushDebugGroupFunctionName)
                this.PushDebugGroup = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPopDebugGroupFunctionName)
                this.PopDebugGroup = (delegate* unmanaged</* void */ void>)loadFunc(name);
            fixed(byte* name = glObjectLabelFunctionName)
                this.ObjectLabel = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetObjectLabelFunctionName)
                this.GetObjectLabel = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glObjectPtrLabelFunctionName)
                this.ObjectPtrLabel = (delegate* unmanaged</* void */ void*, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetObjectPtrLabelFunctionName)
                this.GetObjectPtrLabel = (delegate* unmanaged</* void */ void*, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetPointervFunctionName)
                this.GetPointerv = (delegate* unmanaged</* GLenum */ int, /* void */ void**, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version44)
        {
            fixed(byte* name = glBufferStorageFunctionName)
                this.BufferStorage = (delegate* unmanaged</* GLenum */ int, /* GLsizeiptr */ nint, /* void */ void*, /* GLbitfield */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearTexImageFunctionName)
                this.ClearTexImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearTexSubImageFunctionName)
                this.ClearTexSubImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBuffersBaseFunctionName)
                this.BindBuffersBase = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindBuffersRangeFunctionName)
                this.BindBuffersRange = (delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* GLintptr */ nint*, /* GLsizeiptr */ nint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindTexturesFunctionName)
                this.BindTextures = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindSamplersFunctionName)
                this.BindSamplers = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindImageTexturesFunctionName)
                this.BindImageTextures = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindVertexBuffersFunctionName)
                this.BindVertexBuffers = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* GLintptr */ nint*, /* GLsizei */ int*, /* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version45)
        {
            fixed(byte* name = glClipControlFunctionName)
                this.ClipControl = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateTransformFeedbacksFunctionName)
                this.CreateTransformFeedbacks = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTransformFeedbackBufferBaseFunctionName)
                this.TransformFeedbackBufferBase = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTransformFeedbackBufferRangeFunctionName)
                this.TransformFeedbackBufferRange = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTransformFeedbackivFunctionName)
                this.GetTransformFeedbackiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTransformFeedbacki_vFunctionName)
                this.GetTransformFeedbacki_v = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTransformFeedbacki64_vFunctionName)
                this.GetTransformFeedbacki64_v = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateBuffersFunctionName)
                this.CreateBuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedBufferStorageFunctionName)
                this.NamedBufferStorage = (delegate* unmanaged</* GLuint */ uint, /* GLsizeiptr */ nint, /* void */ void*, /* GLbitfield */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedBufferDataFunctionName)
                this.NamedBufferData = (delegate* unmanaged</* GLuint */ uint, /* GLsizeiptr */ nint, /* void */ void*, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedBufferSubDataFunctionName)
                this.NamedBufferSubData = (delegate* unmanaged</* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyNamedBufferSubDataFunctionName)
                this.CopyNamedBufferSubData = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearNamedBufferDataFunctionName)
                this.ClearNamedBufferData = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearNamedBufferSubDataFunctionName)
                this.ClearNamedBufferSubData = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMapNamedBufferFunctionName)
                this.MapNamedBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void*>)loadFunc(name);
            fixed(byte* name = glMapNamedBufferRangeFunctionName)
                this.MapNamedBufferRange = (delegate* unmanaged</* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* GLbitfield */ int, /* void */ void*>)loadFunc(name);
            fixed(byte* name = glUnmapNamedBufferFunctionName)
                this.UnmapNamedBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int>)loadFunc(name);
            fixed(byte* name = glFlushMappedNamedBufferRangeFunctionName)
                this.FlushMappedNamedBufferRange = (delegate* unmanaged</* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetNamedBufferParameterivFunctionName)
                this.GetNamedBufferParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetNamedBufferParameteri64vFunctionName)
                this.GetNamedBufferParameteri64v = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetNamedBufferPointervFunctionName)
                this.GetNamedBufferPointerv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void**, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetNamedBufferSubDataFunctionName)
                this.GetNamedBufferSubData = (delegate* unmanaged</* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateFramebuffersFunctionName)
                this.CreateFramebuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferRenderbufferFunctionName)
                this.NamedFramebufferRenderbuffer = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferParameteriFunctionName)
                this.NamedFramebufferParameteri = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferTextureFunctionName)
                this.NamedFramebufferTexture = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferTextureLayerFunctionName)
                this.NamedFramebufferTextureLayer = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferDrawBufferFunctionName)
                this.NamedFramebufferDrawBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferDrawBuffersFunctionName)
                this.NamedFramebufferDrawBuffers = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedFramebufferReadBufferFunctionName)
                this.NamedFramebufferReadBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateNamedFramebufferDataFunctionName)
                this.InvalidateNamedFramebufferData = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glInvalidateNamedFramebufferSubDataFunctionName)
                this.InvalidateNamedFramebufferSubData = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearNamedFramebufferivFunctionName)
                this.ClearNamedFramebufferiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearNamedFramebufferuivFunctionName)
                this.ClearNamedFramebufferuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearNamedFramebufferfvFunctionName)
                this.ClearNamedFramebufferfv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glClearNamedFramebufferfiFunctionName)
                this.ClearNamedFramebufferfi = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLfloat */ float, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBlitNamedFramebufferFunctionName)
                this.BlitNamedFramebuffer = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLbitfield */ int, /* GLenum */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCheckNamedFramebufferStatusFunctionName)
                this.CheckNamedFramebufferStatus = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int>)loadFunc(name);
            fixed(byte* name = glGetNamedFramebufferParameterivFunctionName)
                this.GetNamedFramebufferParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetNamedFramebufferAttachmentParameterivFunctionName)
                this.GetNamedFramebufferAttachmentParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateRenderbuffersFunctionName)
                this.CreateRenderbuffers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedRenderbufferStorageFunctionName)
                this.NamedRenderbufferStorage = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glNamedRenderbufferStorageMultisampleFunctionName)
                this.NamedRenderbufferStorageMultisample = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetNamedRenderbufferParameterivFunctionName)
                this.GetNamedRenderbufferParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateTexturesFunctionName)
                this.CreateTextures = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureBufferFunctionName)
                this.TextureBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureBufferRangeFunctionName)
                this.TextureBufferRange = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureStorage1DFunctionName)
                this.TextureStorage1D = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureStorage2DFunctionName)
                this.TextureStorage2D = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureStorage3DFunctionName)
                this.TextureStorage3D = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureStorage2DMultisampleFunctionName)
                this.TextureStorage2DMultisample = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureStorage3DMultisampleFunctionName)
                this.TextureStorage3DMultisample = (delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureSubImage1DFunctionName)
                this.TextureSubImage1D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureSubImage2DFunctionName)
                this.TextureSubImage2D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureSubImage3DFunctionName)
                this.TextureSubImage3D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTextureSubImage1DFunctionName)
                this.CompressedTextureSubImage1D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTextureSubImage2DFunctionName)
                this.CompressedTextureSubImage2D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCompressedTextureSubImage3DFunctionName)
                this.CompressedTextureSubImage3D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTextureSubImage1DFunctionName)
                this.CopyTextureSubImage1D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTextureSubImage2DFunctionName)
                this.CopyTextureSubImage2D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCopyTextureSubImage3DFunctionName)
                this.CopyTextureSubImage3D = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureParameterfFunctionName)
                this.TextureParameterf = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureParameterfvFunctionName)
                this.TextureParameterfv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureParameteriFunctionName)
                this.TextureParameteri = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureParameterIivFunctionName)
                this.TextureParameterIiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureParameterIuivFunctionName)
                this.TextureParameterIuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureParameterivFunctionName)
                this.TextureParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGenerateTextureMipmapFunctionName)
                this.GenerateTextureMipmap = (delegate* unmanaged</* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glBindTextureUnitFunctionName)
                this.BindTextureUnit = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureImageFunctionName)
                this.GetTextureImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetCompressedTextureImageFunctionName)
                this.GetCompressedTextureImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureLevelParameterfvFunctionName)
                this.GetTextureLevelParameterfv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureLevelParameterivFunctionName)
                this.GetTextureLevelParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureParameterfvFunctionName)
                this.GetTextureParameterfv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureParameterIivFunctionName)
                this.GetTextureParameterIiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureParameterIuivFunctionName)
                this.GetTextureParameterIuiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureParameterivFunctionName)
                this.GetTextureParameteriv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateVertexArraysFunctionName)
                this.CreateVertexArrays = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glDisableVertexArrayAttribFunctionName)
                this.DisableVertexArrayAttrib = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glEnableVertexArrayAttribFunctionName)
                this.EnableVertexArrayAttrib = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayElementBufferFunctionName)
                this.VertexArrayElementBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayVertexBufferFunctionName)
                this.VertexArrayVertexBuffer = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayVertexBuffersFunctionName)
                this.VertexArrayVertexBuffers = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* GLintptr */ nint*, /* GLsizei */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayAttribBindingFunctionName)
                this.VertexArrayAttribBinding = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayAttribFormatFunctionName)
                this.VertexArrayAttribFormat = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayAttribIFormatFunctionName)
                this.VertexArrayAttribIFormat = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayAttribLFormatFunctionName)
                this.VertexArrayAttribLFormat = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glVertexArrayBindingDivisorFunctionName)
                this.VertexArrayBindingDivisor = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexArrayivFunctionName)
                this.GetVertexArrayiv = (delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexArrayIndexedivFunctionName)
                this.GetVertexArrayIndexediv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetVertexArrayIndexed64ivFunctionName)
                this.GetVertexArrayIndexed64iv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLint64 */ long*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateSamplersFunctionName)
                this.CreateSamplers = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateProgramPipelinesFunctionName)
                this.CreateProgramPipelines = (delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glCreateQueriesFunctionName)
                this.CreateQueries = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryBufferObjecti64vFunctionName)
                this.GetQueryBufferObjecti64v = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLintptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryBufferObjectivFunctionName)
                this.GetQueryBufferObjectiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLintptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryBufferObjectui64vFunctionName)
                this.GetQueryBufferObjectui64v = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLintptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetQueryBufferObjectuivFunctionName)
                this.GetQueryBufferObjectuiv = (delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLintptr */ nint, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMemoryBarrierByRegionFunctionName)
                this.MemoryBarrierByRegion = (delegate* unmanaged</* GLbitfield */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetTextureSubImageFunctionName)
                this.GetTextureSubImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetCompressedTextureSubImageFunctionName)
                this.GetCompressedTextureSubImage = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetGraphicsResetStatusFunctionName)
                this.GetGraphicsResetStatus = (delegate* unmanaged</* GLenum */ int>)loadFunc(name);
            fixed(byte* name = glGetnCompressedTexImageFunctionName)
                this.GetnCompressedTexImage = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnTexImageFunctionName)
                this.GetnTexImage = (delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnUniformdvFunctionName)
                this.GetnUniformdv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnUniformfvFunctionName)
                this.GetnUniformfv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnUniformivFunctionName)
                this.GetnUniformiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnUniformuivFunctionName)
                this.GetnUniformuiv = (delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glReadnPixelsFunctionName)
                this.ReadnPixels = (delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnMapdvFunctionName)
                this.GetnMapdv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLdouble */ double*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnMapfvFunctionName)
                this.GetnMapfv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnMapivFunctionName)
                this.GetnMapiv = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnPixelMapfvFunctionName)
                this.GetnPixelMapfv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnPixelMapuivFunctionName)
                this.GetnPixelMapuiv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnPixelMapusvFunctionName)
                this.GetnPixelMapusv = (delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLushort */ ushort*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnPolygonStippleFunctionName)
                this.GetnPolygonStipple = (delegate* unmanaged</* GLsizei */ int, /* GLubyte */ byte*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnColorTableFunctionName)
                this.GetnColorTable = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnConvolutionFilterFunctionName)
                this.GetnConvolutionFilter = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnSeparableFilterFunctionName)
                this.GetnSeparableFilter = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* GLsizei */ int, /* void */ void*, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnHistogramFunctionName)
                this.GetnHistogram = (delegate* unmanaged</* GLenum */ int, /* GLboolean */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glGetnMinmaxFunctionName)
                this.GetnMinmax = (delegate* unmanaged</* GLenum */ int, /* GLboolean */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glTextureBarrierFunctionName)
                this.TextureBarrier = (delegate* unmanaged</* void */ void>)loadFunc(name);
        }
        
        if(!IsEmbedded & Version46)
        {
            fixed(byte* name = glSpecializeShaderFunctionName)
                this.SpecializeShader = (delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLuint */ uint, /* GLuint */ uint*, /* GLuint */ uint*, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawArraysIndirectCountFunctionName)
                this.MultiDrawArraysIndirectCount = (delegate* unmanaged</* GLenum */ int, /* void */ void*, /* GLintptr */ nint, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glMultiDrawElementsIndirectCountFunctionName)
                this.MultiDrawElementsIndirectCount = (delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void*, /* GLintptr */ nint, /* GLsizei */ int, /* GLsizei */ int, /* void */ void>)loadFunc(name);
            fixed(byte* name = glPolygonOffsetClampFunctionName)
                this.PolygonOffsetClamp = (delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void>)loadFunc(name);
        }
    }
}
