namespace Rena.Interop.EGL;

public unsafe partial class EGL
{
    internal static ReadOnlySpan<byte> eglChooseConfigFunctionName => "eglChooseConfig"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int*, /* EGLConfig */ void**, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> eglChooseConfig;
    internal static ReadOnlySpan<byte> eglCopyBuffersFunctionName => "eglCopyBuffers"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLNativePixmapType */ void*, /* EGLBoolean */ int> eglCopyBuffers;
    internal static ReadOnlySpan<byte> eglCreateContextFunctionName => "eglCreateContext"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLContext */ void*, /* EGLint */ int*, /* EGLContext */ void*> eglCreateContext;
    internal static ReadOnlySpan<byte> eglCreatePbufferSurfaceFunctionName => "eglCreatePbufferSurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLint */ int*, /* EGLSurface */ void*> eglCreatePbufferSurface;
    internal static ReadOnlySpan<byte> eglCreatePixmapSurfaceFunctionName => "eglCreatePixmapSurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLNativePixmapType */ void*, /* EGLint */ int*, /* EGLSurface */ void*> eglCreatePixmapSurface;
    internal static ReadOnlySpan<byte> eglCreateWindowSurfaceFunctionName => "eglCreateWindowSurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLNativeWindowType */ void*, /* EGLint */ int*, /* EGLSurface */ void*> eglCreateWindowSurface;
    internal static ReadOnlySpan<byte> eglDestroyContextFunctionName => "eglDestroyContext"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLContext */ void*, /* EGLBoolean */ int> eglDestroyContext;
    internal static ReadOnlySpan<byte> eglDestroySurfaceFunctionName => "eglDestroySurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLBoolean */ int> eglDestroySurface;
    internal static ReadOnlySpan<byte> eglGetConfigAttribFunctionName => "eglGetConfigAttrib"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> eglGetConfigAttrib;
    internal static ReadOnlySpan<byte> eglGetConfigsFunctionName => "eglGetConfigs"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void**, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> eglGetConfigs;
    internal static ReadOnlySpan<byte> eglGetCurrentDisplayFunctionName => "eglGetCurrentDisplay"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*> eglGetCurrentDisplay;
    internal static ReadOnlySpan<byte> eglGetCurrentSurfaceFunctionName => "eglGetCurrentSurface"u8;
    private readonly delegate* unmanaged</* EGLint */ int, /* EGLSurface */ void*> eglGetCurrentSurface;
    internal static ReadOnlySpan<byte> eglGetDisplayFunctionName => "eglGetDisplay"u8;
    private readonly delegate* unmanaged</* EGLNativeDisplayType */ void*, /* EGLDisplay */ void*> eglGetDisplay;
    internal static ReadOnlySpan<byte> eglGetErrorFunctionName => "eglGetError"u8;
    private readonly delegate* unmanaged</* EGLint */ int> eglGetError;
    internal static ReadOnlySpan<byte> eglGetProcAddressFunctionName => "eglGetProcAddress"u8;
    private readonly delegate* unmanaged</* char */ byte*, /* __eglMustCastToProperFunctionPointerType */ void*> eglGetProcAddress;
    internal static ReadOnlySpan<byte> eglInitializeFunctionName => "eglInitialize"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int*, /* EGLint */ int*, /* EGLBoolean */ int> eglInitialize;
    internal static ReadOnlySpan<byte> eglMakeCurrentFunctionName => "eglMakeCurrent"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLSurface */ void*, /* EGLContext */ void*, /* EGLBoolean */ int> eglMakeCurrent;
    internal static ReadOnlySpan<byte> eglQueryContextFunctionName => "eglQueryContext"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLContext */ void*, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> eglQueryContext;
    internal static ReadOnlySpan<byte> eglQueryStringFunctionName => "eglQueryString"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int, /* char */ byte*> eglQueryString;
    internal static ReadOnlySpan<byte> eglQuerySurfaceFunctionName => "eglQuerySurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLint */ int*, /* EGLBoolean */ int> eglQuerySurface;
    internal static ReadOnlySpan<byte> eglSwapBuffersFunctionName => "eglSwapBuffers"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLBoolean */ int> eglSwapBuffers;
    internal static ReadOnlySpan<byte> eglTerminateFunctionName => "eglTerminate"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLBoolean */ int> eglTerminate;
    internal static ReadOnlySpan<byte> eglWaitGLFunctionName => "eglWaitGL"u8;
    private readonly delegate* unmanaged</* EGLBoolean */ int> eglWaitGL;
    internal static ReadOnlySpan<byte> eglWaitNativeFunctionName => "eglWaitNative"u8;
    private readonly delegate* unmanaged</* EGLint */ int, /* EGLBoolean */ int> eglWaitNative;
    internal static ReadOnlySpan<byte> eglBindTexImageFunctionName => "eglBindTexImage"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLBoolean */ int> eglBindTexImage;
    internal static ReadOnlySpan<byte> eglReleaseTexImageFunctionName => "eglReleaseTexImage"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLBoolean */ int> eglReleaseTexImage;
    internal static ReadOnlySpan<byte> eglSurfaceAttribFunctionName => "eglSurfaceAttrib"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSurface */ void*, /* EGLint */ int, /* EGLint */ int, /* EGLBoolean */ int> eglSurfaceAttrib;
    internal static ReadOnlySpan<byte> eglSwapIntervalFunctionName => "eglSwapInterval"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLint */ int, /* EGLBoolean */ int> eglSwapInterval;
    internal static ReadOnlySpan<byte> eglBindAPIFunctionName => "eglBindAPI"u8;
    private readonly delegate* unmanaged</* EGLenum */ int, /* EGLBoolean */ int> eglBindAPI;
    internal static ReadOnlySpan<byte> eglQueryAPIFunctionName => "eglQueryAPI"u8;
    private readonly delegate* unmanaged</* EGLenum */ int> eglQueryAPI;
    internal static ReadOnlySpan<byte> eglCreatePbufferFromClientBufferFunctionName => "eglCreatePbufferFromClientBuffer"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLenum */ int, /* EGLClientBuffer */ void*, /* EGLConfig */ void*, /* EGLint */ int*, /* EGLSurface */ void*> eglCreatePbufferFromClientBuffer;
    internal static ReadOnlySpan<byte> eglReleaseThreadFunctionName => "eglReleaseThread"u8;
    private readonly delegate* unmanaged</* EGLBoolean */ int> eglReleaseThread;
    internal static ReadOnlySpan<byte> eglWaitClientFunctionName => "eglWaitClient"u8;
    private readonly delegate* unmanaged</* EGLBoolean */ int> eglWaitClient;
    internal static ReadOnlySpan<byte> eglGetCurrentContextFunctionName => "eglGetCurrentContext"u8;
    private readonly delegate* unmanaged</* EGLContext */ void*> eglGetCurrentContext;
    internal static ReadOnlySpan<byte> eglCreateSyncFunctionName => "eglCreateSync"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLenum */ int, /* EGLAttrib */ nint*, /* EGLSync */ void*> eglCreateSync;
    internal static ReadOnlySpan<byte> eglDestroySyncFunctionName => "eglDestroySync"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLBoolean */ int> eglDestroySync;
    internal static ReadOnlySpan<byte> eglClientWaitSyncFunctionName => "eglClientWaitSync"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLint */ int, /* EGLTime */ ulong, /* EGLint */ int> eglClientWaitSync;
    internal static ReadOnlySpan<byte> eglGetSyncAttribFunctionName => "eglGetSyncAttrib"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLint */ int, /* EGLAttrib */ nint*, /* EGLBoolean */ int> eglGetSyncAttrib;
    internal static ReadOnlySpan<byte> eglCreateImageFunctionName => "eglCreateImage"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLContext */ void*, /* EGLenum */ int, /* EGLClientBuffer */ void*, /* EGLAttrib */ nint*, /* EGLImage */ void*> eglCreateImage;
    internal static ReadOnlySpan<byte> eglDestroyImageFunctionName => "eglDestroyImage"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLImage */ void*, /* EGLBoolean */ int> eglDestroyImage;
    internal static ReadOnlySpan<byte> eglGetPlatformDisplayFunctionName => "eglGetPlatformDisplay"u8;
    private readonly delegate* unmanaged</* EGLenum */ int, /* void */ void*, /* EGLAttrib */ nint*, /* EGLDisplay */ void*> eglGetPlatformDisplay;
    internal static ReadOnlySpan<byte> eglCreatePlatformWindowSurfaceFunctionName => "eglCreatePlatformWindowSurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* void */ void*, /* EGLAttrib */ nint*, /* EGLSurface */ void*> eglCreatePlatformWindowSurface;
    internal static ReadOnlySpan<byte> eglCreatePlatformPixmapSurfaceFunctionName => "eglCreatePlatformPixmapSurface"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLConfig */ void*, /* void */ void*, /* EGLAttrib */ nint*, /* EGLSurface */ void*> eglCreatePlatformPixmapSurface;
    internal static ReadOnlySpan<byte> eglWaitSyncFunctionName => "eglWaitSync"u8;
    private readonly delegate* unmanaged</* EGLDisplay */ void*, /* EGLSync */ void*, /* EGLint */ int, /* EGLBoolean */ int> eglWaitSync;
}
