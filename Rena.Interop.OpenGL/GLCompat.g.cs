// <auto-generated/> 
// CLI args: --spec GL --apis GL 4.6 --profile Compatibility --output Rena.Interop.OpenGL/GLCompat.g.cs --class-name GLCompat --namespace Rena.Interop.OpenGL

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Buffers;
using System.Buffers.Text;
using unsafe GLenum = uint;
using unsafe GLboolean = byte;
using unsafe GLbitfield = uint;
using unsafe GLvoid = byte;
using unsafe GLbyte = sbyte;
using unsafe GLubyte = byte;
using unsafe GLshort = short;
using unsafe GLushort = ushort;
using unsafe GLint = int;
using unsafe GLuint = uint;
using unsafe GLclampx = int;
using unsafe GLsizei = int;
using unsafe GLfloat = float;
using unsafe GLclampf = float;
using unsafe GLdouble = double;
using unsafe GLclampd = double;
using unsafe GLeglClientBufferEXT = void*;
using unsafe GLeglImageOES = void*;
using unsafe GLchar = byte;
using unsafe GLcharARB = byte;
using unsafe GLhalf = ushort;
using unsafe GLhalfARB = ushort;
using unsafe GLfixed = int;
using unsafe GLintptr = nint;
using unsafe GLintptrARB = nint;
using unsafe GLsizeiptr = nint;
using unsafe GLsizeiptrARB = nint;
using unsafe GLint64 = long;
using unsafe GLint64EXT = long;
using unsafe GLuint64 = ulong;
using unsafe GLuint64EXT = ulong;
using unsafe GLsync = global::Rena.Interop.OpenGL.GLCompat.__GLsync*;
using unsafe GLDEBUGPROC = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCARB = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCKHR = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCAMD = delegate* unmanaged<uint,uint,uint,int,byte*,void*,void>;
using unsafe GLhalfNV = ushort;
using unsafe GLvdpauSurfaceNV = nint;
using unsafe GLVULKANPROCNV = delegate* unmanaged<void>;

namespace Rena.Interop.OpenGL;

public static class GLCompat
{
    public unsafe sealed class Commands
    {
        public readonly ushort Major;
        public readonly ushort Minor;
        public readonly bool IsEmbedded;

        public readonly bool Version10;
        public readonly bool Version11;
        public readonly bool Version12;
        public readonly bool Version13;
        public readonly bool Version14;
        public readonly bool Version15;
        public readonly bool Version20;
        public readonly bool Version21;
        public readonly bool Version30;
        public readonly bool Version31;
        public readonly bool Version32;
        public readonly bool Version33;
        public readonly bool Version40;
        public readonly bool Version41;
        public readonly bool Version42;
        public readonly bool Version43;
        public readonly bool Version44;
        public readonly bool Version45;
        public readonly bool Version46;

        public Commands(delegate* unmanaged<byte*, void*> loader)
        {
            fixed(byte* name = GetStringUtf8) GetString = (delegate* unmanaged<StringName, GLubyte*>)loader(name); 
            if(GetString == null) return;

            var version = GetString(StringName.Version);
            if(version is null) return;
            if(!TryParseVersion(MemoryMarshal.CreateReadOnlySpanFromNullTerminated(version), out Major, out Minor, out IsEmbedded)) return;

            Version10 = Major > 1 || (Major == 1 && Minor >= 0);
            Version11 = Major > 1 || (Major == 1 && Minor >= 1);
            Version12 = Major > 1 || (Major == 1 && Minor >= 2);
            Version13 = Major > 1 || (Major == 1 && Minor >= 3);
            Version14 = Major > 1 || (Major == 1 && Minor >= 4);
            Version15 = Major > 1 || (Major == 1 && Minor >= 5);
            Version20 = Major > 2 || (Major == 2 && Minor >= 0);
            Version21 = Major > 2 || (Major == 2 && Minor >= 1);
            Version30 = Major > 3 || (Major == 3 && Minor >= 0);
            Version31 = Major > 3 || (Major == 3 && Minor >= 1);
            Version32 = Major > 3 || (Major == 3 && Minor >= 2);
            Version33 = Major > 3 || (Major == 3 && Minor >= 3);
            Version40 = Major > 4 || (Major == 4 && Minor >= 0);
            Version41 = Major > 4 || (Major == 4 && Minor >= 1);
            Version42 = Major > 4 || (Major == 4 && Minor >= 2);
            Version43 = Major > 4 || (Major == 4 && Minor >= 3);
            Version44 = Major > 4 || (Major == 4 && Minor >= 4);
            Version45 = Major > 4 || (Major == 4 && Minor >= 5);
            Version46 = Major > 4 || (Major == 4 && Minor >= 6);

            if(!IsEmbedded && Version10)
            {
                fixed(byte* name = CullFaceUtf8) this.CullFace = (delegate* unmanaged<TriangleFace, void>)loader(name);
                fixed(byte* name = FrontFaceUtf8) this.FrontFace = (delegate* unmanaged<FrontFaceDirection, void>)loader(name);
                fixed(byte* name = HintUtf8) this.Hint = (delegate* unmanaged<HintTarget, HintMode, void>)loader(name);
                fixed(byte* name = LineWidthUtf8) this.LineWidth = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = PointSizeUtf8) this.PointSize = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = PolygonModeUtf8) this.PolygonMode = (delegate* unmanaged<TriangleFace, PolygonMode, void>)loader(name);
                fixed(byte* name = ScissorUtf8) this.Scissor = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = TexParameterfUtf8) this.TexParameterf = (delegate* unmanaged<TextureTarget, TextureParameterName, float, void>)loader(name);
                fixed(byte* name = TexParameterfvUtf8) this.TexParameterfv = (delegate* unmanaged<TextureTarget, TextureParameterName, float*, void>)loader(name);
                fixed(byte* name = TexParameteriUtf8) this.TexParameteri = (delegate* unmanaged<TextureTarget, TextureParameterName, int, void>)loader(name);
                fixed(byte* name = TexParameterivUtf8) this.TexParameteriv = (delegate* unmanaged<TextureTarget, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = TexImage1DUtf8) this.TexImage1D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TexImage2DUtf8) this.TexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = DrawBufferUtf8) this.DrawBuffer = (delegate* unmanaged<DrawBufferMode, void>)loader(name);
                fixed(byte* name = ClearUtf8) this.Clear = (delegate* unmanaged<ClearBufferMask, void>)loader(name);
                fixed(byte* name = ClearColorUtf8) this.ClearColor = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = ClearStencilUtf8) this.ClearStencil = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = ClearDepthUtf8) this.ClearDepth = (delegate* unmanaged<GLdouble, void>)loader(name);
                fixed(byte* name = StencilMaskUtf8) this.StencilMask = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = ColorMaskUtf8) this.ColorMask = (delegate* unmanaged<byte, byte, byte, byte, void>)loader(name);
                fixed(byte* name = DepthMaskUtf8) this.DepthMask = (delegate* unmanaged<byte, void>)loader(name);
                fixed(byte* name = DisableUtf8) this.Disable = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = EnableUtf8) this.Enable = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = FinishUtf8) this.Finish = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = FlushUtf8) this.Flush = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = BlendFuncUtf8) this.BlendFunc = (delegate* unmanaged<BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = LogicOpUtf8) this.LogicOp = (delegate* unmanaged<LogicOp, void>)loader(name);
                fixed(byte* name = StencilFuncUtf8) this.StencilFunc = (delegate* unmanaged<StencilFunction, int, uint, void>)loader(name);
                fixed(byte* name = StencilOpUtf8) this.StencilOp = (delegate* unmanaged<StencilOp, StencilOp, StencilOp, void>)loader(name);
                fixed(byte* name = DepthFuncUtf8) this.DepthFunc = (delegate* unmanaged<DepthFunction, void>)loader(name);
                fixed(byte* name = PixelStorefUtf8) this.PixelStoref = (delegate* unmanaged<PixelStoreParameter, float, void>)loader(name);
                fixed(byte* name = PixelStoreiUtf8) this.PixelStorei = (delegate* unmanaged<PixelStoreParameter, int, void>)loader(name);
                fixed(byte* name = ReadBufferUtf8) this.ReadBuffer = (delegate* unmanaged<ReadBufferMode, void>)loader(name);
                fixed(byte* name = ReadPixelsUtf8) this.ReadPixels = (delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = GetBooleanvUtf8) this.GetBooleanv = (delegate* unmanaged<GetPName, byte*, void>)loader(name);
                fixed(byte* name = GetDoublevUtf8) this.GetDoublev = (delegate* unmanaged<GetPName, GLdouble*, void>)loader(name);
                fixed(byte* name = GetErrorUtf8) this.GetError = (delegate* unmanaged<ErrorCode>)loader(name);
                fixed(byte* name = GetFloatvUtf8) this.GetFloatv = (delegate* unmanaged<GetPName, float*, void>)loader(name);
                fixed(byte* name = GetIntegervUtf8) this.GetIntegerv = (delegate* unmanaged<GetPName, int*, void>)loader(name);
                fixed(byte* name = GetStringUtf8) this.GetString = (delegate* unmanaged<StringName, GLubyte*>)loader(name);
                fixed(byte* name = GetTexImageUtf8) this.GetTexImage = (delegate* unmanaged<TextureTarget, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = GetTexParameterfvUtf8) this.GetTexParameterfv = (delegate* unmanaged<TextureTarget, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexParameterivUtf8) this.GetTexParameteriv = (delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexLevelParameterfvUtf8) this.GetTexLevelParameterfv = (delegate* unmanaged<TextureTarget, int, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexLevelParameterivUtf8) this.GetTexLevelParameteriv = (delegate* unmanaged<TextureTarget, int, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = IsEnabledUtf8) this.IsEnabled = (delegate* unmanaged<EnableCap, byte>)loader(name);
                fixed(byte* name = DepthRangeUtf8) this.DepthRange = (delegate* unmanaged<GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = ViewportUtf8) this.Viewport = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = NewListUtf8) this.NewList = (delegate* unmanaged<uint, ListMode, void>)loader(name);
                fixed(byte* name = EndListUtf8) this.EndList = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = CallListUtf8) this.CallList = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = CallListsUtf8) this.CallLists = (delegate* unmanaged<int, ListNameType, void*, void>)loader(name);
                fixed(byte* name = DeleteListsUtf8) this.DeleteLists = (delegate* unmanaged<uint, int, void>)loader(name);
                fixed(byte* name = GenListsUtf8) this.GenLists = (delegate* unmanaged<int, uint>)loader(name);
                fixed(byte* name = ListBaseUtf8) this.ListBase = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = BeginUtf8) this.Begin = (delegate* unmanaged<PrimitiveType, void>)loader(name);
                fixed(byte* name = BitmapUtf8) this.Bitmap = (delegate* unmanaged<int, int, float, float, float, float, GLubyte*, void>)loader(name);
                fixed(byte* name = Color3bUtf8) this.Color3b = (delegate* unmanaged<GLbyte, GLbyte, GLbyte, void>)loader(name);
                fixed(byte* name = Color3bvUtf8) this.Color3bv = (delegate* unmanaged<GLbyte*, void>)loader(name);
                fixed(byte* name = Color3dUtf8) this.Color3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Color3dvUtf8) this.Color3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = Color3fUtf8) this.Color3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = Color3fvUtf8) this.Color3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = Color3iUtf8) this.Color3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = Color3ivUtf8) this.Color3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = Color3sUtf8) this.Color3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = Color3svUtf8) this.Color3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = Color3ubUtf8) this.Color3ub = (delegate* unmanaged<GLubyte, GLubyte, GLubyte, void>)loader(name);
                fixed(byte* name = Color3ubvUtf8) this.Color3ubv = (delegate* unmanaged<GLubyte*, void>)loader(name);
                fixed(byte* name = Color3uiUtf8) this.Color3ui = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = Color3uivUtf8) this.Color3uiv = (delegate* unmanaged<uint*, void>)loader(name);
                fixed(byte* name = Color3usUtf8) this.Color3us = (delegate* unmanaged<ushort, ushort, ushort, void>)loader(name);
                fixed(byte* name = Color3usvUtf8) this.Color3usv = (delegate* unmanaged<ushort*, void>)loader(name);
                fixed(byte* name = Color4bUtf8) this.Color4b = (delegate* unmanaged<GLbyte, GLbyte, GLbyte, GLbyte, void>)loader(name);
                fixed(byte* name = Color4bvUtf8) this.Color4bv = (delegate* unmanaged<GLbyte*, void>)loader(name);
                fixed(byte* name = Color4dUtf8) this.Color4d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Color4dvUtf8) this.Color4dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = Color4fUtf8) this.Color4f = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = Color4fvUtf8) this.Color4fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = Color4iUtf8) this.Color4i = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = Color4ivUtf8) this.Color4iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = Color4sUtf8) this.Color4s = (delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = Color4svUtf8) this.Color4sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = Color4ubUtf8) this.Color4ub = (delegate* unmanaged<GLubyte, GLubyte, GLubyte, GLubyte, void>)loader(name);
                fixed(byte* name = Color4ubvUtf8) this.Color4ubv = (delegate* unmanaged<GLubyte*, void>)loader(name);
                fixed(byte* name = Color4uiUtf8) this.Color4ui = (delegate* unmanaged<uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = Color4uivUtf8) this.Color4uiv = (delegate* unmanaged<uint*, void>)loader(name);
                fixed(byte* name = Color4usUtf8) this.Color4us = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)loader(name);
                fixed(byte* name = Color4usvUtf8) this.Color4usv = (delegate* unmanaged<ushort*, void>)loader(name);
                fixed(byte* name = EdgeFlagUtf8) this.EdgeFlag = (delegate* unmanaged<byte, void>)loader(name);
                fixed(byte* name = EdgeFlagvUtf8) this.EdgeFlagv = (delegate* unmanaged<byte*, void>)loader(name);
                fixed(byte* name = EndUtf8) this.End = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = IndexdUtf8) this.Indexd = (delegate* unmanaged<GLdouble, void>)loader(name);
                fixed(byte* name = IndexdvUtf8) this.Indexdv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = IndexfUtf8) this.Indexf = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = IndexfvUtf8) this.Indexfv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = IndexiUtf8) this.Indexi = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = IndexivUtf8) this.Indexiv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = IndexsUtf8) this.Indexs = (delegate* unmanaged<GLshort, void>)loader(name);
                fixed(byte* name = IndexsvUtf8) this.Indexsv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = Normal3bUtf8) this.Normal3b = (delegate* unmanaged<GLbyte, GLbyte, GLbyte, void>)loader(name);
                fixed(byte* name = Normal3bvUtf8) this.Normal3bv = (delegate* unmanaged<GLbyte*, void>)loader(name);
                fixed(byte* name = Normal3dUtf8) this.Normal3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Normal3dvUtf8) this.Normal3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = Normal3fUtf8) this.Normal3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = Normal3fvUtf8) this.Normal3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = Normal3iUtf8) this.Normal3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = Normal3ivUtf8) this.Normal3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = Normal3sUtf8) this.Normal3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = Normal3svUtf8) this.Normal3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = RasterPos2dUtf8) this.RasterPos2d = (delegate* unmanaged<GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = RasterPos2dvUtf8) this.RasterPos2dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = RasterPos2fUtf8) this.RasterPos2f = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = RasterPos2fvUtf8) this.RasterPos2fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = RasterPos2iUtf8) this.RasterPos2i = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = RasterPos2ivUtf8) this.RasterPos2iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = RasterPos2sUtf8) this.RasterPos2s = (delegate* unmanaged<GLshort, GLshort, void>)loader(name);
                fixed(byte* name = RasterPos2svUtf8) this.RasterPos2sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = RasterPos3dUtf8) this.RasterPos3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = RasterPos3dvUtf8) this.RasterPos3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = RasterPos3fUtf8) this.RasterPos3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = RasterPos3fvUtf8) this.RasterPos3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = RasterPos3iUtf8) this.RasterPos3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = RasterPos3ivUtf8) this.RasterPos3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = RasterPos3sUtf8) this.RasterPos3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = RasterPos3svUtf8) this.RasterPos3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = RasterPos4dUtf8) this.RasterPos4d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = RasterPos4dvUtf8) this.RasterPos4dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = RasterPos4fUtf8) this.RasterPos4f = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = RasterPos4fvUtf8) this.RasterPos4fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = RasterPos4iUtf8) this.RasterPos4i = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = RasterPos4ivUtf8) this.RasterPos4iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = RasterPos4sUtf8) this.RasterPos4s = (delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = RasterPos4svUtf8) this.RasterPos4sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = RectdUtf8) this.Rectd = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = RectdvUtf8) this.Rectdv = (delegate* unmanaged<GLdouble*, GLdouble*, void>)loader(name);
                fixed(byte* name = RectfUtf8) this.Rectf = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = RectfvUtf8) this.Rectfv = (delegate* unmanaged<float*, float*, void>)loader(name);
                fixed(byte* name = RectiUtf8) this.Recti = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = RectivUtf8) this.Rectiv = (delegate* unmanaged<int*, int*, void>)loader(name);
                fixed(byte* name = RectsUtf8) this.Rects = (delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = RectsvUtf8) this.Rectsv = (delegate* unmanaged<GLshort*, GLshort*, void>)loader(name);
                fixed(byte* name = TexCoord1dUtf8) this.TexCoord1d = (delegate* unmanaged<GLdouble, void>)loader(name);
                fixed(byte* name = TexCoord1dvUtf8) this.TexCoord1dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = TexCoord1fUtf8) this.TexCoord1f = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = TexCoord1fvUtf8) this.TexCoord1fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = TexCoord1iUtf8) this.TexCoord1i = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = TexCoord1ivUtf8) this.TexCoord1iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = TexCoord1sUtf8) this.TexCoord1s = (delegate* unmanaged<GLshort, void>)loader(name);
                fixed(byte* name = TexCoord1svUtf8) this.TexCoord1sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = TexCoord2dUtf8) this.TexCoord2d = (delegate* unmanaged<GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = TexCoord2dvUtf8) this.TexCoord2dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = TexCoord2fUtf8) this.TexCoord2f = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = TexCoord2fvUtf8) this.TexCoord2fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = TexCoord2iUtf8) this.TexCoord2i = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = TexCoord2ivUtf8) this.TexCoord2iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = TexCoord2sUtf8) this.TexCoord2s = (delegate* unmanaged<GLshort, GLshort, void>)loader(name);
                fixed(byte* name = TexCoord2svUtf8) this.TexCoord2sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = TexCoord3dUtf8) this.TexCoord3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = TexCoord3dvUtf8) this.TexCoord3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = TexCoord3fUtf8) this.TexCoord3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = TexCoord3fvUtf8) this.TexCoord3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = TexCoord3iUtf8) this.TexCoord3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = TexCoord3ivUtf8) this.TexCoord3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = TexCoord3sUtf8) this.TexCoord3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = TexCoord3svUtf8) this.TexCoord3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = TexCoord4dUtf8) this.TexCoord4d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = TexCoord4dvUtf8) this.TexCoord4dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = TexCoord4fUtf8) this.TexCoord4f = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = TexCoord4fvUtf8) this.TexCoord4fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = TexCoord4iUtf8) this.TexCoord4i = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = TexCoord4ivUtf8) this.TexCoord4iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = TexCoord4sUtf8) this.TexCoord4s = (delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = TexCoord4svUtf8) this.TexCoord4sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = Vertex2dUtf8) this.Vertex2d = (delegate* unmanaged<GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Vertex2dvUtf8) this.Vertex2dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = Vertex2fUtf8) this.Vertex2f = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = Vertex2fvUtf8) this.Vertex2fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = Vertex2iUtf8) this.Vertex2i = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = Vertex2ivUtf8) this.Vertex2iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = Vertex2sUtf8) this.Vertex2s = (delegate* unmanaged<GLshort, GLshort, void>)loader(name);
                fixed(byte* name = Vertex2svUtf8) this.Vertex2sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = Vertex3dUtf8) this.Vertex3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Vertex3dvUtf8) this.Vertex3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = Vertex3fUtf8) this.Vertex3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = Vertex3fvUtf8) this.Vertex3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = Vertex3iUtf8) this.Vertex3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = Vertex3ivUtf8) this.Vertex3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = Vertex3sUtf8) this.Vertex3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = Vertex3svUtf8) this.Vertex3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = Vertex4dUtf8) this.Vertex4d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Vertex4dvUtf8) this.Vertex4dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = Vertex4fUtf8) this.Vertex4f = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = Vertex4fvUtf8) this.Vertex4fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = Vertex4iUtf8) this.Vertex4i = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = Vertex4ivUtf8) this.Vertex4iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = Vertex4sUtf8) this.Vertex4s = (delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = Vertex4svUtf8) this.Vertex4sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = ClipPlaneUtf8) this.ClipPlane = (delegate* unmanaged<ClipPlaneName, GLdouble*, void>)loader(name);
                fixed(byte* name = ColorMaterialUtf8) this.ColorMaterial = (delegate* unmanaged<TriangleFace, ColorMaterialParameter, void>)loader(name);
                fixed(byte* name = FogfUtf8) this.Fogf = (delegate* unmanaged<FogParameter, float, void>)loader(name);
                fixed(byte* name = FogfvUtf8) this.Fogfv = (delegate* unmanaged<FogParameter, float*, void>)loader(name);
                fixed(byte* name = FogiUtf8) this.Fogi = (delegate* unmanaged<FogParameter, int, void>)loader(name);
                fixed(byte* name = FogivUtf8) this.Fogiv = (delegate* unmanaged<FogParameter, int*, void>)loader(name);
                fixed(byte* name = LightfUtf8) this.Lightf = (delegate* unmanaged<LightName, LightParameter, float, void>)loader(name);
                fixed(byte* name = LightfvUtf8) this.Lightfv = (delegate* unmanaged<LightName, LightParameter, float*, void>)loader(name);
                fixed(byte* name = LightiUtf8) this.Lighti = (delegate* unmanaged<LightName, LightParameter, int, void>)loader(name);
                fixed(byte* name = LightivUtf8) this.Lightiv = (delegate* unmanaged<LightName, LightParameter, int*, void>)loader(name);
                fixed(byte* name = LightModelfUtf8) this.LightModelf = (delegate* unmanaged<LightModelParameter, float, void>)loader(name);
                fixed(byte* name = LightModelfvUtf8) this.LightModelfv = (delegate* unmanaged<LightModelParameter, float*, void>)loader(name);
                fixed(byte* name = LightModeliUtf8) this.LightModeli = (delegate* unmanaged<LightModelParameter, int, void>)loader(name);
                fixed(byte* name = LightModelivUtf8) this.LightModeliv = (delegate* unmanaged<LightModelParameter, int*, void>)loader(name);
                fixed(byte* name = LineStippleUtf8) this.LineStipple = (delegate* unmanaged<int, ushort, void>)loader(name);
                fixed(byte* name = MaterialfUtf8) this.Materialf = (delegate* unmanaged<TriangleFace, MaterialParameter, float, void>)loader(name);
                fixed(byte* name = MaterialfvUtf8) this.Materialfv = (delegate* unmanaged<TriangleFace, MaterialParameter, float*, void>)loader(name);
                fixed(byte* name = MaterialiUtf8) this.Materiali = (delegate* unmanaged<TriangleFace, MaterialParameter, int, void>)loader(name);
                fixed(byte* name = MaterialivUtf8) this.Materialiv = (delegate* unmanaged<TriangleFace, MaterialParameter, int*, void>)loader(name);
                fixed(byte* name = PolygonStippleUtf8) this.PolygonStipple = (delegate* unmanaged<GLubyte*, void>)loader(name);
                fixed(byte* name = ShadeModelUtf8) this.ShadeModel = (delegate* unmanaged<ShadingModel, void>)loader(name);
                fixed(byte* name = TexEnvfUtf8) this.TexEnvf = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float, void>)loader(name);
                fixed(byte* name = TexEnvfvUtf8) this.TexEnvfv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void>)loader(name);
                fixed(byte* name = TexEnviUtf8) this.TexEnvi = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int, void>)loader(name);
                fixed(byte* name = TexEnvivUtf8) this.TexEnviv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void>)loader(name);
                fixed(byte* name = TexGendUtf8) this.TexGend = (delegate* unmanaged<TextureCoordName, TextureGenParameter, GLdouble, void>)loader(name);
                fixed(byte* name = TexGendvUtf8) this.TexGendv = (delegate* unmanaged<TextureCoordName, TextureGenParameter, GLdouble*, void>)loader(name);
                fixed(byte* name = TexGenfUtf8) this.TexGenf = (delegate* unmanaged<TextureCoordName, TextureGenParameter, float, void>)loader(name);
                fixed(byte* name = TexGenfvUtf8) this.TexGenfv = (delegate* unmanaged<TextureCoordName, TextureGenParameter, float*, void>)loader(name);
                fixed(byte* name = TexGeniUtf8) this.TexGeni = (delegate* unmanaged<TextureCoordName, TextureGenParameter, int, void>)loader(name);
                fixed(byte* name = TexGenivUtf8) this.TexGeniv = (delegate* unmanaged<TextureCoordName, TextureGenParameter, int*, void>)loader(name);
                fixed(byte* name = FeedbackBufferUtf8) this.FeedbackBuffer = (delegate* unmanaged<int, FeedbackType, float*, void>)loader(name);
                fixed(byte* name = SelectBufferUtf8) this.SelectBuffer = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = RenderModeUtf8) this.RenderMode = (delegate* unmanaged<RenderingMode, int>)loader(name);
                fixed(byte* name = InitNamesUtf8) this.InitNames = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = LoadNameUtf8) this.LoadName = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = PassThroughUtf8) this.PassThrough = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = PopNameUtf8) this.PopName = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = PushNameUtf8) this.PushName = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = ClearAccumUtf8) this.ClearAccum = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = ClearIndexUtf8) this.ClearIndex = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = IndexMaskUtf8) this.IndexMask = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = AccumUtf8) this.Accum = (delegate* unmanaged<AccumOp, float, void>)loader(name);
                fixed(byte* name = PopAttribUtf8) this.PopAttrib = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = PushAttribUtf8) this.PushAttrib = (delegate* unmanaged<AttribMask, void>)loader(name);
                fixed(byte* name = Map1dUtf8) this.Map1d = (delegate* unmanaged<MapTarget, GLdouble, GLdouble, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = Map1fUtf8) this.Map1f = (delegate* unmanaged<MapTarget, float, float, int, int, float*, void>)loader(name);
                fixed(byte* name = Map2dUtf8) this.Map2d = (delegate* unmanaged<MapTarget, GLdouble, GLdouble, int, int, GLdouble, GLdouble, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = Map2fUtf8) this.Map2f = (delegate* unmanaged<MapTarget, float, float, int, int, float, float, int, int, float*, void>)loader(name);
                fixed(byte* name = MapGrid1dUtf8) this.MapGrid1d = (delegate* unmanaged<int, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = MapGrid1fUtf8) this.MapGrid1f = (delegate* unmanaged<int, float, float, void>)loader(name);
                fixed(byte* name = MapGrid2dUtf8) this.MapGrid2d = (delegate* unmanaged<int, GLdouble, GLdouble, int, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = MapGrid2fUtf8) this.MapGrid2f = (delegate* unmanaged<int, float, float, int, float, float, void>)loader(name);
                fixed(byte* name = EvalCoord1dUtf8) this.EvalCoord1d = (delegate* unmanaged<GLdouble, void>)loader(name);
                fixed(byte* name = EvalCoord1dvUtf8) this.EvalCoord1dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = EvalCoord1fUtf8) this.EvalCoord1f = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = EvalCoord1fvUtf8) this.EvalCoord1fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = EvalCoord2dUtf8) this.EvalCoord2d = (delegate* unmanaged<GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = EvalCoord2dvUtf8) this.EvalCoord2dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = EvalCoord2fUtf8) this.EvalCoord2f = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = EvalCoord2fvUtf8) this.EvalCoord2fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = EvalMesh1Utf8) this.EvalMesh1 = (delegate* unmanaged<MeshMode1, int, int, void>)loader(name);
                fixed(byte* name = EvalPoint1Utf8) this.EvalPoint1 = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = EvalMesh2Utf8) this.EvalMesh2 = (delegate* unmanaged<MeshMode2, int, int, int, int, void>)loader(name);
                fixed(byte* name = EvalPoint2Utf8) this.EvalPoint2 = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = AlphaFuncUtf8) this.AlphaFunc = (delegate* unmanaged<AlphaFunction, float, void>)loader(name);
                fixed(byte* name = PixelZoomUtf8) this.PixelZoom = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = PixelTransferfUtf8) this.PixelTransferf = (delegate* unmanaged<PixelTransferParameter, float, void>)loader(name);
                fixed(byte* name = PixelTransferiUtf8) this.PixelTransferi = (delegate* unmanaged<PixelTransferParameter, int, void>)loader(name);
                fixed(byte* name = PixelMapfvUtf8) this.PixelMapfv = (delegate* unmanaged<PixelMap, int, float*, void>)loader(name);
                fixed(byte* name = PixelMapuivUtf8) this.PixelMapuiv = (delegate* unmanaged<PixelMap, int, uint*, void>)loader(name);
                fixed(byte* name = PixelMapusvUtf8) this.PixelMapusv = (delegate* unmanaged<PixelMap, int, ushort*, void>)loader(name);
                fixed(byte* name = CopyPixelsUtf8) this.CopyPixels = (delegate* unmanaged<int, int, int, int, PixelCopyType, void>)loader(name);
                fixed(byte* name = DrawPixelsUtf8) this.DrawPixels = (delegate* unmanaged<int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = GetClipPlaneUtf8) this.GetClipPlane = (delegate* unmanaged<ClipPlaneName, GLdouble*, void>)loader(name);
                fixed(byte* name = GetLightfvUtf8) this.GetLightfv = (delegate* unmanaged<LightName, LightParameter, float*, void>)loader(name);
                fixed(byte* name = GetLightivUtf8) this.GetLightiv = (delegate* unmanaged<LightName, LightParameter, int*, void>)loader(name);
                fixed(byte* name = GetMapdvUtf8) this.GetMapdv = (delegate* unmanaged<MapTarget, GetMapQuery, GLdouble*, void>)loader(name);
                fixed(byte* name = GetMapfvUtf8) this.GetMapfv = (delegate* unmanaged<MapTarget, GetMapQuery, float*, void>)loader(name);
                fixed(byte* name = GetMapivUtf8) this.GetMapiv = (delegate* unmanaged<MapTarget, GetMapQuery, int*, void>)loader(name);
                fixed(byte* name = GetMaterialfvUtf8) this.GetMaterialfv = (delegate* unmanaged<TriangleFace, MaterialParameter, float*, void>)loader(name);
                fixed(byte* name = GetMaterialivUtf8) this.GetMaterialiv = (delegate* unmanaged<TriangleFace, MaterialParameter, int*, void>)loader(name);
                fixed(byte* name = GetPixelMapfvUtf8) this.GetPixelMapfv = (delegate* unmanaged<PixelMap, float*, void>)loader(name);
                fixed(byte* name = GetPixelMapuivUtf8) this.GetPixelMapuiv = (delegate* unmanaged<PixelMap, uint*, void>)loader(name);
                fixed(byte* name = GetPixelMapusvUtf8) this.GetPixelMapusv = (delegate* unmanaged<PixelMap, ushort*, void>)loader(name);
                fixed(byte* name = GetPolygonStippleUtf8) this.GetPolygonStipple = (delegate* unmanaged<GLubyte*, void>)loader(name);
                fixed(byte* name = GetTexEnvfvUtf8) this.GetTexEnvfv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexEnvivUtf8) this.GetTexEnviv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexGendvUtf8) this.GetTexGendv = (delegate* unmanaged<TextureCoordName, TextureGenParameter, GLdouble*, void>)loader(name);
                fixed(byte* name = GetTexGenfvUtf8) this.GetTexGenfv = (delegate* unmanaged<TextureCoordName, TextureGenParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexGenivUtf8) this.GetTexGeniv = (delegate* unmanaged<TextureCoordName, TextureGenParameter, int*, void>)loader(name);
                fixed(byte* name = IsListUtf8) this.IsList = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = FrustumUtf8) this.Frustum = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = LoadIdentityUtf8) this.LoadIdentity = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = LoadMatrixfUtf8) this.LoadMatrixf = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = LoadMatrixdUtf8) this.LoadMatrixd = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = MatrixModeUtf8) this.MatrixMode = (delegate* unmanaged<MatrixMode, void>)loader(name);
                fixed(byte* name = MultMatrixfUtf8) this.MultMatrixf = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = MultMatrixdUtf8) this.MultMatrixd = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = OrthoUtf8) this.Ortho = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = PopMatrixUtf8) this.PopMatrix = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = PushMatrixUtf8) this.PushMatrix = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = RotatedUtf8) this.Rotated = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = RotatefUtf8) this.Rotatef = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = ScaledUtf8) this.Scaled = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = ScalefUtf8) this.Scalef = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = TranslatedUtf8) this.Translated = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = TranslatefUtf8) this.Translatef = (delegate* unmanaged<float, float, float, void>)loader(name);
            }

            if(!IsEmbedded && Version11)
            {
                fixed(byte* name = DrawArraysUtf8) this.DrawArrays = (delegate* unmanaged<PrimitiveType, int, int, void>)loader(name);
                fixed(byte* name = DrawElementsUtf8) this.DrawElements = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = GetPointervUtf8) this.GetPointerv = (delegate* unmanaged<GetPointervPName, void**, void>)loader(name);
                fixed(byte* name = PolygonOffsetUtf8) this.PolygonOffset = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = CopyTexImage1DUtf8) this.CopyTexImage1D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTexImage2DUtf8) this.CopyTexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTexSubImage1DUtf8) this.CopyTexSubImage1D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTexSubImage2DUtf8) this.CopyTexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = TexSubImage1DUtf8) this.TexSubImage1D = (delegate* unmanaged<TextureTarget, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TexSubImage2DUtf8) this.TexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = BindTextureUtf8) this.BindTexture = (delegate* unmanaged<TextureTarget, uint, void>)loader(name);
                fixed(byte* name = DeleteTexturesUtf8) this.DeleteTextures = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenTexturesUtf8) this.GenTextures = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsTextureUtf8) this.IsTexture = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = ArrayElementUtf8) this.ArrayElement = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = ColorPointerUtf8) this.ColorPointer = (delegate* unmanaged<int, ColorPointerType, int, void*, void>)loader(name);
                fixed(byte* name = DisableClientStateUtf8) this.DisableClientState = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = EdgeFlagPointerUtf8) this.EdgeFlagPointer = (delegate* unmanaged<int, void*, void>)loader(name);
                fixed(byte* name = EnableClientStateUtf8) this.EnableClientState = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = IndexPointerUtf8) this.IndexPointer = (delegate* unmanaged<IndexPointerType, int, void*, void>)loader(name);
                fixed(byte* name = InterleavedArraysUtf8) this.InterleavedArrays = (delegate* unmanaged<InterleavedArrayFormat, int, void*, void>)loader(name);
                fixed(byte* name = NormalPointerUtf8) this.NormalPointer = (delegate* unmanaged<NormalPointerType, int, void*, void>)loader(name);
                fixed(byte* name = TexCoordPointerUtf8) this.TexCoordPointer = (delegate* unmanaged<int, TexCoordPointerType, int, void*, void>)loader(name);
                fixed(byte* name = VertexPointerUtf8) this.VertexPointer = (delegate* unmanaged<int, VertexPointerType, int, void*, void>)loader(name);
                fixed(byte* name = AreTexturesResidentUtf8) this.AreTexturesResident = (delegate* unmanaged<int, uint*, byte*, byte>)loader(name);
                fixed(byte* name = PrioritizeTexturesUtf8) this.PrioritizeTextures = (delegate* unmanaged<int, uint*, float*, void>)loader(name);
                fixed(byte* name = IndexubUtf8) this.Indexub = (delegate* unmanaged<GLubyte, void>)loader(name);
                fixed(byte* name = IndexubvUtf8) this.Indexubv = (delegate* unmanaged<GLubyte*, void>)loader(name);
                fixed(byte* name = PopClientAttribUtf8) this.PopClientAttrib = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = PushClientAttribUtf8) this.PushClientAttrib = (delegate* unmanaged<ClientAttribMask, void>)loader(name);
            }

            if(!IsEmbedded && Version12)
            {
                fixed(byte* name = DrawRangeElementsUtf8) this.DrawRangeElements = (delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = TexImage3DUtf8) this.TexImage3D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TexSubImage3DUtf8) this.TexSubImage3D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = CopyTexSubImage3DUtf8) this.CopyTexSubImage3D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, int, void>)loader(name);
            }

            if(!IsEmbedded && Version13)
            {
                fixed(byte* name = ActiveTextureUtf8) this.ActiveTexture = (delegate* unmanaged<TextureUnit, void>)loader(name);
                fixed(byte* name = SampleCoverageUtf8) this.SampleCoverage = (delegate* unmanaged<float, byte, void>)loader(name);
                fixed(byte* name = CompressedTexImage3DUtf8) this.CompressedTexImage3D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexImage2DUtf8) this.CompressedTexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexImage1DUtf8) this.CompressedTexImage1D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexSubImage3DUtf8) this.CompressedTexSubImage3D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexSubImage2DUtf8) this.CompressedTexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexSubImage1DUtf8) this.CompressedTexSubImage1D = (delegate* unmanaged<TextureTarget, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = GetCompressedTexImageUtf8) this.GetCompressedTexImage = (delegate* unmanaged<TextureTarget, int, void*, void>)loader(name);
                fixed(byte* name = ClientActiveTextureUtf8) this.ClientActiveTexture = (delegate* unmanaged<TextureUnit, void>)loader(name);
                fixed(byte* name = MultiTexCoord1dUtf8) this.MultiTexCoord1d = (delegate* unmanaged<TextureUnit, GLdouble, void>)loader(name);
                fixed(byte* name = MultiTexCoord1dvUtf8) this.MultiTexCoord1dv = (delegate* unmanaged<TextureUnit, GLdouble*, void>)loader(name);
                fixed(byte* name = MultiTexCoord1fUtf8) this.MultiTexCoord1f = (delegate* unmanaged<TextureUnit, float, void>)loader(name);
                fixed(byte* name = MultiTexCoord1fvUtf8) this.MultiTexCoord1fv = (delegate* unmanaged<TextureUnit, float*, void>)loader(name);
                fixed(byte* name = MultiTexCoord1iUtf8) this.MultiTexCoord1i = (delegate* unmanaged<TextureUnit, int, void>)loader(name);
                fixed(byte* name = MultiTexCoord1ivUtf8) this.MultiTexCoord1iv = (delegate* unmanaged<TextureUnit, int*, void>)loader(name);
                fixed(byte* name = MultiTexCoord1sUtf8) this.MultiTexCoord1s = (delegate* unmanaged<TextureUnit, GLshort, void>)loader(name);
                fixed(byte* name = MultiTexCoord1svUtf8) this.MultiTexCoord1sv = (delegate* unmanaged<TextureUnit, GLshort*, void>)loader(name);
                fixed(byte* name = MultiTexCoord2dUtf8) this.MultiTexCoord2d = (delegate* unmanaged<TextureUnit, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = MultiTexCoord2dvUtf8) this.MultiTexCoord2dv = (delegate* unmanaged<TextureUnit, GLdouble*, void>)loader(name);
                fixed(byte* name = MultiTexCoord2fUtf8) this.MultiTexCoord2f = (delegate* unmanaged<TextureUnit, float, float, void>)loader(name);
                fixed(byte* name = MultiTexCoord2fvUtf8) this.MultiTexCoord2fv = (delegate* unmanaged<TextureUnit, float*, void>)loader(name);
                fixed(byte* name = MultiTexCoord2iUtf8) this.MultiTexCoord2i = (delegate* unmanaged<TextureUnit, int, int, void>)loader(name);
                fixed(byte* name = MultiTexCoord2ivUtf8) this.MultiTexCoord2iv = (delegate* unmanaged<TextureUnit, int*, void>)loader(name);
                fixed(byte* name = MultiTexCoord2sUtf8) this.MultiTexCoord2s = (delegate* unmanaged<TextureUnit, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = MultiTexCoord2svUtf8) this.MultiTexCoord2sv = (delegate* unmanaged<TextureUnit, GLshort*, void>)loader(name);
                fixed(byte* name = MultiTexCoord3dUtf8) this.MultiTexCoord3d = (delegate* unmanaged<TextureUnit, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = MultiTexCoord3dvUtf8) this.MultiTexCoord3dv = (delegate* unmanaged<TextureUnit, GLdouble*, void>)loader(name);
                fixed(byte* name = MultiTexCoord3fUtf8) this.MultiTexCoord3f = (delegate* unmanaged<TextureUnit, float, float, float, void>)loader(name);
                fixed(byte* name = MultiTexCoord3fvUtf8) this.MultiTexCoord3fv = (delegate* unmanaged<TextureUnit, float*, void>)loader(name);
                fixed(byte* name = MultiTexCoord3iUtf8) this.MultiTexCoord3i = (delegate* unmanaged<TextureUnit, int, int, int, void>)loader(name);
                fixed(byte* name = MultiTexCoord3ivUtf8) this.MultiTexCoord3iv = (delegate* unmanaged<TextureUnit, int*, void>)loader(name);
                fixed(byte* name = MultiTexCoord3sUtf8) this.MultiTexCoord3s = (delegate* unmanaged<TextureUnit, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = MultiTexCoord3svUtf8) this.MultiTexCoord3sv = (delegate* unmanaged<TextureUnit, GLshort*, void>)loader(name);
                fixed(byte* name = MultiTexCoord4dUtf8) this.MultiTexCoord4d = (delegate* unmanaged<TextureUnit, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = MultiTexCoord4dvUtf8) this.MultiTexCoord4dv = (delegate* unmanaged<TextureUnit, GLdouble*, void>)loader(name);
                fixed(byte* name = MultiTexCoord4fUtf8) this.MultiTexCoord4f = (delegate* unmanaged<TextureUnit, float, float, float, float, void>)loader(name);
                fixed(byte* name = MultiTexCoord4fvUtf8) this.MultiTexCoord4fv = (delegate* unmanaged<TextureUnit, float*, void>)loader(name);
                fixed(byte* name = MultiTexCoord4iUtf8) this.MultiTexCoord4i = (delegate* unmanaged<TextureUnit, int, int, int, int, void>)loader(name);
                fixed(byte* name = MultiTexCoord4ivUtf8) this.MultiTexCoord4iv = (delegate* unmanaged<TextureUnit, int*, void>)loader(name);
                fixed(byte* name = MultiTexCoord4sUtf8) this.MultiTexCoord4s = (delegate* unmanaged<TextureUnit, GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = MultiTexCoord4svUtf8) this.MultiTexCoord4sv = (delegate* unmanaged<TextureUnit, GLshort*, void>)loader(name);
                fixed(byte* name = LoadTransposeMatrixfUtf8) this.LoadTransposeMatrixf = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = LoadTransposeMatrixdUtf8) this.LoadTransposeMatrixd = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = MultTransposeMatrixfUtf8) this.MultTransposeMatrixf = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = MultTransposeMatrixdUtf8) this.MultTransposeMatrixd = (delegate* unmanaged<GLdouble*, void>)loader(name);
            }

            if(!IsEmbedded && Version14)
            {
                fixed(byte* name = BlendFuncSeparateUtf8) this.BlendFuncSeparate = (delegate* unmanaged<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = MultiDrawArraysUtf8) this.MultiDrawArrays = (delegate* unmanaged<PrimitiveType, int*, int*, int, void>)loader(name);
                fixed(byte* name = MultiDrawElementsUtf8) this.MultiDrawElements = (delegate* unmanaged<PrimitiveType, int*, DrawElementsType, void**, int, void>)loader(name);
                fixed(byte* name = PointParameterfUtf8) this.PointParameterf = (delegate* unmanaged<PointParameterNameARB, float, void>)loader(name);
                fixed(byte* name = PointParameterfvUtf8) this.PointParameterfv = (delegate* unmanaged<PointParameterNameARB, float*, void>)loader(name);
                fixed(byte* name = PointParameteriUtf8) this.PointParameteri = (delegate* unmanaged<PointParameterNameARB, int, void>)loader(name);
                fixed(byte* name = PointParameterivUtf8) this.PointParameteriv = (delegate* unmanaged<PointParameterNameARB, int*, void>)loader(name);
                fixed(byte* name = FogCoordfUtf8) this.FogCoordf = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = FogCoordfvUtf8) this.FogCoordfv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = FogCoorddUtf8) this.FogCoordd = (delegate* unmanaged<GLdouble, void>)loader(name);
                fixed(byte* name = FogCoorddvUtf8) this.FogCoorddv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = FogCoordPointerUtf8) this.FogCoordPointer = (delegate* unmanaged<FogPointerTypeEXT, int, void*, void>)loader(name);
                fixed(byte* name = SecondaryColor3bUtf8) this.SecondaryColor3b = (delegate* unmanaged<GLbyte, GLbyte, GLbyte, void>)loader(name);
                fixed(byte* name = SecondaryColor3bvUtf8) this.SecondaryColor3bv = (delegate* unmanaged<GLbyte*, void>)loader(name);
                fixed(byte* name = SecondaryColor3dUtf8) this.SecondaryColor3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = SecondaryColor3dvUtf8) this.SecondaryColor3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = SecondaryColor3fUtf8) this.SecondaryColor3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = SecondaryColor3fvUtf8) this.SecondaryColor3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = SecondaryColor3iUtf8) this.SecondaryColor3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = SecondaryColor3ivUtf8) this.SecondaryColor3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = SecondaryColor3sUtf8) this.SecondaryColor3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = SecondaryColor3svUtf8) this.SecondaryColor3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = SecondaryColor3ubUtf8) this.SecondaryColor3ub = (delegate* unmanaged<GLubyte, GLubyte, GLubyte, void>)loader(name);
                fixed(byte* name = SecondaryColor3ubvUtf8) this.SecondaryColor3ubv = (delegate* unmanaged<GLubyte*, void>)loader(name);
                fixed(byte* name = SecondaryColor3uiUtf8) this.SecondaryColor3ui = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = SecondaryColor3uivUtf8) this.SecondaryColor3uiv = (delegate* unmanaged<uint*, void>)loader(name);
                fixed(byte* name = SecondaryColor3usUtf8) this.SecondaryColor3us = (delegate* unmanaged<ushort, ushort, ushort, void>)loader(name);
                fixed(byte* name = SecondaryColor3usvUtf8) this.SecondaryColor3usv = (delegate* unmanaged<ushort*, void>)loader(name);
                fixed(byte* name = SecondaryColorPointerUtf8) this.SecondaryColorPointer = (delegate* unmanaged<int, ColorPointerType, int, void*, void>)loader(name);
                fixed(byte* name = WindowPos2dUtf8) this.WindowPos2d = (delegate* unmanaged<GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = WindowPos2dvUtf8) this.WindowPos2dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = WindowPos2fUtf8) this.WindowPos2f = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = WindowPos2fvUtf8) this.WindowPos2fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = WindowPos2iUtf8) this.WindowPos2i = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = WindowPos2ivUtf8) this.WindowPos2iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = WindowPos2sUtf8) this.WindowPos2s = (delegate* unmanaged<GLshort, GLshort, void>)loader(name);
                fixed(byte* name = WindowPos2svUtf8) this.WindowPos2sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = WindowPos3dUtf8) this.WindowPos3d = (delegate* unmanaged<GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = WindowPos3dvUtf8) this.WindowPos3dv = (delegate* unmanaged<GLdouble*, void>)loader(name);
                fixed(byte* name = WindowPos3fUtf8) this.WindowPos3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = WindowPos3fvUtf8) this.WindowPos3fv = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = WindowPos3iUtf8) this.WindowPos3i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = WindowPos3ivUtf8) this.WindowPos3iv = (delegate* unmanaged<int*, void>)loader(name);
                fixed(byte* name = WindowPos3sUtf8) this.WindowPos3s = (delegate* unmanaged<GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = WindowPos3svUtf8) this.WindowPos3sv = (delegate* unmanaged<GLshort*, void>)loader(name);
                fixed(byte* name = BlendColorUtf8) this.BlendColor = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = BlendEquationUtf8) this.BlendEquation = (delegate* unmanaged<BlendEquationModeEXT, void>)loader(name);
            }

            if(!IsEmbedded && Version15)
            {
                fixed(byte* name = GenQueriesUtf8) this.GenQueries = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteQueriesUtf8) this.DeleteQueries = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsQueryUtf8) this.IsQuery = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BeginQueryUtf8) this.BeginQuery = (delegate* unmanaged<QueryTarget, uint, void>)loader(name);
                fixed(byte* name = EndQueryUtf8) this.EndQuery = (delegate* unmanaged<QueryTarget, void>)loader(name);
                fixed(byte* name = GetQueryivUtf8) this.GetQueryiv = (delegate* unmanaged<QueryTarget, QueryParameterName, int*, void>)loader(name);
                fixed(byte* name = GetQueryObjectivUtf8) this.GetQueryObjectiv = (delegate* unmanaged<uint, QueryObjectParameterName, int*, void>)loader(name);
                fixed(byte* name = GetQueryObjectuivUtf8) this.GetQueryObjectuiv = (delegate* unmanaged<uint, QueryObjectParameterName, uint*, void>)loader(name);
                fixed(byte* name = BindBufferUtf8) this.BindBuffer = (delegate* unmanaged<BufferTargetARB, uint, void>)loader(name);
                fixed(byte* name = DeleteBuffersUtf8) this.DeleteBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenBuffersUtf8) this.GenBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsBufferUtf8) this.IsBuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BufferDataUtf8) this.BufferData = (delegate* unmanaged<BufferTargetARB, GLsizeiptr, void*, BufferUsageARB, void>)loader(name);
                fixed(byte* name = BufferSubDataUtf8) this.BufferSubData = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void>)loader(name);
                fixed(byte* name = GetBufferSubDataUtf8) this.GetBufferSubData = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void>)loader(name);
                fixed(byte* name = MapBufferUtf8) this.MapBuffer = (delegate* unmanaged<BufferTargetARB, BufferAccessARB, void*>)loader(name);
                fixed(byte* name = UnmapBufferUtf8) this.UnmapBuffer = (delegate* unmanaged<BufferTargetARB, byte>)loader(name);
                fixed(byte* name = GetBufferParameterivUtf8) this.GetBufferParameteriv = (delegate* unmanaged<BufferTargetARB, BufferPNameARB, int*, void>)loader(name);
                fixed(byte* name = GetBufferPointervUtf8) this.GetBufferPointerv = (delegate* unmanaged<BufferTargetARB, BufferPointerNameARB, void**, void>)loader(name);
            }

            if(!IsEmbedded && Version20)
            {
                fixed(byte* name = BlendEquationSeparateUtf8) this.BlendEquationSeparate = (delegate* unmanaged<BlendEquationModeEXT, BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = DrawBuffersUtf8) this.DrawBuffers = (delegate* unmanaged<int, DrawBufferMode*, void>)loader(name);
                fixed(byte* name = StencilOpSeparateUtf8) this.StencilOpSeparate = (delegate* unmanaged<TriangleFace, StencilOp, StencilOp, StencilOp, void>)loader(name);
                fixed(byte* name = StencilFuncSeparateUtf8) this.StencilFuncSeparate = (delegate* unmanaged<TriangleFace, StencilFunction, int, uint, void>)loader(name);
                fixed(byte* name = StencilMaskSeparateUtf8) this.StencilMaskSeparate = (delegate* unmanaged<TriangleFace, uint, void>)loader(name);
                fixed(byte* name = AttachShaderUtf8) this.AttachShader = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = BindAttribLocationUtf8) this.BindAttribLocation = (delegate* unmanaged<uint, uint, GLchar*, void>)loader(name);
                fixed(byte* name = CompileShaderUtf8) this.CompileShader = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = CreateProgramUtf8) this.CreateProgram = (delegate* unmanaged<uint>)loader(name);
                fixed(byte* name = CreateShaderUtf8) this.CreateShader = (delegate* unmanaged<ShaderType, uint>)loader(name);
                fixed(byte* name = DeleteProgramUtf8) this.DeleteProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteShaderUtf8) this.DeleteShader = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DetachShaderUtf8) this.DetachShader = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = DisableVertexAttribArrayUtf8) this.DisableVertexAttribArray = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = EnableVertexAttribArrayUtf8) this.EnableVertexAttribArray = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = GetActiveAttribUtf8) this.GetActiveAttrib = (delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void>)loader(name);
                fixed(byte* name = GetActiveUniformUtf8) this.GetActiveUniform = (delegate* unmanaged<uint, uint, int, int*, int*, UniformType*, GLchar*, void>)loader(name);
                fixed(byte* name = GetAttachedShadersUtf8) this.GetAttachedShaders = (delegate* unmanaged<uint, int, int*, uint*, void>)loader(name);
                fixed(byte* name = GetAttribLocationUtf8) this.GetAttribLocation = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = GetProgramivUtf8) this.GetProgramiv = (delegate* unmanaged<uint, ProgramPropertyARB, int*, void>)loader(name);
                fixed(byte* name = GetProgramInfoLogUtf8) this.GetProgramInfoLog = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetShaderivUtf8) this.GetShaderiv = (delegate* unmanaged<uint, ShaderParameterName, int*, void>)loader(name);
                fixed(byte* name = GetShaderInfoLogUtf8) this.GetShaderInfoLog = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetShaderSourceUtf8) this.GetShaderSource = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetUniformLocationUtf8) this.GetUniformLocation = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = GetUniformfvUtf8) this.GetUniformfv = (delegate* unmanaged<uint, int, float*, void>)loader(name);
                fixed(byte* name = GetUniformivUtf8) this.GetUniformiv = (delegate* unmanaged<uint, int, int*, void>)loader(name);
                fixed(byte* name = GetVertexAttribdvUtf8) this.GetVertexAttribdv = (delegate* unmanaged<uint, VertexAttribPropertyARB, GLdouble*, void>)loader(name);
                fixed(byte* name = GetVertexAttribfvUtf8) this.GetVertexAttribfv = (delegate* unmanaged<uint, VertexAttribPropertyARB, float*, void>)loader(name);
                fixed(byte* name = GetVertexAttribivUtf8) this.GetVertexAttribiv = (delegate* unmanaged<uint, VertexAttribPropertyARB, int*, void>)loader(name);
                fixed(byte* name = GetVertexAttribPointervUtf8) this.GetVertexAttribPointerv = (delegate* unmanaged<uint, VertexAttribPointerPropertyARB, void**, void>)loader(name);
                fixed(byte* name = IsProgramUtf8) this.IsProgram = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsShaderUtf8) this.IsShader = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = LinkProgramUtf8) this.LinkProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = ShaderSourceUtf8) this.ShaderSource = (delegate* unmanaged<uint, int, GLchar**, int*, void>)loader(name);
                fixed(byte* name = UseProgramUtf8) this.UseProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = Uniform1fUtf8) this.Uniform1f = (delegate* unmanaged<int, float, void>)loader(name);
                fixed(byte* name = Uniform2fUtf8) this.Uniform2f = (delegate* unmanaged<int, float, float, void>)loader(name);
                fixed(byte* name = Uniform3fUtf8) this.Uniform3f = (delegate* unmanaged<int, float, float, float, void>)loader(name);
                fixed(byte* name = Uniform4fUtf8) this.Uniform4f = (delegate* unmanaged<int, float, float, float, float, void>)loader(name);
                fixed(byte* name = Uniform1iUtf8) this.Uniform1i = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = Uniform2iUtf8) this.Uniform2i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = Uniform3iUtf8) this.Uniform3i = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = Uniform4iUtf8) this.Uniform4i = (delegate* unmanaged<int, int, int, int, int, void>)loader(name);
                fixed(byte* name = Uniform1fvUtf8) this.Uniform1fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform2fvUtf8) this.Uniform2fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform3fvUtf8) this.Uniform3fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform4fvUtf8) this.Uniform4fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform1ivUtf8) this.Uniform1iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = Uniform2ivUtf8) this.Uniform2iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = Uniform3ivUtf8) this.Uniform3iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = Uniform4ivUtf8) this.Uniform4iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = UniformMatrix2fvUtf8) this.UniformMatrix2fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix3fvUtf8) this.UniformMatrix3fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix4fvUtf8) this.UniformMatrix4fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ValidateProgramUtf8) this.ValidateProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = VertexAttrib1dUtf8) this.VertexAttrib1d = (delegate* unmanaged<uint, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttrib1dvUtf8) this.VertexAttrib1dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttrib1fUtf8) this.VertexAttrib1f = (delegate* unmanaged<uint, float, void>)loader(name);
                fixed(byte* name = VertexAttrib1fvUtf8) this.VertexAttrib1fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib1sUtf8) this.VertexAttrib1s = (delegate* unmanaged<uint, GLshort, void>)loader(name);
                fixed(byte* name = VertexAttrib1svUtf8) this.VertexAttrib1sv = (delegate* unmanaged<uint, GLshort*, void>)loader(name);
                fixed(byte* name = VertexAttrib2dUtf8) this.VertexAttrib2d = (delegate* unmanaged<uint, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttrib2dvUtf8) this.VertexAttrib2dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttrib2fUtf8) this.VertexAttrib2f = (delegate* unmanaged<uint, float, float, void>)loader(name);
                fixed(byte* name = VertexAttrib2fvUtf8) this.VertexAttrib2fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib2sUtf8) this.VertexAttrib2s = (delegate* unmanaged<uint, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = VertexAttrib2svUtf8) this.VertexAttrib2sv = (delegate* unmanaged<uint, GLshort*, void>)loader(name);
                fixed(byte* name = VertexAttrib3dUtf8) this.VertexAttrib3d = (delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttrib3dvUtf8) this.VertexAttrib3dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttrib3fUtf8) this.VertexAttrib3f = (delegate* unmanaged<uint, float, float, float, void>)loader(name);
                fixed(byte* name = VertexAttrib3fvUtf8) this.VertexAttrib3fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib3sUtf8) this.VertexAttrib3s = (delegate* unmanaged<uint, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = VertexAttrib3svUtf8) this.VertexAttrib3sv = (delegate* unmanaged<uint, GLshort*, void>)loader(name);
                fixed(byte* name = VertexAttrib4NbvUtf8) this.VertexAttrib4Nbv = (delegate* unmanaged<uint, GLbyte*, void>)loader(name);
                fixed(byte* name = VertexAttrib4NivUtf8) this.VertexAttrib4Niv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttrib4NsvUtf8) this.VertexAttrib4Nsv = (delegate* unmanaged<uint, GLshort*, void>)loader(name);
                fixed(byte* name = VertexAttrib4NubUtf8) this.VertexAttrib4Nub = (delegate* unmanaged<uint, GLubyte, GLubyte, GLubyte, GLubyte, void>)loader(name);
                fixed(byte* name = VertexAttrib4NubvUtf8) this.VertexAttrib4Nubv = (delegate* unmanaged<uint, GLubyte*, void>)loader(name);
                fixed(byte* name = VertexAttrib4NuivUtf8) this.VertexAttrib4Nuiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = VertexAttrib4NusvUtf8) this.VertexAttrib4Nusv = (delegate* unmanaged<uint, ushort*, void>)loader(name);
                fixed(byte* name = VertexAttrib4bvUtf8) this.VertexAttrib4bv = (delegate* unmanaged<uint, GLbyte*, void>)loader(name);
                fixed(byte* name = VertexAttrib4dUtf8) this.VertexAttrib4d = (delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttrib4dvUtf8) this.VertexAttrib4dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttrib4fUtf8) this.VertexAttrib4f = (delegate* unmanaged<uint, float, float, float, float, void>)loader(name);
                fixed(byte* name = VertexAttrib4fvUtf8) this.VertexAttrib4fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib4ivUtf8) this.VertexAttrib4iv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttrib4sUtf8) this.VertexAttrib4s = (delegate* unmanaged<uint, GLshort, GLshort, GLshort, GLshort, void>)loader(name);
                fixed(byte* name = VertexAttrib4svUtf8) this.VertexAttrib4sv = (delegate* unmanaged<uint, GLshort*, void>)loader(name);
                fixed(byte* name = VertexAttrib4ubvUtf8) this.VertexAttrib4ubv = (delegate* unmanaged<uint, GLubyte*, void>)loader(name);
                fixed(byte* name = VertexAttrib4uivUtf8) this.VertexAttrib4uiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = VertexAttrib4usvUtf8) this.VertexAttrib4usv = (delegate* unmanaged<uint, ushort*, void>)loader(name);
                fixed(byte* name = VertexAttribPointerUtf8) this.VertexAttribPointer = (delegate* unmanaged<uint, int, VertexAttribPointerType, byte, int, void*, void>)loader(name);
            }

            if(!IsEmbedded && Version21)
            {
                fixed(byte* name = UniformMatrix2x3fvUtf8) this.UniformMatrix2x3fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix3x2fvUtf8) this.UniformMatrix3x2fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix2x4fvUtf8) this.UniformMatrix2x4fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix4x2fvUtf8) this.UniformMatrix4x2fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix3x4fvUtf8) this.UniformMatrix3x4fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix4x3fvUtf8) this.UniformMatrix4x3fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
            }

            if(!IsEmbedded && Version30)
            {
                fixed(byte* name = ColorMaskiUtf8) this.ColorMaski = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)loader(name);
                fixed(byte* name = GetBooleani_vUtf8) this.GetBooleani_v = (delegate* unmanaged<BufferTargetARB, uint, byte*, void>)loader(name);
                fixed(byte* name = GetIntegeri_vUtf8) this.GetIntegeri_v = (delegate* unmanaged<GetPName, uint, int*, void>)loader(name);
                fixed(byte* name = EnableiUtf8) this.Enablei = (delegate* unmanaged<EnableCap, uint, void>)loader(name);
                fixed(byte* name = DisableiUtf8) this.Disablei = (delegate* unmanaged<EnableCap, uint, void>)loader(name);
                fixed(byte* name = IsEnablediUtf8) this.IsEnabledi = (delegate* unmanaged<EnableCap, uint, byte>)loader(name);
                fixed(byte* name = BeginTransformFeedbackUtf8) this.BeginTransformFeedback = (delegate* unmanaged<PrimitiveType, void>)loader(name);
                fixed(byte* name = EndTransformFeedbackUtf8) this.EndTransformFeedback = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = BindBufferRangeUtf8) this.BindBufferRange = (delegate* unmanaged<BufferTargetARB, uint, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = BindBufferBaseUtf8) this.BindBufferBase = (delegate* unmanaged<BufferTargetARB, uint, uint, void>)loader(name);
                fixed(byte* name = TransformFeedbackVaryingsUtf8) this.TransformFeedbackVaryings = (delegate* unmanaged<uint, int, GLchar**, TransformFeedbackBufferMode, void>)loader(name);
                fixed(byte* name = GetTransformFeedbackVaryingUtf8) this.GetTransformFeedbackVarying = (delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void>)loader(name);
                fixed(byte* name = ClampColorUtf8) this.ClampColor = (delegate* unmanaged<ClampColorTargetARB, ClampColorModeARB, void>)loader(name);
                fixed(byte* name = BeginConditionalRenderUtf8) this.BeginConditionalRender = (delegate* unmanaged<uint, ConditionalRenderMode, void>)loader(name);
                fixed(byte* name = EndConditionalRenderUtf8) this.EndConditionalRender = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = VertexAttribIPointerUtf8) this.VertexAttribIPointer = (delegate* unmanaged<uint, int, VertexAttribIType, int, void*, void>)loader(name);
                fixed(byte* name = GetVertexAttribIivUtf8) this.GetVertexAttribIiv = (delegate* unmanaged<uint, VertexAttribEnum, int*, void>)loader(name);
                fixed(byte* name = GetVertexAttribIuivUtf8) this.GetVertexAttribIuiv = (delegate* unmanaged<uint, VertexAttribEnum, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribI1iUtf8) this.VertexAttribI1i = (delegate* unmanaged<uint, int, void>)loader(name);
                fixed(byte* name = VertexAttribI2iUtf8) this.VertexAttribI2i = (delegate* unmanaged<uint, int, int, void>)loader(name);
                fixed(byte* name = VertexAttribI3iUtf8) this.VertexAttribI3i = (delegate* unmanaged<uint, int, int, int, void>)loader(name);
                fixed(byte* name = VertexAttribI4iUtf8) this.VertexAttribI4i = (delegate* unmanaged<uint, int, int, int, int, void>)loader(name);
                fixed(byte* name = VertexAttribI1uiUtf8) this.VertexAttribI1ui = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = VertexAttribI2uiUtf8) this.VertexAttribI2ui = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = VertexAttribI3uiUtf8) this.VertexAttribI3ui = (delegate* unmanaged<uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = VertexAttribI4uiUtf8) this.VertexAttribI4ui = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = VertexAttribI1ivUtf8) this.VertexAttribI1iv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttribI2ivUtf8) this.VertexAttribI2iv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttribI3ivUtf8) this.VertexAttribI3iv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttribI4ivUtf8) this.VertexAttribI4iv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttribI1uivUtf8) this.VertexAttribI1uiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribI2uivUtf8) this.VertexAttribI2uiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribI3uivUtf8) this.VertexAttribI3uiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribI4uivUtf8) this.VertexAttribI4uiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribI4bvUtf8) this.VertexAttribI4bv = (delegate* unmanaged<uint, GLbyte*, void>)loader(name);
                fixed(byte* name = VertexAttribI4svUtf8) this.VertexAttribI4sv = (delegate* unmanaged<uint, GLshort*, void>)loader(name);
                fixed(byte* name = VertexAttribI4ubvUtf8) this.VertexAttribI4ubv = (delegate* unmanaged<uint, GLubyte*, void>)loader(name);
                fixed(byte* name = VertexAttribI4usvUtf8) this.VertexAttribI4usv = (delegate* unmanaged<uint, ushort*, void>)loader(name);
                fixed(byte* name = GetUniformuivUtf8) this.GetUniformuiv = (delegate* unmanaged<uint, int, uint*, void>)loader(name);
                fixed(byte* name = BindFragDataLocationUtf8) this.BindFragDataLocation = (delegate* unmanaged<uint, uint, GLchar*, void>)loader(name);
                fixed(byte* name = GetFragDataLocationUtf8) this.GetFragDataLocation = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = Uniform1uiUtf8) this.Uniform1ui = (delegate* unmanaged<int, uint, void>)loader(name);
                fixed(byte* name = Uniform2uiUtf8) this.Uniform2ui = (delegate* unmanaged<int, uint, uint, void>)loader(name);
                fixed(byte* name = Uniform3uiUtf8) this.Uniform3ui = (delegate* unmanaged<int, uint, uint, uint, void>)loader(name);
                fixed(byte* name = Uniform4uiUtf8) this.Uniform4ui = (delegate* unmanaged<int, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = Uniform1uivUtf8) this.Uniform1uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = Uniform2uivUtf8) this.Uniform2uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = Uniform3uivUtf8) this.Uniform3uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = Uniform4uivUtf8) this.Uniform4uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = TexParameterIivUtf8) this.TexParameterIiv = (delegate* unmanaged<TextureTarget, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = TexParameterIuivUtf8) this.TexParameterIuiv = (delegate* unmanaged<TextureTarget, TextureParameterName, uint*, void>)loader(name);
                fixed(byte* name = GetTexParameterIivUtf8) this.GetTexParameterIiv = (delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexParameterIuivUtf8) this.GetTexParameterIuiv = (delegate* unmanaged<TextureTarget, GetTextureParameter, uint*, void>)loader(name);
                fixed(byte* name = ClearBufferivUtf8) this.ClearBufferiv = (delegate* unmanaged<Buffer, int, int*, void>)loader(name);
                fixed(byte* name = ClearBufferuivUtf8) this.ClearBufferuiv = (delegate* unmanaged<Buffer, int, uint*, void>)loader(name);
                fixed(byte* name = ClearBufferfvUtf8) this.ClearBufferfv = (delegate* unmanaged<Buffer, int, float*, void>)loader(name);
                fixed(byte* name = ClearBufferfiUtf8) this.ClearBufferfi = (delegate* unmanaged<Buffer, int, float, int, void>)loader(name);
                fixed(byte* name = GetStringiUtf8) this.GetStringi = (delegate* unmanaged<StringName, uint, GLubyte*>)loader(name);
                fixed(byte* name = IsRenderbufferUtf8) this.IsRenderbuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BindRenderbufferUtf8) this.BindRenderbuffer = (delegate* unmanaged<RenderbufferTarget, uint, void>)loader(name);
                fixed(byte* name = DeleteRenderbuffersUtf8) this.DeleteRenderbuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenRenderbuffersUtf8) this.GenRenderbuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = RenderbufferStorageUtf8) this.RenderbufferStorage = (delegate* unmanaged<RenderbufferTarget, InternalFormat, int, int, void>)loader(name);
                fixed(byte* name = GetRenderbufferParameterivUtf8) this.GetRenderbufferParameteriv = (delegate* unmanaged<RenderbufferTarget, RenderbufferParameterName, int*, void>)loader(name);
                fixed(byte* name = IsFramebufferUtf8) this.IsFramebuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BindFramebufferUtf8) this.BindFramebuffer = (delegate* unmanaged<FramebufferTarget, uint, void>)loader(name);
                fixed(byte* name = DeleteFramebuffersUtf8) this.DeleteFramebuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenFramebuffersUtf8) this.GenFramebuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = CheckFramebufferStatusUtf8) this.CheckFramebufferStatus = (delegate* unmanaged<FramebufferTarget, FramebufferStatus>)loader(name);
                fixed(byte* name = FramebufferTexture1DUtf8) this.FramebufferTexture1D = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void>)loader(name);
                fixed(byte* name = FramebufferTexture2DUtf8) this.FramebufferTexture2D = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void>)loader(name);
                fixed(byte* name = FramebufferTexture3DUtf8) this.FramebufferTexture3D = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void>)loader(name);
                fixed(byte* name = FramebufferRenderbufferUtf8) this.FramebufferRenderbuffer = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void>)loader(name);
                fixed(byte* name = GetFramebufferAttachmentParameterivUtf8) this.GetFramebufferAttachmentParameteriv = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*, void>)loader(name);
                fixed(byte* name = GenerateMipmapUtf8) this.GenerateMipmap = (delegate* unmanaged<TextureTarget, void>)loader(name);
                fixed(byte* name = BlitFramebufferUtf8) this.BlitFramebuffer = (delegate* unmanaged<int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void>)loader(name);
                fixed(byte* name = RenderbufferStorageMultisampleUtf8) this.RenderbufferStorageMultisample = (delegate* unmanaged<RenderbufferTarget, int, InternalFormat, int, int, void>)loader(name);
                fixed(byte* name = FramebufferTextureLayerUtf8) this.FramebufferTextureLayer = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, int, void>)loader(name);
                fixed(byte* name = MapBufferRangeUtf8) this.MapBufferRange = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, MapBufferAccessMask, void*>)loader(name);
                fixed(byte* name = FlushMappedBufferRangeUtf8) this.FlushMappedBufferRange = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = BindVertexArrayUtf8) this.BindVertexArray = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteVertexArraysUtf8) this.DeleteVertexArrays = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenVertexArraysUtf8) this.GenVertexArrays = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsVertexArrayUtf8) this.IsVertexArray = (delegate* unmanaged<uint, byte>)loader(name);
            }

            if(!IsEmbedded && Version31)
            {
                fixed(byte* name = DrawArraysInstancedUtf8) this.DrawArraysInstanced = (delegate* unmanaged<PrimitiveType, int, int, int, void>)loader(name);
                fixed(byte* name = DrawElementsInstancedUtf8) this.DrawElementsInstanced = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void>)loader(name);
                fixed(byte* name = TexBufferUtf8) this.TexBuffer = (delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, void>)loader(name);
                fixed(byte* name = PrimitiveRestartIndexUtf8) this.PrimitiveRestartIndex = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = CopyBufferSubDataUtf8) this.CopyBufferSubData = (delegate* unmanaged<CopyBufferSubDataTarget, CopyBufferSubDataTarget, GLintptr, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = GetUniformIndicesUtf8) this.GetUniformIndices = (delegate* unmanaged<uint, int, GLchar**, uint*, void>)loader(name);
                fixed(byte* name = GetActiveUniformsivUtf8) this.GetActiveUniformsiv = (delegate* unmanaged<uint, int, uint*, UniformPName, int*, void>)loader(name);
                fixed(byte* name = GetActiveUniformNameUtf8) this.GetActiveUniformName = (delegate* unmanaged<uint, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetUniformBlockIndexUtf8) this.GetUniformBlockIndex = (delegate* unmanaged<uint, GLchar*, uint>)loader(name);
                fixed(byte* name = GetActiveUniformBlockivUtf8) this.GetActiveUniformBlockiv = (delegate* unmanaged<uint, uint, UniformBlockPName, int*, void>)loader(name);
                fixed(byte* name = GetActiveUniformBlockNameUtf8) this.GetActiveUniformBlockName = (delegate* unmanaged<uint, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = UniformBlockBindingUtf8) this.UniformBlockBinding = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = BindBufferRangeUtf8) this.BindBufferRange = (delegate* unmanaged<BufferTargetARB, uint, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = BindBufferBaseUtf8) this.BindBufferBase = (delegate* unmanaged<BufferTargetARB, uint, uint, void>)loader(name);
                fixed(byte* name = GetIntegeri_vUtf8) this.GetIntegeri_v = (delegate* unmanaged<GetPName, uint, int*, void>)loader(name);
            }

            if(!IsEmbedded && Version32)
            {
                fixed(byte* name = DrawElementsBaseVertexUtf8) this.DrawElementsBaseVertex = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void>)loader(name);
                fixed(byte* name = DrawRangeElementsBaseVertexUtf8) this.DrawRangeElementsBaseVertex = (delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, int, void>)loader(name);
                fixed(byte* name = DrawElementsInstancedBaseVertexUtf8) this.DrawElementsInstancedBaseVertex = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, int, void>)loader(name);
                fixed(byte* name = MultiDrawElementsBaseVertexUtf8) this.MultiDrawElementsBaseVertex = (delegate* unmanaged<PrimitiveType, int*, DrawElementsType, void**, int, int*, void>)loader(name);
                fixed(byte* name = ProvokingVertexUtf8) this.ProvokingVertex = (delegate* unmanaged<VertexProvokingMode, void>)loader(name);
                fixed(byte* name = FenceSyncUtf8) this.FenceSync = (delegate* unmanaged<SyncCondition, SyncBehaviorFlags, GLsync>)loader(name);
                fixed(byte* name = IsSyncUtf8) this.IsSync = (delegate* unmanaged<GLsync, byte>)loader(name);
                fixed(byte* name = DeleteSyncUtf8) this.DeleteSync = (delegate* unmanaged<GLsync, void>)loader(name);
                fixed(byte* name = ClientWaitSyncUtf8) this.ClientWaitSync = (delegate* unmanaged<GLsync, SyncObjectMask, GLuint64, SyncStatus>)loader(name);
                fixed(byte* name = WaitSyncUtf8) this.WaitSync = (delegate* unmanaged<GLsync, SyncBehaviorFlags, GLuint64, void>)loader(name);
                fixed(byte* name = GetInteger64vUtf8) this.GetInteger64v = (delegate* unmanaged<GetPName, GLint64*, void>)loader(name);
                fixed(byte* name = GetSyncivUtf8) this.GetSynciv = (delegate* unmanaged<GLsync, SyncParameterName, int, int*, int*, void>)loader(name);
                fixed(byte* name = GetInteger64i_vUtf8) this.GetInteger64i_v = (delegate* unmanaged<GetPName, uint, GLint64*, void>)loader(name);
                fixed(byte* name = GetBufferParameteri64vUtf8) this.GetBufferParameteri64v = (delegate* unmanaged<BufferTargetARB, BufferPNameARB, GLint64*, void>)loader(name);
                fixed(byte* name = FramebufferTextureUtf8) this.FramebufferTexture = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, void>)loader(name);
                fixed(byte* name = TexImage2DMultisampleUtf8) this.TexImage2DMultisample = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, byte, void>)loader(name);
                fixed(byte* name = TexImage3DMultisampleUtf8) this.TexImage3DMultisample = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, byte, void>)loader(name);
                fixed(byte* name = GetMultisamplefvUtf8) this.GetMultisamplefv = (delegate* unmanaged<GetMultisamplePNameNV, uint, float*, void>)loader(name);
                fixed(byte* name = SampleMaskiUtf8) this.SampleMaski = (delegate* unmanaged<uint, uint, void>)loader(name);
            }

            if(!IsEmbedded && Version33)
            {
                fixed(byte* name = BindFragDataLocationIndexedUtf8) this.BindFragDataLocationIndexed = (delegate* unmanaged<uint, uint, uint, GLchar*, void>)loader(name);
                fixed(byte* name = GetFragDataIndexUtf8) this.GetFragDataIndex = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = GenSamplersUtf8) this.GenSamplers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteSamplersUtf8) this.DeleteSamplers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsSamplerUtf8) this.IsSampler = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BindSamplerUtf8) this.BindSampler = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = SamplerParameteriUtf8) this.SamplerParameteri = (delegate* unmanaged<uint, SamplerParameterI, int, void>)loader(name);
                fixed(byte* name = SamplerParameterivUtf8) this.SamplerParameteriv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = SamplerParameterfUtf8) this.SamplerParameterf = (delegate* unmanaged<uint, SamplerParameterF, float, void>)loader(name);
                fixed(byte* name = SamplerParameterfvUtf8) this.SamplerParameterfv = (delegate* unmanaged<uint, SamplerParameterF, float*, void>)loader(name);
                fixed(byte* name = SamplerParameterIivUtf8) this.SamplerParameterIiv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = SamplerParameterIuivUtf8) this.SamplerParameterIuiv = (delegate* unmanaged<uint, SamplerParameterI, uint*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterivUtf8) this.GetSamplerParameteriv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterIivUtf8) this.GetSamplerParameterIiv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterfvUtf8) this.GetSamplerParameterfv = (delegate* unmanaged<uint, SamplerParameterF, float*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterIuivUtf8) this.GetSamplerParameterIuiv = (delegate* unmanaged<uint, SamplerParameterI, uint*, void>)loader(name);
                fixed(byte* name = QueryCounterUtf8) this.QueryCounter = (delegate* unmanaged<uint, QueryCounterTarget, void>)loader(name);
                fixed(byte* name = GetQueryObjecti64vUtf8) this.GetQueryObjecti64v = (delegate* unmanaged<uint, QueryObjectParameterName, GLint64*, void>)loader(name);
                fixed(byte* name = GetQueryObjectui64vUtf8) this.GetQueryObjectui64v = (delegate* unmanaged<uint, QueryObjectParameterName, GLuint64*, void>)loader(name);
                fixed(byte* name = VertexAttribDivisorUtf8) this.VertexAttribDivisor = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = VertexAttribP1uiUtf8) this.VertexAttribP1ui = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexAttribP1uivUtf8) this.VertexAttribP1uiv = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribP2uiUtf8) this.VertexAttribP2ui = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexAttribP2uivUtf8) this.VertexAttribP2uiv = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribP3uiUtf8) this.VertexAttribP3ui = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexAttribP3uivUtf8) this.VertexAttribP3uiv = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribP4uiUtf8) this.VertexAttribP4ui = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexAttribP4uivUtf8) this.VertexAttribP4uiv = (delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void>)loader(name);
                fixed(byte* name = VertexP2uiUtf8) this.VertexP2ui = (delegate* unmanaged<VertexPointerType, uint, void>)loader(name);
                fixed(byte* name = VertexP2uivUtf8) this.VertexP2uiv = (delegate* unmanaged<VertexPointerType, uint*, void>)loader(name);
                fixed(byte* name = VertexP3uiUtf8) this.VertexP3ui = (delegate* unmanaged<VertexPointerType, uint, void>)loader(name);
                fixed(byte* name = VertexP3uivUtf8) this.VertexP3uiv = (delegate* unmanaged<VertexPointerType, uint*, void>)loader(name);
                fixed(byte* name = VertexP4uiUtf8) this.VertexP4ui = (delegate* unmanaged<VertexPointerType, uint, void>)loader(name);
                fixed(byte* name = VertexP4uivUtf8) this.VertexP4uiv = (delegate* unmanaged<VertexPointerType, uint*, void>)loader(name);
                fixed(byte* name = TexCoordP1uiUtf8) this.TexCoordP1ui = (delegate* unmanaged<TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = TexCoordP1uivUtf8) this.TexCoordP1uiv = (delegate* unmanaged<TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = TexCoordP2uiUtf8) this.TexCoordP2ui = (delegate* unmanaged<TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = TexCoordP2uivUtf8) this.TexCoordP2uiv = (delegate* unmanaged<TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = TexCoordP3uiUtf8) this.TexCoordP3ui = (delegate* unmanaged<TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = TexCoordP3uivUtf8) this.TexCoordP3uiv = (delegate* unmanaged<TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = TexCoordP4uiUtf8) this.TexCoordP4ui = (delegate* unmanaged<TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = TexCoordP4uivUtf8) this.TexCoordP4uiv = (delegate* unmanaged<TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = MultiTexCoordP1uiUtf8) this.MultiTexCoordP1ui = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = MultiTexCoordP1uivUtf8) this.MultiTexCoordP1uiv = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = MultiTexCoordP2uiUtf8) this.MultiTexCoordP2ui = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = MultiTexCoordP2uivUtf8) this.MultiTexCoordP2uiv = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = MultiTexCoordP3uiUtf8) this.MultiTexCoordP3ui = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = MultiTexCoordP3uivUtf8) this.MultiTexCoordP3uiv = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = MultiTexCoordP4uiUtf8) this.MultiTexCoordP4ui = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void>)loader(name);
                fixed(byte* name = MultiTexCoordP4uivUtf8) this.MultiTexCoordP4uiv = (delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void>)loader(name);
                fixed(byte* name = NormalP3uiUtf8) this.NormalP3ui = (delegate* unmanaged<NormalPointerType, uint, void>)loader(name);
                fixed(byte* name = NormalP3uivUtf8) this.NormalP3uiv = (delegate* unmanaged<NormalPointerType, uint*, void>)loader(name);
                fixed(byte* name = ColorP3uiUtf8) this.ColorP3ui = (delegate* unmanaged<ColorPointerType, uint, void>)loader(name);
                fixed(byte* name = ColorP3uivUtf8) this.ColorP3uiv = (delegate* unmanaged<ColorPointerType, uint*, void>)loader(name);
                fixed(byte* name = ColorP4uiUtf8) this.ColorP4ui = (delegate* unmanaged<ColorPointerType, uint, void>)loader(name);
                fixed(byte* name = ColorP4uivUtf8) this.ColorP4uiv = (delegate* unmanaged<ColorPointerType, uint*, void>)loader(name);
                fixed(byte* name = SecondaryColorP3uiUtf8) this.SecondaryColorP3ui = (delegate* unmanaged<ColorPointerType, uint, void>)loader(name);
                fixed(byte* name = SecondaryColorP3uivUtf8) this.SecondaryColorP3uiv = (delegate* unmanaged<ColorPointerType, uint*, void>)loader(name);
            }

            if(!IsEmbedded && Version40)
            {
                fixed(byte* name = MinSampleShadingUtf8) this.MinSampleShading = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = BlendEquationiUtf8) this.BlendEquationi = (delegate* unmanaged<uint, BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = BlendEquationSeparateiUtf8) this.BlendEquationSeparatei = (delegate* unmanaged<uint, BlendEquationModeEXT, BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = BlendFunciUtf8) this.BlendFunci = (delegate* unmanaged<uint, BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = BlendFuncSeparateiUtf8) this.BlendFuncSeparatei = (delegate* unmanaged<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = DrawArraysIndirectUtf8) this.DrawArraysIndirect = (delegate* unmanaged<PrimitiveType, void*, void>)loader(name);
                fixed(byte* name = DrawElementsIndirectUtf8) this.DrawElementsIndirect = (delegate* unmanaged<PrimitiveType, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = Uniform1dUtf8) this.Uniform1d = (delegate* unmanaged<int, GLdouble, void>)loader(name);
                fixed(byte* name = Uniform2dUtf8) this.Uniform2d = (delegate* unmanaged<int, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Uniform3dUtf8) this.Uniform3d = (delegate* unmanaged<int, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Uniform4dUtf8) this.Uniform4d = (delegate* unmanaged<int, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = Uniform1dvUtf8) this.Uniform1dv = (delegate* unmanaged<int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = Uniform2dvUtf8) this.Uniform2dv = (delegate* unmanaged<int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = Uniform3dvUtf8) this.Uniform3dv = (delegate* unmanaged<int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = Uniform4dvUtf8) this.Uniform4dv = (delegate* unmanaged<int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix2dvUtf8) this.UniformMatrix2dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix3dvUtf8) this.UniformMatrix3dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix4dvUtf8) this.UniformMatrix4dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix2x3dvUtf8) this.UniformMatrix2x3dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix2x4dvUtf8) this.UniformMatrix2x4dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix3x2dvUtf8) this.UniformMatrix3x2dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix3x4dvUtf8) this.UniformMatrix3x4dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix4x2dvUtf8) this.UniformMatrix4x2dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = UniformMatrix4x3dvUtf8) this.UniformMatrix4x3dv = (delegate* unmanaged<int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = GetUniformdvUtf8) this.GetUniformdv = (delegate* unmanaged<uint, int, GLdouble*, void>)loader(name);
                fixed(byte* name = GetSubroutineUniformLocationUtf8) this.GetSubroutineUniformLocation = (delegate* unmanaged<uint, ShaderType, GLchar*, int>)loader(name);
                fixed(byte* name = GetSubroutineIndexUtf8) this.GetSubroutineIndex = (delegate* unmanaged<uint, ShaderType, GLchar*, uint>)loader(name);
                fixed(byte* name = GetActiveSubroutineUniformivUtf8) this.GetActiveSubroutineUniformiv = (delegate* unmanaged<uint, ShaderType, uint, SubroutineParameterName, int*, void>)loader(name);
                fixed(byte* name = GetActiveSubroutineUniformNameUtf8) this.GetActiveSubroutineUniformName = (delegate* unmanaged<uint, ShaderType, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetActiveSubroutineNameUtf8) this.GetActiveSubroutineName = (delegate* unmanaged<uint, ShaderType, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = UniformSubroutinesuivUtf8) this.UniformSubroutinesuiv = (delegate* unmanaged<ShaderType, int, uint*, void>)loader(name);
                fixed(byte* name = GetUniformSubroutineuivUtf8) this.GetUniformSubroutineuiv = (delegate* unmanaged<ShaderType, int, uint*, void>)loader(name);
                fixed(byte* name = GetProgramStageivUtf8) this.GetProgramStageiv = (delegate* unmanaged<uint, ShaderType, ProgramStagePName, int*, void>)loader(name);
                fixed(byte* name = PatchParameteriUtf8) this.PatchParameteri = (delegate* unmanaged<PatchParameterName, int, void>)loader(name);
                fixed(byte* name = PatchParameterfvUtf8) this.PatchParameterfv = (delegate* unmanaged<PatchParameterName, float*, void>)loader(name);
                fixed(byte* name = BindTransformFeedbackUtf8) this.BindTransformFeedback = (delegate* unmanaged<BindTransformFeedbackTarget, uint, void>)loader(name);
                fixed(byte* name = DeleteTransformFeedbacksUtf8) this.DeleteTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenTransformFeedbacksUtf8) this.GenTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsTransformFeedbackUtf8) this.IsTransformFeedback = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = PauseTransformFeedbackUtf8) this.PauseTransformFeedback = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = ResumeTransformFeedbackUtf8) this.ResumeTransformFeedback = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = DrawTransformFeedbackUtf8) this.DrawTransformFeedback = (delegate* unmanaged<PrimitiveType, uint, void>)loader(name);
                fixed(byte* name = DrawTransformFeedbackStreamUtf8) this.DrawTransformFeedbackStream = (delegate* unmanaged<PrimitiveType, uint, uint, void>)loader(name);
                fixed(byte* name = BeginQueryIndexedUtf8) this.BeginQueryIndexed = (delegate* unmanaged<QueryTarget, uint, uint, void>)loader(name);
                fixed(byte* name = EndQueryIndexedUtf8) this.EndQueryIndexed = (delegate* unmanaged<QueryTarget, uint, void>)loader(name);
                fixed(byte* name = GetQueryIndexedivUtf8) this.GetQueryIndexediv = (delegate* unmanaged<QueryTarget, uint, QueryParameterName, int*, void>)loader(name);
            }

            if(!IsEmbedded && Version41)
            {
                fixed(byte* name = ReleaseShaderCompilerUtf8) this.ReleaseShaderCompiler = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = ShaderBinaryUtf8) this.ShaderBinary = (delegate* unmanaged<int, uint*, ShaderBinaryFormat, void*, int, void>)loader(name);
                fixed(byte* name = GetShaderPrecisionFormatUtf8) this.GetShaderPrecisionFormat = (delegate* unmanaged<ShaderType, PrecisionType, int*, int*, void>)loader(name);
                fixed(byte* name = DepthRangefUtf8) this.DepthRangef = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = ClearDepthfUtf8) this.ClearDepthf = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = GetProgramBinaryUtf8) this.GetProgramBinary = (delegate* unmanaged<uint, int, int*, uint*, void*, void>)loader(name);
                fixed(byte* name = ProgramBinaryUtf8) this.ProgramBinary = (delegate* unmanaged<uint, uint, void*, int, void>)loader(name);
                fixed(byte* name = ProgramParameteriUtf8) this.ProgramParameteri = (delegate* unmanaged<uint, ProgramParameterPName, int, void>)loader(name);
                fixed(byte* name = UseProgramStagesUtf8) this.UseProgramStages = (delegate* unmanaged<uint, UseProgramStageMask, uint, void>)loader(name);
                fixed(byte* name = ActiveShaderProgramUtf8) this.ActiveShaderProgram = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = CreateShaderProgramvUtf8) this.CreateShaderProgramv = (delegate* unmanaged<ShaderType, int, GLchar**, uint>)loader(name);
                fixed(byte* name = BindProgramPipelineUtf8) this.BindProgramPipeline = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteProgramPipelinesUtf8) this.DeleteProgramPipelines = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenProgramPipelinesUtf8) this.GenProgramPipelines = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsProgramPipelineUtf8) this.IsProgramPipeline = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = GetProgramPipelineivUtf8) this.GetProgramPipelineiv = (delegate* unmanaged<uint, PipelineParameterName, int*, void>)loader(name);
                fixed(byte* name = ProgramParameteriUtf8) this.ProgramParameteri = (delegate* unmanaged<uint, ProgramParameterPName, int, void>)loader(name);
                fixed(byte* name = ProgramUniform1iUtf8) this.ProgramUniform1i = (delegate* unmanaged<uint, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform1ivUtf8) this.ProgramUniform1iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform1fUtf8) this.ProgramUniform1f = (delegate* unmanaged<uint, int, float, void>)loader(name);
                fixed(byte* name = ProgramUniform1fvUtf8) this.ProgramUniform1fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform1dUtf8) this.ProgramUniform1d = (delegate* unmanaged<uint, int, GLdouble, void>)loader(name);
                fixed(byte* name = ProgramUniform1dvUtf8) this.ProgramUniform1dv = (delegate* unmanaged<uint, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniform1uiUtf8) this.ProgramUniform1ui = (delegate* unmanaged<uint, int, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform1uivUtf8) this.ProgramUniform1uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform2iUtf8) this.ProgramUniform2i = (delegate* unmanaged<uint, int, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform2ivUtf8) this.ProgramUniform2iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform2fUtf8) this.ProgramUniform2f = (delegate* unmanaged<uint, int, float, float, void>)loader(name);
                fixed(byte* name = ProgramUniform2fvUtf8) this.ProgramUniform2fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform2dUtf8) this.ProgramUniform2d = (delegate* unmanaged<uint, int, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = ProgramUniform2dvUtf8) this.ProgramUniform2dv = (delegate* unmanaged<uint, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniform2uiUtf8) this.ProgramUniform2ui = (delegate* unmanaged<uint, int, uint, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform2uivUtf8) this.ProgramUniform2uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform3iUtf8) this.ProgramUniform3i = (delegate* unmanaged<uint, int, int, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform3ivUtf8) this.ProgramUniform3iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform3fUtf8) this.ProgramUniform3f = (delegate* unmanaged<uint, int, float, float, float, void>)loader(name);
                fixed(byte* name = ProgramUniform3fvUtf8) this.ProgramUniform3fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform3dUtf8) this.ProgramUniform3d = (delegate* unmanaged<uint, int, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = ProgramUniform3dvUtf8) this.ProgramUniform3dv = (delegate* unmanaged<uint, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniform3uiUtf8) this.ProgramUniform3ui = (delegate* unmanaged<uint, int, uint, uint, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform3uivUtf8) this.ProgramUniform3uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform4iUtf8) this.ProgramUniform4i = (delegate* unmanaged<uint, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform4ivUtf8) this.ProgramUniform4iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform4fUtf8) this.ProgramUniform4f = (delegate* unmanaged<uint, int, float, float, float, float, void>)loader(name);
                fixed(byte* name = ProgramUniform4fvUtf8) this.ProgramUniform4fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform4dUtf8) this.ProgramUniform4d = (delegate* unmanaged<uint, int, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = ProgramUniform4dvUtf8) this.ProgramUniform4dv = (delegate* unmanaged<uint, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniform4uiUtf8) this.ProgramUniform4ui = (delegate* unmanaged<uint, int, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform4uivUtf8) this.ProgramUniform4uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2fvUtf8) this.ProgramUniformMatrix2fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3fvUtf8) this.ProgramUniformMatrix3fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4fvUtf8) this.ProgramUniformMatrix4fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2dvUtf8) this.ProgramUniformMatrix2dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3dvUtf8) this.ProgramUniformMatrix3dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4dvUtf8) this.ProgramUniformMatrix4dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2x3fvUtf8) this.ProgramUniformMatrix2x3fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3x2fvUtf8) this.ProgramUniformMatrix3x2fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2x4fvUtf8) this.ProgramUniformMatrix2x4fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4x2fvUtf8) this.ProgramUniformMatrix4x2fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3x4fvUtf8) this.ProgramUniformMatrix3x4fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4x3fvUtf8) this.ProgramUniformMatrix4x3fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2x3dvUtf8) this.ProgramUniformMatrix2x3dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3x2dvUtf8) this.ProgramUniformMatrix3x2dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2x4dvUtf8) this.ProgramUniformMatrix2x4dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4x2dvUtf8) this.ProgramUniformMatrix4x2dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3x4dvUtf8) this.ProgramUniformMatrix3x4dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4x3dvUtf8) this.ProgramUniformMatrix4x3dv = (delegate* unmanaged<uint, int, int, byte, GLdouble*, void>)loader(name);
                fixed(byte* name = ValidateProgramPipelineUtf8) this.ValidateProgramPipeline = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = GetProgramPipelineInfoLogUtf8) this.GetProgramPipelineInfoLog = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = VertexAttribL1dUtf8) this.VertexAttribL1d = (delegate* unmanaged<uint, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttribL2dUtf8) this.VertexAttribL2d = (delegate* unmanaged<uint, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttribL3dUtf8) this.VertexAttribL3d = (delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttribL4dUtf8) this.VertexAttribL4d = (delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = VertexAttribL1dvUtf8) this.VertexAttribL1dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttribL2dvUtf8) this.VertexAttribL2dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttribL3dvUtf8) this.VertexAttribL3dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttribL4dvUtf8) this.VertexAttribL4dv = (delegate* unmanaged<uint, GLdouble*, void>)loader(name);
                fixed(byte* name = VertexAttribLPointerUtf8) this.VertexAttribLPointer = (delegate* unmanaged<uint, int, VertexAttribLType, int, void*, void>)loader(name);
                fixed(byte* name = GetVertexAttribLdvUtf8) this.GetVertexAttribLdv = (delegate* unmanaged<uint, VertexAttribEnum, GLdouble*, void>)loader(name);
                fixed(byte* name = ViewportArrayvUtf8) this.ViewportArrayv = (delegate* unmanaged<uint, int, float*, void>)loader(name);
                fixed(byte* name = ViewportIndexedfUtf8) this.ViewportIndexedf = (delegate* unmanaged<uint, float, float, float, float, void>)loader(name);
                fixed(byte* name = ViewportIndexedfvUtf8) this.ViewportIndexedfv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = ScissorArrayvUtf8) this.ScissorArrayv = (delegate* unmanaged<uint, int, int*, void>)loader(name);
                fixed(byte* name = ScissorIndexedUtf8) this.ScissorIndexed = (delegate* unmanaged<uint, int, int, int, int, void>)loader(name);
                fixed(byte* name = ScissorIndexedvUtf8) this.ScissorIndexedv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = DepthRangeArrayvUtf8) this.DepthRangeArrayv = (delegate* unmanaged<uint, int, GLdouble*, void>)loader(name);
                fixed(byte* name = DepthRangeIndexedUtf8) this.DepthRangeIndexed = (delegate* unmanaged<uint, GLdouble, GLdouble, void>)loader(name);
                fixed(byte* name = GetFloati_vUtf8) this.GetFloati_v = (delegate* unmanaged<GetPName, uint, float*, void>)loader(name);
                fixed(byte* name = GetDoublei_vUtf8) this.GetDoublei_v = (delegate* unmanaged<GetPName, uint, GLdouble*, void>)loader(name);
            }

            if(!IsEmbedded && Version42)
            {
                fixed(byte* name = DrawArraysInstancedBaseInstanceUtf8) this.DrawArraysInstancedBaseInstance = (delegate* unmanaged<PrimitiveType, int, int, int, uint, void>)loader(name);
                fixed(byte* name = DrawElementsInstancedBaseInstanceUtf8) this.DrawElementsInstancedBaseInstance = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, uint, void>)loader(name);
                fixed(byte* name = DrawElementsInstancedBaseVertexBaseInstanceUtf8) this.DrawElementsInstancedBaseVertexBaseInstance = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, int, uint, void>)loader(name);
                fixed(byte* name = GetInternalformativUtf8) this.GetInternalformativ = (delegate* unmanaged<TextureTarget, InternalFormat, InternalFormatPName, int, int*, void>)loader(name);
                fixed(byte* name = GetActiveAtomicCounterBufferivUtf8) this.GetActiveAtomicCounterBufferiv = (delegate* unmanaged<uint, uint, AtomicCounterBufferPName, int*, void>)loader(name);
                fixed(byte* name = BindImageTextureUtf8) this.BindImageTexture = (delegate* unmanaged<uint, uint, int, byte, int, BufferAccessARB, InternalFormat, void>)loader(name);
                fixed(byte* name = MemoryBarrierUtf8) this.MemoryBarrier = (delegate* unmanaged<MemoryBarrierMask, void>)loader(name);
                fixed(byte* name = TexStorage1DUtf8) this.TexStorage1D = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, void>)loader(name);
                fixed(byte* name = TexStorage2DUtf8) this.TexStorage2D = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, void>)loader(name);
                fixed(byte* name = TexStorage3DUtf8) this.TexStorage3D = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, void>)loader(name);
                fixed(byte* name = DrawTransformFeedbackInstancedUtf8) this.DrawTransformFeedbackInstanced = (delegate* unmanaged<PrimitiveType, uint, int, void>)loader(name);
                fixed(byte* name = DrawTransformFeedbackStreamInstancedUtf8) this.DrawTransformFeedbackStreamInstanced = (delegate* unmanaged<PrimitiveType, uint, uint, int, void>)loader(name);
            }

            if(!IsEmbedded && Version43)
            {
                fixed(byte* name = ClearBufferDataUtf8) this.ClearBufferData = (delegate* unmanaged<BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = ClearBufferSubDataUtf8) this.ClearBufferSubData = (delegate* unmanaged<BufferTargetARB, SizedInternalFormat, GLintptr, GLsizeiptr, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = DispatchComputeUtf8) this.DispatchCompute = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = DispatchComputeIndirectUtf8) this.DispatchComputeIndirect = (delegate* unmanaged<GLintptr, void>)loader(name);
                fixed(byte* name = CopyImageSubDataUtf8) this.CopyImageSubData = (delegate* unmanaged<uint, CopyImageSubDataTarget, int, int, int, int, uint, CopyImageSubDataTarget, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = FramebufferParameteriUtf8) this.FramebufferParameteri = (delegate* unmanaged<FramebufferTarget, FramebufferParameterName, int, void>)loader(name);
                fixed(byte* name = GetFramebufferParameterivUtf8) this.GetFramebufferParameteriv = (delegate* unmanaged<FramebufferTarget, FramebufferAttachmentParameterName, int*, void>)loader(name);
                fixed(byte* name = GetInternalformati64vUtf8) this.GetInternalformati64v = (delegate* unmanaged<TextureTarget, InternalFormat, InternalFormatPName, int, GLint64*, void>)loader(name);
                fixed(byte* name = InvalidateTexSubImageUtf8) this.InvalidateTexSubImage = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = InvalidateTexImageUtf8) this.InvalidateTexImage = (delegate* unmanaged<uint, int, void>)loader(name);
                fixed(byte* name = InvalidateBufferSubDataUtf8) this.InvalidateBufferSubData = (delegate* unmanaged<uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = InvalidateBufferDataUtf8) this.InvalidateBufferData = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = InvalidateFramebufferUtf8) this.InvalidateFramebuffer = (delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, void>)loader(name);
                fixed(byte* name = InvalidateSubFramebufferUtf8) this.InvalidateSubFramebuffer = (delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int, void>)loader(name);
                fixed(byte* name = MultiDrawArraysIndirectUtf8) this.MultiDrawArraysIndirect = (delegate* unmanaged<PrimitiveType, void*, int, int, void>)loader(name);
                fixed(byte* name = MultiDrawElementsIndirectUtf8) this.MultiDrawElementsIndirect = (delegate* unmanaged<PrimitiveType, DrawElementsType, void*, int, int, void>)loader(name);
                fixed(byte* name = GetProgramInterfaceivUtf8) this.GetProgramInterfaceiv = (delegate* unmanaged<uint, ProgramInterface, ProgramInterfacePName, int*, void>)loader(name);
                fixed(byte* name = GetProgramResourceIndexUtf8) this.GetProgramResourceIndex = (delegate* unmanaged<uint, ProgramInterface, GLchar*, uint>)loader(name);
                fixed(byte* name = GetProgramResourceNameUtf8) this.GetProgramResourceName = (delegate* unmanaged<uint, ProgramInterface, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetProgramResourceivUtf8) this.GetProgramResourceiv = (delegate* unmanaged<uint, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*, void>)loader(name);
                fixed(byte* name = GetProgramResourceLocationUtf8) this.GetProgramResourceLocation = (delegate* unmanaged<uint, ProgramInterface, GLchar*, int>)loader(name);
                fixed(byte* name = GetProgramResourceLocationIndexUtf8) this.GetProgramResourceLocationIndex = (delegate* unmanaged<uint, ProgramInterface, GLchar*, int>)loader(name);
                fixed(byte* name = ShaderStorageBlockBindingUtf8) this.ShaderStorageBlockBinding = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = TexBufferRangeUtf8) this.TexBufferRange = (delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = TexStorage2DMultisampleUtf8) this.TexStorage2DMultisample = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, byte, void>)loader(name);
                fixed(byte* name = TexStorage3DMultisampleUtf8) this.TexStorage3DMultisample = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void>)loader(name);
                fixed(byte* name = TextureViewUtf8) this.TextureView = (delegate* unmanaged<uint, TextureTarget, uint, SizedInternalFormat, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = BindVertexBufferUtf8) this.BindVertexBuffer = (delegate* unmanaged<uint, uint, GLintptr, int, void>)loader(name);
                fixed(byte* name = VertexAttribFormatUtf8) this.VertexAttribFormat = (delegate* unmanaged<uint, int, VertexAttribType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexAttribIFormatUtf8) this.VertexAttribIFormat = (delegate* unmanaged<uint, int, VertexAttribIType, uint, void>)loader(name);
                fixed(byte* name = VertexAttribLFormatUtf8) this.VertexAttribLFormat = (delegate* unmanaged<uint, int, VertexAttribLType, uint, void>)loader(name);
                fixed(byte* name = VertexAttribBindingUtf8) this.VertexAttribBinding = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = VertexBindingDivisorUtf8) this.VertexBindingDivisor = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = DebugMessageControlUtf8) this.DebugMessageControl = (delegate* unmanaged<DebugSource, DebugType, DebugSeverity, int, uint*, byte, void>)loader(name);
                fixed(byte* name = DebugMessageInsertUtf8) this.DebugMessageInsert = (delegate* unmanaged<DebugSource, DebugType, uint, DebugSeverity, int, GLchar*, void>)loader(name);
                fixed(byte* name = DebugMessageCallbackUtf8) this.DebugMessageCallback = (delegate* unmanaged<GLDEBUGPROC, void*, void>)loader(name);
                fixed(byte* name = GetDebugMessageLogUtf8) this.GetDebugMessageLog = (delegate* unmanaged<uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, GLchar*, uint>)loader(name);
                fixed(byte* name = PushDebugGroupUtf8) this.PushDebugGroup = (delegate* unmanaged<DebugSource, uint, int, GLchar*, void>)loader(name);
                fixed(byte* name = PopDebugGroupUtf8) this.PopDebugGroup = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = ObjectLabelUtf8) this.ObjectLabel = (delegate* unmanaged<ObjectIdentifier, uint, int, GLchar*, void>)loader(name);
                fixed(byte* name = GetObjectLabelUtf8) this.GetObjectLabel = (delegate* unmanaged<ObjectIdentifier, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = ObjectPtrLabelUtf8) this.ObjectPtrLabel = (delegate* unmanaged<void*, int, GLchar*, void>)loader(name);
                fixed(byte* name = GetObjectPtrLabelUtf8) this.GetObjectPtrLabel = (delegate* unmanaged<void*, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetPointervUtf8) this.GetPointerv = (delegate* unmanaged<GetPointervPName, void**, void>)loader(name);
            }

            if(!IsEmbedded && Version44)
            {
                fixed(byte* name = BufferStorageUtf8) this.BufferStorage = (delegate* unmanaged<BufferStorageTarget, GLsizeiptr, void*, BufferStorageMask, void>)loader(name);
                fixed(byte* name = ClearTexImageUtf8) this.ClearTexImage = (delegate* unmanaged<uint, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = ClearTexSubImageUtf8) this.ClearTexSubImage = (delegate* unmanaged<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = BindBuffersBaseUtf8) this.BindBuffersBase = (delegate* unmanaged<BufferTargetARB, uint, int, uint*, void>)loader(name);
                fixed(byte* name = BindBuffersRangeUtf8) this.BindBuffersRange = (delegate* unmanaged<BufferTargetARB, uint, int, uint*, GLintptr*, GLsizeiptr*, void>)loader(name);
                fixed(byte* name = BindTexturesUtf8) this.BindTextures = (delegate* unmanaged<uint, int, uint*, void>)loader(name);
                fixed(byte* name = BindSamplersUtf8) this.BindSamplers = (delegate* unmanaged<uint, int, uint*, void>)loader(name);
                fixed(byte* name = BindImageTexturesUtf8) this.BindImageTextures = (delegate* unmanaged<uint, int, uint*, void>)loader(name);
                fixed(byte* name = BindVertexBuffersUtf8) this.BindVertexBuffers = (delegate* unmanaged<uint, int, uint*, GLintptr*, int*, void>)loader(name);
            }

            if(!IsEmbedded && Version45)
            {
                fixed(byte* name = ClipControlUtf8) this.ClipControl = (delegate* unmanaged<ClipControlOrigin, ClipControlDepth, void>)loader(name);
                fixed(byte* name = CreateTransformFeedbacksUtf8) this.CreateTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = TransformFeedbackBufferBaseUtf8) this.TransformFeedbackBufferBase = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = TransformFeedbackBufferRangeUtf8) this.TransformFeedbackBufferRange = (delegate* unmanaged<uint, uint, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = GetTransformFeedbackivUtf8) this.GetTransformFeedbackiv = (delegate* unmanaged<uint, TransformFeedbackPName, int*, void>)loader(name);
                fixed(byte* name = GetTransformFeedbacki_vUtf8) this.GetTransformFeedbacki_v = (delegate* unmanaged<uint, TransformFeedbackPName, uint, int*, void>)loader(name);
                fixed(byte* name = GetTransformFeedbacki64_vUtf8) this.GetTransformFeedbacki64_v = (delegate* unmanaged<uint, TransformFeedbackPName, uint, GLint64*, void>)loader(name);
                fixed(byte* name = CreateBuffersUtf8) this.CreateBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = NamedBufferStorageUtf8) this.NamedBufferStorage = (delegate* unmanaged<uint, GLsizeiptr, void*, BufferStorageMask, void>)loader(name);
                fixed(byte* name = NamedBufferDataUtf8) this.NamedBufferData = (delegate* unmanaged<uint, GLsizeiptr, void*, VertexBufferObjectUsage, void>)loader(name);
                fixed(byte* name = NamedBufferSubDataUtf8) this.NamedBufferSubData = (delegate* unmanaged<uint, GLintptr, GLsizeiptr, void*, void>)loader(name);
                fixed(byte* name = CopyNamedBufferSubDataUtf8) this.CopyNamedBufferSubData = (delegate* unmanaged<uint, uint, GLintptr, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = ClearNamedBufferDataUtf8) this.ClearNamedBufferData = (delegate* unmanaged<uint, SizedInternalFormat, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = ClearNamedBufferSubDataUtf8) this.ClearNamedBufferSubData = (delegate* unmanaged<uint, SizedInternalFormat, GLintptr, GLsizeiptr, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = MapNamedBufferUtf8) this.MapNamedBuffer = (delegate* unmanaged<uint, BufferAccessARB, void*>)loader(name);
                fixed(byte* name = MapNamedBufferRangeUtf8) this.MapNamedBufferRange = (delegate* unmanaged<uint, GLintptr, GLsizeiptr, MapBufferAccessMask, void*>)loader(name);
                fixed(byte* name = UnmapNamedBufferUtf8) this.UnmapNamedBuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = FlushMappedNamedBufferRangeUtf8) this.FlushMappedNamedBufferRange = (delegate* unmanaged<uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = GetNamedBufferParameterivUtf8) this.GetNamedBufferParameteriv = (delegate* unmanaged<uint, BufferPNameARB, int*, void>)loader(name);
                fixed(byte* name = GetNamedBufferParameteri64vUtf8) this.GetNamedBufferParameteri64v = (delegate* unmanaged<uint, BufferPNameARB, GLint64*, void>)loader(name);
                fixed(byte* name = GetNamedBufferPointervUtf8) this.GetNamedBufferPointerv = (delegate* unmanaged<uint, BufferPointerNameARB, void**, void>)loader(name);
                fixed(byte* name = GetNamedBufferSubDataUtf8) this.GetNamedBufferSubData = (delegate* unmanaged<uint, GLintptr, GLsizeiptr, void*, void>)loader(name);
                fixed(byte* name = CreateFramebuffersUtf8) this.CreateFramebuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = NamedFramebufferRenderbufferUtf8) this.NamedFramebufferRenderbuffer = (delegate* unmanaged<uint, FramebufferAttachment, RenderbufferTarget, uint, void>)loader(name);
                fixed(byte* name = NamedFramebufferParameteriUtf8) this.NamedFramebufferParameteri = (delegate* unmanaged<uint, FramebufferParameterName, int, void>)loader(name);
                fixed(byte* name = NamedFramebufferTextureUtf8) this.NamedFramebufferTexture = (delegate* unmanaged<uint, FramebufferAttachment, uint, int, void>)loader(name);
                fixed(byte* name = NamedFramebufferTextureLayerUtf8) this.NamedFramebufferTextureLayer = (delegate* unmanaged<uint, FramebufferAttachment, uint, int, int, void>)loader(name);
                fixed(byte* name = NamedFramebufferDrawBufferUtf8) this.NamedFramebufferDrawBuffer = (delegate* unmanaged<uint, ColorBuffer, void>)loader(name);
                fixed(byte* name = NamedFramebufferDrawBuffersUtf8) this.NamedFramebufferDrawBuffers = (delegate* unmanaged<uint, int, ColorBuffer*, void>)loader(name);
                fixed(byte* name = NamedFramebufferReadBufferUtf8) this.NamedFramebufferReadBuffer = (delegate* unmanaged<uint, ColorBuffer, void>)loader(name);
                fixed(byte* name = InvalidateNamedFramebufferDataUtf8) this.InvalidateNamedFramebufferData = (delegate* unmanaged<uint, int, FramebufferAttachment*, void>)loader(name);
                fixed(byte* name = InvalidateNamedFramebufferSubDataUtf8) this.InvalidateNamedFramebufferSubData = (delegate* unmanaged<uint, int, FramebufferAttachment*, int, int, int, int, void>)loader(name);
                fixed(byte* name = ClearNamedFramebufferivUtf8) this.ClearNamedFramebufferiv = (delegate* unmanaged<uint, Buffer, int, int*, void>)loader(name);
                fixed(byte* name = ClearNamedFramebufferuivUtf8) this.ClearNamedFramebufferuiv = (delegate* unmanaged<uint, Buffer, int, uint*, void>)loader(name);
                fixed(byte* name = ClearNamedFramebufferfvUtf8) this.ClearNamedFramebufferfv = (delegate* unmanaged<uint, Buffer, int, float*, void>)loader(name);
                fixed(byte* name = ClearNamedFramebufferfiUtf8) this.ClearNamedFramebufferfi = (delegate* unmanaged<uint, Buffer, int, float, int, void>)loader(name);
                fixed(byte* name = BlitNamedFramebufferUtf8) this.BlitNamedFramebuffer = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void>)loader(name);
                fixed(byte* name = CheckNamedFramebufferStatusUtf8) this.CheckNamedFramebufferStatus = (delegate* unmanaged<uint, FramebufferTarget, FramebufferStatus>)loader(name);
                fixed(byte* name = GetNamedFramebufferParameterivUtf8) this.GetNamedFramebufferParameteriv = (delegate* unmanaged<uint, GetFramebufferParameter, int*, void>)loader(name);
                fixed(byte* name = GetNamedFramebufferAttachmentParameterivUtf8) this.GetNamedFramebufferAttachmentParameteriv = (delegate* unmanaged<uint, FramebufferAttachment, FramebufferAttachmentParameterName, int*, void>)loader(name);
                fixed(byte* name = CreateRenderbuffersUtf8) this.CreateRenderbuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = NamedRenderbufferStorageUtf8) this.NamedRenderbufferStorage = (delegate* unmanaged<uint, InternalFormat, int, int, void>)loader(name);
                fixed(byte* name = NamedRenderbufferStorageMultisampleUtf8) this.NamedRenderbufferStorageMultisample = (delegate* unmanaged<uint, int, InternalFormat, int, int, void>)loader(name);
                fixed(byte* name = GetNamedRenderbufferParameterivUtf8) this.GetNamedRenderbufferParameteriv = (delegate* unmanaged<uint, RenderbufferParameterName, int*, void>)loader(name);
                fixed(byte* name = CreateTexturesUtf8) this.CreateTextures = (delegate* unmanaged<TextureTarget, int, uint*, void>)loader(name);
                fixed(byte* name = TextureBufferUtf8) this.TextureBuffer = (delegate* unmanaged<uint, SizedInternalFormat, uint, void>)loader(name);
                fixed(byte* name = TextureBufferRangeUtf8) this.TextureBufferRange = (delegate* unmanaged<uint, SizedInternalFormat, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = TextureStorage1DUtf8) this.TextureStorage1D = (delegate* unmanaged<uint, int, SizedInternalFormat, int, void>)loader(name);
                fixed(byte* name = TextureStorage2DUtf8) this.TextureStorage2D = (delegate* unmanaged<uint, int, SizedInternalFormat, int, int, void>)loader(name);
                fixed(byte* name = TextureStorage3DUtf8) this.TextureStorage3D = (delegate* unmanaged<uint, int, SizedInternalFormat, int, int, int, void>)loader(name);
                fixed(byte* name = TextureStorage2DMultisampleUtf8) this.TextureStorage2DMultisample = (delegate* unmanaged<uint, int, SizedInternalFormat, int, int, byte, void>)loader(name);
                fixed(byte* name = TextureStorage3DMultisampleUtf8) this.TextureStorage3DMultisample = (delegate* unmanaged<uint, int, SizedInternalFormat, int, int, int, byte, void>)loader(name);
                fixed(byte* name = TextureSubImage1DUtf8) this.TextureSubImage1D = (delegate* unmanaged<uint, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TextureSubImage2DUtf8) this.TextureSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TextureSubImage3DUtf8) this.TextureSubImage3D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = CompressedTextureSubImage1DUtf8) this.CompressedTextureSubImage1D = (delegate* unmanaged<uint, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTextureSubImage2DUtf8) this.CompressedTextureSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTextureSubImage3DUtf8) this.CompressedTextureSubImage3D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CopyTextureSubImage1DUtf8) this.CopyTextureSubImage1D = (delegate* unmanaged<uint, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTextureSubImage2DUtf8) this.CopyTextureSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTextureSubImage3DUtf8) this.CopyTextureSubImage3D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = TextureParameterfUtf8) this.TextureParameterf = (delegate* unmanaged<uint, TextureParameterName, float, void>)loader(name);
                fixed(byte* name = TextureParameterfvUtf8) this.TextureParameterfv = (delegate* unmanaged<uint, TextureParameterName, float*, void>)loader(name);
                fixed(byte* name = TextureParameteriUtf8) this.TextureParameteri = (delegate* unmanaged<uint, TextureParameterName, int, void>)loader(name);
                fixed(byte* name = TextureParameterIivUtf8) this.TextureParameterIiv = (delegate* unmanaged<uint, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = TextureParameterIuivUtf8) this.TextureParameterIuiv = (delegate* unmanaged<uint, TextureParameterName, uint*, void>)loader(name);
                fixed(byte* name = TextureParameterivUtf8) this.TextureParameteriv = (delegate* unmanaged<uint, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = GenerateTextureMipmapUtf8) this.GenerateTextureMipmap = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = BindTextureUnitUtf8) this.BindTextureUnit = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = GetTextureImageUtf8) this.GetTextureImage = (delegate* unmanaged<uint, int, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetCompressedTextureImageUtf8) this.GetCompressedTextureImage = (delegate* unmanaged<uint, int, int, void*, void>)loader(name);
                fixed(byte* name = GetTextureLevelParameterfvUtf8) this.GetTextureLevelParameterfv = (delegate* unmanaged<uint, int, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = GetTextureLevelParameterivUtf8) this.GetTextureLevelParameteriv = (delegate* unmanaged<uint, int, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTextureParameterfvUtf8) this.GetTextureParameterfv = (delegate* unmanaged<uint, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = GetTextureParameterIivUtf8) this.GetTextureParameterIiv = (delegate* unmanaged<uint, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTextureParameterIuivUtf8) this.GetTextureParameterIuiv = (delegate* unmanaged<uint, GetTextureParameter, uint*, void>)loader(name);
                fixed(byte* name = GetTextureParameterivUtf8) this.GetTextureParameteriv = (delegate* unmanaged<uint, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = CreateVertexArraysUtf8) this.CreateVertexArrays = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DisableVertexArrayAttribUtf8) this.DisableVertexArrayAttrib = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = EnableVertexArrayAttribUtf8) this.EnableVertexArrayAttrib = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = VertexArrayElementBufferUtf8) this.VertexArrayElementBuffer = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = VertexArrayVertexBufferUtf8) this.VertexArrayVertexBuffer = (delegate* unmanaged<uint, uint, uint, GLintptr, int, void>)loader(name);
                fixed(byte* name = VertexArrayVertexBuffersUtf8) this.VertexArrayVertexBuffers = (delegate* unmanaged<uint, uint, int, uint*, GLintptr*, int*, void>)loader(name);
                fixed(byte* name = VertexArrayAttribBindingUtf8) this.VertexArrayAttribBinding = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = VertexArrayAttribFormatUtf8) this.VertexArrayAttribFormat = (delegate* unmanaged<uint, uint, int, VertexAttribType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexArrayAttribIFormatUtf8) this.VertexArrayAttribIFormat = (delegate* unmanaged<uint, uint, int, VertexAttribIType, uint, void>)loader(name);
                fixed(byte* name = VertexArrayAttribLFormatUtf8) this.VertexArrayAttribLFormat = (delegate* unmanaged<uint, uint, int, VertexAttribLType, uint, void>)loader(name);
                fixed(byte* name = VertexArrayBindingDivisorUtf8) this.VertexArrayBindingDivisor = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = GetVertexArrayivUtf8) this.GetVertexArrayiv = (delegate* unmanaged<uint, VertexArrayPName, int*, void>)loader(name);
                fixed(byte* name = GetVertexArrayIndexedivUtf8) this.GetVertexArrayIndexediv = (delegate* unmanaged<uint, uint, VertexArrayPName, int*, void>)loader(name);
                fixed(byte* name = GetVertexArrayIndexed64ivUtf8) this.GetVertexArrayIndexed64iv = (delegate* unmanaged<uint, uint, VertexArrayPName, GLint64*, void>)loader(name);
                fixed(byte* name = CreateSamplersUtf8) this.CreateSamplers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = CreateProgramPipelinesUtf8) this.CreateProgramPipelines = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = CreateQueriesUtf8) this.CreateQueries = (delegate* unmanaged<QueryTarget, int, uint*, void>)loader(name);
                fixed(byte* name = GetQueryBufferObjecti64vUtf8) this.GetQueryBufferObjecti64v = (delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void>)loader(name);
                fixed(byte* name = GetQueryBufferObjectivUtf8) this.GetQueryBufferObjectiv = (delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void>)loader(name);
                fixed(byte* name = GetQueryBufferObjectui64vUtf8) this.GetQueryBufferObjectui64v = (delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void>)loader(name);
                fixed(byte* name = GetQueryBufferObjectuivUtf8) this.GetQueryBufferObjectuiv = (delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void>)loader(name);
                fixed(byte* name = MemoryBarrierByRegionUtf8) this.MemoryBarrierByRegion = (delegate* unmanaged<MemoryBarrierMask, void>)loader(name);
                fixed(byte* name = GetTextureSubImageUtf8) this.GetTextureSubImage = (delegate* unmanaged<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetCompressedTextureSubImageUtf8) this.GetCompressedTextureSubImage = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void*, void>)loader(name);
                fixed(byte* name = GetGraphicsResetStatusUtf8) this.GetGraphicsResetStatus = (delegate* unmanaged<GraphicsResetStatus>)loader(name);
                fixed(byte* name = GetnCompressedTexImageUtf8) this.GetnCompressedTexImage = (delegate* unmanaged<TextureTarget, int, int, void*, void>)loader(name);
                fixed(byte* name = GetnTexImageUtf8) this.GetnTexImage = (delegate* unmanaged<TextureTarget, int, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetnUniformdvUtf8) this.GetnUniformdv = (delegate* unmanaged<uint, int, int, GLdouble*, void>)loader(name);
                fixed(byte* name = GetnUniformfvUtf8) this.GetnUniformfv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = GetnUniformivUtf8) this.GetnUniformiv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = GetnUniformuivUtf8) this.GetnUniformuiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ReadnPixelsUtf8) this.ReadnPixels = (delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetnMapdvUtf8) this.GetnMapdv = (delegate* unmanaged<MapTarget, MapQuery, int, GLdouble*, void>)loader(name);
                fixed(byte* name = GetnMapfvUtf8) this.GetnMapfv = (delegate* unmanaged<MapTarget, MapQuery, int, float*, void>)loader(name);
                fixed(byte* name = GetnMapivUtf8) this.GetnMapiv = (delegate* unmanaged<MapTarget, MapQuery, int, int*, void>)loader(name);
                fixed(byte* name = GetnPixelMapfvUtf8) this.GetnPixelMapfv = (delegate* unmanaged<PixelMap, int, float*, void>)loader(name);
                fixed(byte* name = GetnPixelMapuivUtf8) this.GetnPixelMapuiv = (delegate* unmanaged<PixelMap, int, uint*, void>)loader(name);
                fixed(byte* name = GetnPixelMapusvUtf8) this.GetnPixelMapusv = (delegate* unmanaged<PixelMap, int, ushort*, void>)loader(name);
                fixed(byte* name = GetnPolygonStippleUtf8) this.GetnPolygonStipple = (delegate* unmanaged<int, GLubyte*, void>)loader(name);
                fixed(byte* name = GetnColorTableUtf8) this.GetnColorTable = (delegate* unmanaged<ColorTableTarget, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetnConvolutionFilterUtf8) this.GetnConvolutionFilter = (delegate* unmanaged<ConvolutionTarget, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetnSeparableFilterUtf8) this.GetnSeparableFilter = (delegate* unmanaged<SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*, void>)loader(name);
                fixed(byte* name = GetnHistogramUtf8) this.GetnHistogram = (delegate* unmanaged<HistogramTarget, byte, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetnMinmaxUtf8) this.GetnMinmax = (delegate* unmanaged<MinmaxTarget, byte, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = TextureBarrierUtf8) this.TextureBarrier = (delegate* unmanaged<void>)loader(name);
            }

            if(!IsEmbedded && Version46)
            {
                fixed(byte* name = SpecializeShaderUtf8) this.SpecializeShader = (delegate* unmanaged<uint, GLchar*, uint, uint*, uint*, void>)loader(name);
                fixed(byte* name = MultiDrawArraysIndirectCountUtf8) this.MultiDrawArraysIndirectCount = (delegate* unmanaged<PrimitiveType, void*, GLintptr, int, int, void>)loader(name);
                fixed(byte* name = MultiDrawElementsIndirectCountUtf8) this.MultiDrawElementsIndirectCount = (delegate* unmanaged<PrimitiveType, DrawElementsType, void*, GLintptr, int, int, void>)loader(name);
                fixed(byte* name = PolygonOffsetClampUtf8) this.PolygonOffsetClamp = (delegate* unmanaged<float, float, float, void>)loader(name);
            }

        }

        public readonly delegate* unmanaged<TriangleFace, void> CullFace;
        public readonly delegate* unmanaged<FrontFaceDirection, void> FrontFace;
        public readonly delegate* unmanaged<HintTarget, HintMode, void> Hint;
        public readonly delegate* unmanaged<float, void> LineWidth;
        public readonly delegate* unmanaged<float, void> PointSize;
        public readonly delegate* unmanaged<TriangleFace, PolygonMode, void> PolygonMode;
        public readonly delegate* unmanaged<int, int, int, int, void> Scissor;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, float, void> TexParameterf;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, float*, void> TexParameterfv;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int, void> TexParameteri;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int*, void> TexParameteriv;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*, void> TexImage1D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*, void> TexImage2D;
        public readonly delegate* unmanaged<DrawBufferMode, void> DrawBuffer;
        public readonly delegate* unmanaged<ClearBufferMask, void> Clear;
        public readonly delegate* unmanaged<float, float, float, float, void> ClearColor;
        public readonly delegate* unmanaged<int, void> ClearStencil;
        public readonly delegate* unmanaged<GLdouble, void> ClearDepth;
        public readonly delegate* unmanaged<uint, void> StencilMask;
        public readonly delegate* unmanaged<byte, byte, byte, byte, void> ColorMask;
        public readonly delegate* unmanaged<byte, void> DepthMask;
        public readonly delegate* unmanaged<EnableCap, void> Disable;
        public readonly delegate* unmanaged<EnableCap, void> Enable;
        public readonly delegate* unmanaged<void> Finish;
        public readonly delegate* unmanaged<void> Flush;
        public readonly delegate* unmanaged<BlendingFactor, BlendingFactor, void> BlendFunc;
        public readonly delegate* unmanaged<LogicOp, void> LogicOp;
        public readonly delegate* unmanaged<StencilFunction, int, uint, void> StencilFunc;
        public readonly delegate* unmanaged<StencilOp, StencilOp, StencilOp, void> StencilOp;
        public readonly delegate* unmanaged<DepthFunction, void> DepthFunc;
        public readonly delegate* unmanaged<PixelStoreParameter, float, void> PixelStoref;
        public readonly delegate* unmanaged<PixelStoreParameter, int, void> PixelStorei;
        public readonly delegate* unmanaged<ReadBufferMode, void> ReadBuffer;
        public readonly delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, void*, void> ReadPixels;
        public readonly delegate* unmanaged<GetPName, byte*, void> GetBooleanv;
        public readonly delegate* unmanaged<GetPName, GLdouble*, void> GetDoublev;
        public readonly delegate* unmanaged<ErrorCode> GetError;
        public readonly delegate* unmanaged<GetPName, float*, void> GetFloatv;
        public readonly delegate* unmanaged<GetPName, int*, void> GetIntegerv;
        public readonly delegate* unmanaged<StringName, GLubyte*> GetString;
        public readonly delegate* unmanaged<TextureTarget, int, PixelFormat, PixelType, void*, void> GetTexImage;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, float*, void> GetTexParameterfv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void> GetTexParameteriv;
        public readonly delegate* unmanaged<TextureTarget, int, GetTextureParameter, float*, void> GetTexLevelParameterfv;
        public readonly delegate* unmanaged<TextureTarget, int, GetTextureParameter, int*, void> GetTexLevelParameteriv;
        public readonly delegate* unmanaged<EnableCap, byte> IsEnabled;
        public readonly delegate* unmanaged<GLdouble, GLdouble, void> DepthRange;
        public readonly delegate* unmanaged<int, int, int, int, void> Viewport;
        public readonly delegate* unmanaged<uint, ListMode, void> NewList;
        public readonly delegate* unmanaged<void> EndList;
        public readonly delegate* unmanaged<uint, void> CallList;
        public readonly delegate* unmanaged<int, ListNameType, void*, void> CallLists;
        public readonly delegate* unmanaged<uint, int, void> DeleteLists;
        public readonly delegate* unmanaged<int, uint> GenLists;
        public readonly delegate* unmanaged<uint, void> ListBase;
        public readonly delegate* unmanaged<PrimitiveType, void> Begin;
        public readonly delegate* unmanaged<int, int, float, float, float, float, GLubyte*, void> Bitmap;
        public readonly delegate* unmanaged<GLbyte, GLbyte, GLbyte, void> Color3b;
        public readonly delegate* unmanaged<GLbyte*, void> Color3bv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> Color3d;
        public readonly delegate* unmanaged<GLdouble*, void> Color3dv;
        public readonly delegate* unmanaged<float, float, float, void> Color3f;
        public readonly delegate* unmanaged<float*, void> Color3fv;
        public readonly delegate* unmanaged<int, int, int, void> Color3i;
        public readonly delegate* unmanaged<int*, void> Color3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> Color3s;
        public readonly delegate* unmanaged<GLshort*, void> Color3sv;
        public readonly delegate* unmanaged<GLubyte, GLubyte, GLubyte, void> Color3ub;
        public readonly delegate* unmanaged<GLubyte*, void> Color3ubv;
        public readonly delegate* unmanaged<uint, uint, uint, void> Color3ui;
        public readonly delegate* unmanaged<uint*, void> Color3uiv;
        public readonly delegate* unmanaged<ushort, ushort, ushort, void> Color3us;
        public readonly delegate* unmanaged<ushort*, void> Color3usv;
        public readonly delegate* unmanaged<GLbyte, GLbyte, GLbyte, GLbyte, void> Color4b;
        public readonly delegate* unmanaged<GLbyte*, void> Color4bv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void> Color4d;
        public readonly delegate* unmanaged<GLdouble*, void> Color4dv;
        public readonly delegate* unmanaged<float, float, float, float, void> Color4f;
        public readonly delegate* unmanaged<float*, void> Color4fv;
        public readonly delegate* unmanaged<int, int, int, int, void> Color4i;
        public readonly delegate* unmanaged<int*, void> Color4iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void> Color4s;
        public readonly delegate* unmanaged<GLshort*, void> Color4sv;
        public readonly delegate* unmanaged<GLubyte, GLubyte, GLubyte, GLubyte, void> Color4ub;
        public readonly delegate* unmanaged<GLubyte*, void> Color4ubv;
        public readonly delegate* unmanaged<uint, uint, uint, uint, void> Color4ui;
        public readonly delegate* unmanaged<uint*, void> Color4uiv;
        public readonly delegate* unmanaged<ushort, ushort, ushort, ushort, void> Color4us;
        public readonly delegate* unmanaged<ushort*, void> Color4usv;
        public readonly delegate* unmanaged<byte, void> EdgeFlag;
        public readonly delegate* unmanaged<byte*, void> EdgeFlagv;
        public readonly delegate* unmanaged<void> End;
        public readonly delegate* unmanaged<GLdouble, void> Indexd;
        public readonly delegate* unmanaged<GLdouble*, void> Indexdv;
        public readonly delegate* unmanaged<float, void> Indexf;
        public readonly delegate* unmanaged<float*, void> Indexfv;
        public readonly delegate* unmanaged<int, void> Indexi;
        public readonly delegate* unmanaged<int*, void> Indexiv;
        public readonly delegate* unmanaged<GLshort, void> Indexs;
        public readonly delegate* unmanaged<GLshort*, void> Indexsv;
        public readonly delegate* unmanaged<GLbyte, GLbyte, GLbyte, void> Normal3b;
        public readonly delegate* unmanaged<GLbyte*, void> Normal3bv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> Normal3d;
        public readonly delegate* unmanaged<GLdouble*, void> Normal3dv;
        public readonly delegate* unmanaged<float, float, float, void> Normal3f;
        public readonly delegate* unmanaged<float*, void> Normal3fv;
        public readonly delegate* unmanaged<int, int, int, void> Normal3i;
        public readonly delegate* unmanaged<int*, void> Normal3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> Normal3s;
        public readonly delegate* unmanaged<GLshort*, void> Normal3sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, void> RasterPos2d;
        public readonly delegate* unmanaged<GLdouble*, void> RasterPos2dv;
        public readonly delegate* unmanaged<float, float, void> RasterPos2f;
        public readonly delegate* unmanaged<float*, void> RasterPos2fv;
        public readonly delegate* unmanaged<int, int, void> RasterPos2i;
        public readonly delegate* unmanaged<int*, void> RasterPos2iv;
        public readonly delegate* unmanaged<GLshort, GLshort, void> RasterPos2s;
        public readonly delegate* unmanaged<GLshort*, void> RasterPos2sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> RasterPos3d;
        public readonly delegate* unmanaged<GLdouble*, void> RasterPos3dv;
        public readonly delegate* unmanaged<float, float, float, void> RasterPos3f;
        public readonly delegate* unmanaged<float*, void> RasterPos3fv;
        public readonly delegate* unmanaged<int, int, int, void> RasterPos3i;
        public readonly delegate* unmanaged<int*, void> RasterPos3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> RasterPos3s;
        public readonly delegate* unmanaged<GLshort*, void> RasterPos3sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void> RasterPos4d;
        public readonly delegate* unmanaged<GLdouble*, void> RasterPos4dv;
        public readonly delegate* unmanaged<float, float, float, float, void> RasterPos4f;
        public readonly delegate* unmanaged<float*, void> RasterPos4fv;
        public readonly delegate* unmanaged<int, int, int, int, void> RasterPos4i;
        public readonly delegate* unmanaged<int*, void> RasterPos4iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void> RasterPos4s;
        public readonly delegate* unmanaged<GLshort*, void> RasterPos4sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void> Rectd;
        public readonly delegate* unmanaged<GLdouble*, GLdouble*, void> Rectdv;
        public readonly delegate* unmanaged<float, float, float, float, void> Rectf;
        public readonly delegate* unmanaged<float*, float*, void> Rectfv;
        public readonly delegate* unmanaged<int, int, int, int, void> Recti;
        public readonly delegate* unmanaged<int*, int*, void> Rectiv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void> Rects;
        public readonly delegate* unmanaged<GLshort*, GLshort*, void> Rectsv;
        public readonly delegate* unmanaged<GLdouble, void> TexCoord1d;
        public readonly delegate* unmanaged<GLdouble*, void> TexCoord1dv;
        public readonly delegate* unmanaged<float, void> TexCoord1f;
        public readonly delegate* unmanaged<float*, void> TexCoord1fv;
        public readonly delegate* unmanaged<int, void> TexCoord1i;
        public readonly delegate* unmanaged<int*, void> TexCoord1iv;
        public readonly delegate* unmanaged<GLshort, void> TexCoord1s;
        public readonly delegate* unmanaged<GLshort*, void> TexCoord1sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, void> TexCoord2d;
        public readonly delegate* unmanaged<GLdouble*, void> TexCoord2dv;
        public readonly delegate* unmanaged<float, float, void> TexCoord2f;
        public readonly delegate* unmanaged<float*, void> TexCoord2fv;
        public readonly delegate* unmanaged<int, int, void> TexCoord2i;
        public readonly delegate* unmanaged<int*, void> TexCoord2iv;
        public readonly delegate* unmanaged<GLshort, GLshort, void> TexCoord2s;
        public readonly delegate* unmanaged<GLshort*, void> TexCoord2sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> TexCoord3d;
        public readonly delegate* unmanaged<GLdouble*, void> TexCoord3dv;
        public readonly delegate* unmanaged<float, float, float, void> TexCoord3f;
        public readonly delegate* unmanaged<float*, void> TexCoord3fv;
        public readonly delegate* unmanaged<int, int, int, void> TexCoord3i;
        public readonly delegate* unmanaged<int*, void> TexCoord3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> TexCoord3s;
        public readonly delegate* unmanaged<GLshort*, void> TexCoord3sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void> TexCoord4d;
        public readonly delegate* unmanaged<GLdouble*, void> TexCoord4dv;
        public readonly delegate* unmanaged<float, float, float, float, void> TexCoord4f;
        public readonly delegate* unmanaged<float*, void> TexCoord4fv;
        public readonly delegate* unmanaged<int, int, int, int, void> TexCoord4i;
        public readonly delegate* unmanaged<int*, void> TexCoord4iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void> TexCoord4s;
        public readonly delegate* unmanaged<GLshort*, void> TexCoord4sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, void> Vertex2d;
        public readonly delegate* unmanaged<GLdouble*, void> Vertex2dv;
        public readonly delegate* unmanaged<float, float, void> Vertex2f;
        public readonly delegate* unmanaged<float*, void> Vertex2fv;
        public readonly delegate* unmanaged<int, int, void> Vertex2i;
        public readonly delegate* unmanaged<int*, void> Vertex2iv;
        public readonly delegate* unmanaged<GLshort, GLshort, void> Vertex2s;
        public readonly delegate* unmanaged<GLshort*, void> Vertex2sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> Vertex3d;
        public readonly delegate* unmanaged<GLdouble*, void> Vertex3dv;
        public readonly delegate* unmanaged<float, float, float, void> Vertex3f;
        public readonly delegate* unmanaged<float*, void> Vertex3fv;
        public readonly delegate* unmanaged<int, int, int, void> Vertex3i;
        public readonly delegate* unmanaged<int*, void> Vertex3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> Vertex3s;
        public readonly delegate* unmanaged<GLshort*, void> Vertex3sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void> Vertex4d;
        public readonly delegate* unmanaged<GLdouble*, void> Vertex4dv;
        public readonly delegate* unmanaged<float, float, float, float, void> Vertex4f;
        public readonly delegate* unmanaged<float*, void> Vertex4fv;
        public readonly delegate* unmanaged<int, int, int, int, void> Vertex4i;
        public readonly delegate* unmanaged<int*, void> Vertex4iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, GLshort, void> Vertex4s;
        public readonly delegate* unmanaged<GLshort*, void> Vertex4sv;
        public readonly delegate* unmanaged<ClipPlaneName, GLdouble*, void> ClipPlane;
        public readonly delegate* unmanaged<TriangleFace, ColorMaterialParameter, void> ColorMaterial;
        public readonly delegate* unmanaged<FogParameter, float, void> Fogf;
        public readonly delegate* unmanaged<FogParameter, float*, void> Fogfv;
        public readonly delegate* unmanaged<FogParameter, int, void> Fogi;
        public readonly delegate* unmanaged<FogParameter, int*, void> Fogiv;
        public readonly delegate* unmanaged<LightName, LightParameter, float, void> Lightf;
        public readonly delegate* unmanaged<LightName, LightParameter, float*, void> Lightfv;
        public readonly delegate* unmanaged<LightName, LightParameter, int, void> Lighti;
        public readonly delegate* unmanaged<LightName, LightParameter, int*, void> Lightiv;
        public readonly delegate* unmanaged<LightModelParameter, float, void> LightModelf;
        public readonly delegate* unmanaged<LightModelParameter, float*, void> LightModelfv;
        public readonly delegate* unmanaged<LightModelParameter, int, void> LightModeli;
        public readonly delegate* unmanaged<LightModelParameter, int*, void> LightModeliv;
        public readonly delegate* unmanaged<int, ushort, void> LineStipple;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, float, void> Materialf;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, float*, void> Materialfv;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, int, void> Materiali;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, int*, void> Materialiv;
        public readonly delegate* unmanaged<GLubyte*, void> PolygonStipple;
        public readonly delegate* unmanaged<ShadingModel, void> ShadeModel;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float, void> TexEnvf;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void> TexEnvfv;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int, void> TexEnvi;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void> TexEnviv;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, GLdouble, void> TexGend;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, GLdouble*, void> TexGendv;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, float, void> TexGenf;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, float*, void> TexGenfv;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, int, void> TexGeni;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, int*, void> TexGeniv;
        public readonly delegate* unmanaged<int, FeedbackType, float*, void> FeedbackBuffer;
        public readonly delegate* unmanaged<int, uint*, void> SelectBuffer;
        public readonly delegate* unmanaged<RenderingMode, int> RenderMode;
        public readonly delegate* unmanaged<void> InitNames;
        public readonly delegate* unmanaged<uint, void> LoadName;
        public readonly delegate* unmanaged<float, void> PassThrough;
        public readonly delegate* unmanaged<void> PopName;
        public readonly delegate* unmanaged<uint, void> PushName;
        public readonly delegate* unmanaged<float, float, float, float, void> ClearAccum;
        public readonly delegate* unmanaged<float, void> ClearIndex;
        public readonly delegate* unmanaged<uint, void> IndexMask;
        public readonly delegate* unmanaged<AccumOp, float, void> Accum;
        public readonly delegate* unmanaged<void> PopAttrib;
        public readonly delegate* unmanaged<AttribMask, void> PushAttrib;
        public readonly delegate* unmanaged<MapTarget, GLdouble, GLdouble, int, int, GLdouble*, void> Map1d;
        public readonly delegate* unmanaged<MapTarget, float, float, int, int, float*, void> Map1f;
        public readonly delegate* unmanaged<MapTarget, GLdouble, GLdouble, int, int, GLdouble, GLdouble, int, int, GLdouble*, void> Map2d;
        public readonly delegate* unmanaged<MapTarget, float, float, int, int, float, float, int, int, float*, void> Map2f;
        public readonly delegate* unmanaged<int, GLdouble, GLdouble, void> MapGrid1d;
        public readonly delegate* unmanaged<int, float, float, void> MapGrid1f;
        public readonly delegate* unmanaged<int, GLdouble, GLdouble, int, GLdouble, GLdouble, void> MapGrid2d;
        public readonly delegate* unmanaged<int, float, float, int, float, float, void> MapGrid2f;
        public readonly delegate* unmanaged<GLdouble, void> EvalCoord1d;
        public readonly delegate* unmanaged<GLdouble*, void> EvalCoord1dv;
        public readonly delegate* unmanaged<float, void> EvalCoord1f;
        public readonly delegate* unmanaged<float*, void> EvalCoord1fv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, void> EvalCoord2d;
        public readonly delegate* unmanaged<GLdouble*, void> EvalCoord2dv;
        public readonly delegate* unmanaged<float, float, void> EvalCoord2f;
        public readonly delegate* unmanaged<float*, void> EvalCoord2fv;
        public readonly delegate* unmanaged<MeshMode1, int, int, void> EvalMesh1;
        public readonly delegate* unmanaged<int, void> EvalPoint1;
        public readonly delegate* unmanaged<MeshMode2, int, int, int, int, void> EvalMesh2;
        public readonly delegate* unmanaged<int, int, void> EvalPoint2;
        public readonly delegate* unmanaged<AlphaFunction, float, void> AlphaFunc;
        public readonly delegate* unmanaged<float, float, void> PixelZoom;
        public readonly delegate* unmanaged<PixelTransferParameter, float, void> PixelTransferf;
        public readonly delegate* unmanaged<PixelTransferParameter, int, void> PixelTransferi;
        public readonly delegate* unmanaged<PixelMap, int, float*, void> PixelMapfv;
        public readonly delegate* unmanaged<PixelMap, int, uint*, void> PixelMapuiv;
        public readonly delegate* unmanaged<PixelMap, int, ushort*, void> PixelMapusv;
        public readonly delegate* unmanaged<int, int, int, int, PixelCopyType, void> CopyPixels;
        public readonly delegate* unmanaged<int, int, PixelFormat, PixelType, void*, void> DrawPixels;
        public readonly delegate* unmanaged<ClipPlaneName, GLdouble*, void> GetClipPlane;
        public readonly delegate* unmanaged<LightName, LightParameter, float*, void> GetLightfv;
        public readonly delegate* unmanaged<LightName, LightParameter, int*, void> GetLightiv;
        public readonly delegate* unmanaged<MapTarget, GetMapQuery, GLdouble*, void> GetMapdv;
        public readonly delegate* unmanaged<MapTarget, GetMapQuery, float*, void> GetMapfv;
        public readonly delegate* unmanaged<MapTarget, GetMapQuery, int*, void> GetMapiv;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, float*, void> GetMaterialfv;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, int*, void> GetMaterialiv;
        public readonly delegate* unmanaged<PixelMap, float*, void> GetPixelMapfv;
        public readonly delegate* unmanaged<PixelMap, uint*, void> GetPixelMapuiv;
        public readonly delegate* unmanaged<PixelMap, ushort*, void> GetPixelMapusv;
        public readonly delegate* unmanaged<GLubyte*, void> GetPolygonStipple;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void> GetTexEnvfv;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void> GetTexEnviv;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, GLdouble*, void> GetTexGendv;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, float*, void> GetTexGenfv;
        public readonly delegate* unmanaged<TextureCoordName, TextureGenParameter, int*, void> GetTexGeniv;
        public readonly delegate* unmanaged<uint, byte> IsList;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, void> Frustum;
        public readonly delegate* unmanaged<void> LoadIdentity;
        public readonly delegate* unmanaged<float*, void> LoadMatrixf;
        public readonly delegate* unmanaged<GLdouble*, void> LoadMatrixd;
        public readonly delegate* unmanaged<MatrixMode, void> MatrixMode;
        public readonly delegate* unmanaged<float*, void> MultMatrixf;
        public readonly delegate* unmanaged<GLdouble*, void> MultMatrixd;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, void> Ortho;
        public readonly delegate* unmanaged<void> PopMatrix;
        public readonly delegate* unmanaged<void> PushMatrix;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, GLdouble, void> Rotated;
        public readonly delegate* unmanaged<float, float, float, float, void> Rotatef;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> Scaled;
        public readonly delegate* unmanaged<float, float, float, void> Scalef;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> Translated;
        public readonly delegate* unmanaged<float, float, float, void> Translatef;
        public readonly delegate* unmanaged<PrimitiveType, int, int, void> DrawArrays;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, void> DrawElements;
        public readonly delegate* unmanaged<GetPointervPName, void**, void> GetPointerv;
        public readonly delegate* unmanaged<float, float, void> PolygonOffset;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void> CopyTexImage1D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void> CopyTexImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, void> CopyTexSubImage1D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, void> CopyTexSubImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, PixelFormat, PixelType, void*, void> TexSubImage1D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*, void> TexSubImage2D;
        public readonly delegate* unmanaged<TextureTarget, uint, void> BindTexture;
        public readonly delegate* unmanaged<int, uint*, void> DeleteTextures;
        public readonly delegate* unmanaged<int, uint*, void> GenTextures;
        public readonly delegate* unmanaged<uint, byte> IsTexture;
        public readonly delegate* unmanaged<int, void> ArrayElement;
        public readonly delegate* unmanaged<int, ColorPointerType, int, void*, void> ColorPointer;
        public readonly delegate* unmanaged<EnableCap, void> DisableClientState;
        public readonly delegate* unmanaged<int, void*, void> EdgeFlagPointer;
        public readonly delegate* unmanaged<EnableCap, void> EnableClientState;
        public readonly delegate* unmanaged<IndexPointerType, int, void*, void> IndexPointer;
        public readonly delegate* unmanaged<InterleavedArrayFormat, int, void*, void> InterleavedArrays;
        public readonly delegate* unmanaged<NormalPointerType, int, void*, void> NormalPointer;
        public readonly delegate* unmanaged<int, TexCoordPointerType, int, void*, void> TexCoordPointer;
        public readonly delegate* unmanaged<int, VertexPointerType, int, void*, void> VertexPointer;
        public readonly delegate* unmanaged<int, uint*, byte*, byte> AreTexturesResident;
        public readonly delegate* unmanaged<int, uint*, float*, void> PrioritizeTextures;
        public readonly delegate* unmanaged<GLubyte, void> Indexub;
        public readonly delegate* unmanaged<GLubyte*, void> Indexubv;
        public readonly delegate* unmanaged<void> PopClientAttrib;
        public readonly delegate* unmanaged<ClientAttribMask, void> PushClientAttrib;
        public readonly delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, void> DrawRangeElements;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*, void> TexImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void> TexSubImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, int, void> CopyTexSubImage3D;
        public readonly delegate* unmanaged<TextureUnit, void> ActiveTexture;
        public readonly delegate* unmanaged<float, byte, void> SampleCoverage;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void*, void> CompressedTexImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void*, void> CompressedTexImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, void*, void> CompressedTexImage1D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTexSubImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTexSubImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, InternalFormat, int, void*, void> CompressedTexSubImage1D;
        public readonly delegate* unmanaged<TextureTarget, int, void*, void> GetCompressedTexImage;
        public readonly delegate* unmanaged<TextureUnit, void> ClientActiveTexture;
        public readonly delegate* unmanaged<TextureUnit, GLdouble, void> MultiTexCoord1d;
        public readonly delegate* unmanaged<TextureUnit, GLdouble*, void> MultiTexCoord1dv;
        public readonly delegate* unmanaged<TextureUnit, float, void> MultiTexCoord1f;
        public readonly delegate* unmanaged<TextureUnit, float*, void> MultiTexCoord1fv;
        public readonly delegate* unmanaged<TextureUnit, int, void> MultiTexCoord1i;
        public readonly delegate* unmanaged<TextureUnit, int*, void> MultiTexCoord1iv;
        public readonly delegate* unmanaged<TextureUnit, GLshort, void> MultiTexCoord1s;
        public readonly delegate* unmanaged<TextureUnit, GLshort*, void> MultiTexCoord1sv;
        public readonly delegate* unmanaged<TextureUnit, GLdouble, GLdouble, void> MultiTexCoord2d;
        public readonly delegate* unmanaged<TextureUnit, GLdouble*, void> MultiTexCoord2dv;
        public readonly delegate* unmanaged<TextureUnit, float, float, void> MultiTexCoord2f;
        public readonly delegate* unmanaged<TextureUnit, float*, void> MultiTexCoord2fv;
        public readonly delegate* unmanaged<TextureUnit, int, int, void> MultiTexCoord2i;
        public readonly delegate* unmanaged<TextureUnit, int*, void> MultiTexCoord2iv;
        public readonly delegate* unmanaged<TextureUnit, GLshort, GLshort, void> MultiTexCoord2s;
        public readonly delegate* unmanaged<TextureUnit, GLshort*, void> MultiTexCoord2sv;
        public readonly delegate* unmanaged<TextureUnit, GLdouble, GLdouble, GLdouble, void> MultiTexCoord3d;
        public readonly delegate* unmanaged<TextureUnit, GLdouble*, void> MultiTexCoord3dv;
        public readonly delegate* unmanaged<TextureUnit, float, float, float, void> MultiTexCoord3f;
        public readonly delegate* unmanaged<TextureUnit, float*, void> MultiTexCoord3fv;
        public readonly delegate* unmanaged<TextureUnit, int, int, int, void> MultiTexCoord3i;
        public readonly delegate* unmanaged<TextureUnit, int*, void> MultiTexCoord3iv;
        public readonly delegate* unmanaged<TextureUnit, GLshort, GLshort, GLshort, void> MultiTexCoord3s;
        public readonly delegate* unmanaged<TextureUnit, GLshort*, void> MultiTexCoord3sv;
        public readonly delegate* unmanaged<TextureUnit, GLdouble, GLdouble, GLdouble, GLdouble, void> MultiTexCoord4d;
        public readonly delegate* unmanaged<TextureUnit, GLdouble*, void> MultiTexCoord4dv;
        public readonly delegate* unmanaged<TextureUnit, float, float, float, float, void> MultiTexCoord4f;
        public readonly delegate* unmanaged<TextureUnit, float*, void> MultiTexCoord4fv;
        public readonly delegate* unmanaged<TextureUnit, int, int, int, int, void> MultiTexCoord4i;
        public readonly delegate* unmanaged<TextureUnit, int*, void> MultiTexCoord4iv;
        public readonly delegate* unmanaged<TextureUnit, GLshort, GLshort, GLshort, GLshort, void> MultiTexCoord4s;
        public readonly delegate* unmanaged<TextureUnit, GLshort*, void> MultiTexCoord4sv;
        public readonly delegate* unmanaged<float*, void> LoadTransposeMatrixf;
        public readonly delegate* unmanaged<GLdouble*, void> LoadTransposeMatrixd;
        public readonly delegate* unmanaged<float*, void> MultTransposeMatrixf;
        public readonly delegate* unmanaged<GLdouble*, void> MultTransposeMatrixd;
        public readonly delegate* unmanaged<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> BlendFuncSeparate;
        public readonly delegate* unmanaged<PrimitiveType, int*, int*, int, void> MultiDrawArrays;
        public readonly delegate* unmanaged<PrimitiveType, int*, DrawElementsType, void**, int, void> MultiDrawElements;
        public readonly delegate* unmanaged<PointParameterNameARB, float, void> PointParameterf;
        public readonly delegate* unmanaged<PointParameterNameARB, float*, void> PointParameterfv;
        public readonly delegate* unmanaged<PointParameterNameARB, int, void> PointParameteri;
        public readonly delegate* unmanaged<PointParameterNameARB, int*, void> PointParameteriv;
        public readonly delegate* unmanaged<float, void> FogCoordf;
        public readonly delegate* unmanaged<float*, void> FogCoordfv;
        public readonly delegate* unmanaged<GLdouble, void> FogCoordd;
        public readonly delegate* unmanaged<GLdouble*, void> FogCoorddv;
        public readonly delegate* unmanaged<FogPointerTypeEXT, int, void*, void> FogCoordPointer;
        public readonly delegate* unmanaged<GLbyte, GLbyte, GLbyte, void> SecondaryColor3b;
        public readonly delegate* unmanaged<GLbyte*, void> SecondaryColor3bv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> SecondaryColor3d;
        public readonly delegate* unmanaged<GLdouble*, void> SecondaryColor3dv;
        public readonly delegate* unmanaged<float, float, float, void> SecondaryColor3f;
        public readonly delegate* unmanaged<float*, void> SecondaryColor3fv;
        public readonly delegate* unmanaged<int, int, int, void> SecondaryColor3i;
        public readonly delegate* unmanaged<int*, void> SecondaryColor3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> SecondaryColor3s;
        public readonly delegate* unmanaged<GLshort*, void> SecondaryColor3sv;
        public readonly delegate* unmanaged<GLubyte, GLubyte, GLubyte, void> SecondaryColor3ub;
        public readonly delegate* unmanaged<GLubyte*, void> SecondaryColor3ubv;
        public readonly delegate* unmanaged<uint, uint, uint, void> SecondaryColor3ui;
        public readonly delegate* unmanaged<uint*, void> SecondaryColor3uiv;
        public readonly delegate* unmanaged<ushort, ushort, ushort, void> SecondaryColor3us;
        public readonly delegate* unmanaged<ushort*, void> SecondaryColor3usv;
        public readonly delegate* unmanaged<int, ColorPointerType, int, void*, void> SecondaryColorPointer;
        public readonly delegate* unmanaged<GLdouble, GLdouble, void> WindowPos2d;
        public readonly delegate* unmanaged<GLdouble*, void> WindowPos2dv;
        public readonly delegate* unmanaged<float, float, void> WindowPos2f;
        public readonly delegate* unmanaged<float*, void> WindowPos2fv;
        public readonly delegate* unmanaged<int, int, void> WindowPos2i;
        public readonly delegate* unmanaged<int*, void> WindowPos2iv;
        public readonly delegate* unmanaged<GLshort, GLshort, void> WindowPos2s;
        public readonly delegate* unmanaged<GLshort*, void> WindowPos2sv;
        public readonly delegate* unmanaged<GLdouble, GLdouble, GLdouble, void> WindowPos3d;
        public readonly delegate* unmanaged<GLdouble*, void> WindowPos3dv;
        public readonly delegate* unmanaged<float, float, float, void> WindowPos3f;
        public readonly delegate* unmanaged<float*, void> WindowPos3fv;
        public readonly delegate* unmanaged<int, int, int, void> WindowPos3i;
        public readonly delegate* unmanaged<int*, void> WindowPos3iv;
        public readonly delegate* unmanaged<GLshort, GLshort, GLshort, void> WindowPos3s;
        public readonly delegate* unmanaged<GLshort*, void> WindowPos3sv;
        public readonly delegate* unmanaged<float, float, float, float, void> BlendColor;
        public readonly delegate* unmanaged<BlendEquationModeEXT, void> BlendEquation;
        public readonly delegate* unmanaged<int, uint*, void> GenQueries;
        public readonly delegate* unmanaged<int, uint*, void> DeleteQueries;
        public readonly delegate* unmanaged<uint, byte> IsQuery;
        public readonly delegate* unmanaged<QueryTarget, uint, void> BeginQuery;
        public readonly delegate* unmanaged<QueryTarget, void> EndQuery;
        public readonly delegate* unmanaged<QueryTarget, QueryParameterName, int*, void> GetQueryiv;
        public readonly delegate* unmanaged<uint, QueryObjectParameterName, int*, void> GetQueryObjectiv;
        public readonly delegate* unmanaged<uint, QueryObjectParameterName, uint*, void> GetQueryObjectuiv;
        public readonly delegate* unmanaged<BufferTargetARB, uint, void> BindBuffer;
        public readonly delegate* unmanaged<int, uint*, void> DeleteBuffers;
        public readonly delegate* unmanaged<int, uint*, void> GenBuffers;
        public readonly delegate* unmanaged<uint, byte> IsBuffer;
        public readonly delegate* unmanaged<BufferTargetARB, GLsizeiptr, void*, BufferUsageARB, void> BufferData;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void> BufferSubData;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void> GetBufferSubData;
        public readonly delegate* unmanaged<BufferTargetARB, BufferAccessARB, void*> MapBuffer;
        public readonly delegate* unmanaged<BufferTargetARB, byte> UnmapBuffer;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPNameARB, int*, void> GetBufferParameteriv;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPointerNameARB, void**, void> GetBufferPointerv;
        public readonly delegate* unmanaged<BlendEquationModeEXT, BlendEquationModeEXT, void> BlendEquationSeparate;
        public readonly delegate* unmanaged<int, DrawBufferMode*, void> DrawBuffers;
        public readonly delegate* unmanaged<TriangleFace, StencilOp, StencilOp, StencilOp, void> StencilOpSeparate;
        public readonly delegate* unmanaged<TriangleFace, StencilFunction, int, uint, void> StencilFuncSeparate;
        public readonly delegate* unmanaged<TriangleFace, uint, void> StencilMaskSeparate;
        public readonly delegate* unmanaged<uint, uint, void> AttachShader;
        public readonly delegate* unmanaged<uint, uint, GLchar*, void> BindAttribLocation;
        public readonly delegate* unmanaged<uint, void> CompileShader;
        public readonly delegate* unmanaged<uint> CreateProgram;
        public readonly delegate* unmanaged<ShaderType, uint> CreateShader;
        public readonly delegate* unmanaged<uint, void> DeleteProgram;
        public readonly delegate* unmanaged<uint, void> DeleteShader;
        public readonly delegate* unmanaged<uint, uint, void> DetachShader;
        public readonly delegate* unmanaged<uint, void> DisableVertexAttribArray;
        public readonly delegate* unmanaged<uint, void> EnableVertexAttribArray;
        public readonly delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void> GetActiveAttrib;
        public readonly delegate* unmanaged<uint, uint, int, int*, int*, UniformType*, GLchar*, void> GetActiveUniform;
        public readonly delegate* unmanaged<uint, int, int*, uint*, void> GetAttachedShaders;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetAttribLocation;
        public readonly delegate* unmanaged<uint, ProgramPropertyARB, int*, void> GetProgramiv;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetProgramInfoLog;
        public readonly delegate* unmanaged<uint, ShaderParameterName, int*, void> GetShaderiv;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetShaderInfoLog;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetShaderSource;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetUniformLocation;
        public readonly delegate* unmanaged<uint, int, float*, void> GetUniformfv;
        public readonly delegate* unmanaged<uint, int, int*, void> GetUniformiv;
        public readonly delegate* unmanaged<uint, VertexAttribPropertyARB, GLdouble*, void> GetVertexAttribdv;
        public readonly delegate* unmanaged<uint, VertexAttribPropertyARB, float*, void> GetVertexAttribfv;
        public readonly delegate* unmanaged<uint, VertexAttribPropertyARB, int*, void> GetVertexAttribiv;
        public readonly delegate* unmanaged<uint, VertexAttribPointerPropertyARB, void**, void> GetVertexAttribPointerv;
        public readonly delegate* unmanaged<uint, byte> IsProgram;
        public readonly delegate* unmanaged<uint, byte> IsShader;
        public readonly delegate* unmanaged<uint, void> LinkProgram;
        public readonly delegate* unmanaged<uint, int, GLchar**, int*, void> ShaderSource;
        public readonly delegate* unmanaged<uint, void> UseProgram;
        public readonly delegate* unmanaged<int, float, void> Uniform1f;
        public readonly delegate* unmanaged<int, float, float, void> Uniform2f;
        public readonly delegate* unmanaged<int, float, float, float, void> Uniform3f;
        public readonly delegate* unmanaged<int, float, float, float, float, void> Uniform4f;
        public readonly delegate* unmanaged<int, int, void> Uniform1i;
        public readonly delegate* unmanaged<int, int, int, void> Uniform2i;
        public readonly delegate* unmanaged<int, int, int, int, void> Uniform3i;
        public readonly delegate* unmanaged<int, int, int, int, int, void> Uniform4i;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform1fv;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform2fv;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform3fv;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform4fv;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform1iv;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform2iv;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform3iv;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform4iv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix2fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix3fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix4fv;
        public readonly delegate* unmanaged<uint, void> ValidateProgram;
        public readonly delegate* unmanaged<uint, GLdouble, void> VertexAttrib1d;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttrib1dv;
        public readonly delegate* unmanaged<uint, float, void> VertexAttrib1f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib1fv;
        public readonly delegate* unmanaged<uint, GLshort, void> VertexAttrib1s;
        public readonly delegate* unmanaged<uint, GLshort*, void> VertexAttrib1sv;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, void> VertexAttrib2d;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttrib2dv;
        public readonly delegate* unmanaged<uint, float, float, void> VertexAttrib2f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib2fv;
        public readonly delegate* unmanaged<uint, GLshort, GLshort, void> VertexAttrib2s;
        public readonly delegate* unmanaged<uint, GLshort*, void> VertexAttrib2sv;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, void> VertexAttrib3d;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttrib3dv;
        public readonly delegate* unmanaged<uint, float, float, float, void> VertexAttrib3f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib3fv;
        public readonly delegate* unmanaged<uint, GLshort, GLshort, GLshort, void> VertexAttrib3s;
        public readonly delegate* unmanaged<uint, GLshort*, void> VertexAttrib3sv;
        public readonly delegate* unmanaged<uint, GLbyte*, void> VertexAttrib4Nbv;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttrib4Niv;
        public readonly delegate* unmanaged<uint, GLshort*, void> VertexAttrib4Nsv;
        public readonly delegate* unmanaged<uint, GLubyte, GLubyte, GLubyte, GLubyte, void> VertexAttrib4Nub;
        public readonly delegate* unmanaged<uint, GLubyte*, void> VertexAttrib4Nubv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttrib4Nuiv;
        public readonly delegate* unmanaged<uint, ushort*, void> VertexAttrib4Nusv;
        public readonly delegate* unmanaged<uint, GLbyte*, void> VertexAttrib4bv;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, GLdouble, void> VertexAttrib4d;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttrib4dv;
        public readonly delegate* unmanaged<uint, float, float, float, float, void> VertexAttrib4f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib4fv;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttrib4iv;
        public readonly delegate* unmanaged<uint, GLshort, GLshort, GLshort, GLshort, void> VertexAttrib4s;
        public readonly delegate* unmanaged<uint, GLshort*, void> VertexAttrib4sv;
        public readonly delegate* unmanaged<uint, GLubyte*, void> VertexAttrib4ubv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttrib4uiv;
        public readonly delegate* unmanaged<uint, ushort*, void> VertexAttrib4usv;
        public readonly delegate* unmanaged<uint, int, VertexAttribPointerType, byte, int, void*, void> VertexAttribPointer;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix2x3fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix3x2fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix2x4fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix4x2fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix3x4fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix4x3fv;
        public readonly delegate* unmanaged<uint, byte, byte, byte, byte, void> ColorMaski;
        public readonly delegate* unmanaged<BufferTargetARB, uint, byte*, void> GetBooleani_v;
        public readonly delegate* unmanaged<GetPName, uint, int*, void> GetIntegeri_v;
        public readonly delegate* unmanaged<EnableCap, uint, void> Enablei;
        public readonly delegate* unmanaged<EnableCap, uint, void> Disablei;
        public readonly delegate* unmanaged<EnableCap, uint, byte> IsEnabledi;
        public readonly delegate* unmanaged<PrimitiveType, void> BeginTransformFeedback;
        public readonly delegate* unmanaged<void> EndTransformFeedback;
        public readonly delegate* unmanaged<BufferTargetARB, uint, uint, GLintptr, GLsizeiptr, void> BindBufferRange;
        public readonly delegate* unmanaged<BufferTargetARB, uint, uint, void> BindBufferBase;
        public readonly delegate* unmanaged<uint, int, GLchar**, TransformFeedbackBufferMode, void> TransformFeedbackVaryings;
        public readonly delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void> GetTransformFeedbackVarying;
        public readonly delegate* unmanaged<ClampColorTargetARB, ClampColorModeARB, void> ClampColor;
        public readonly delegate* unmanaged<uint, ConditionalRenderMode, void> BeginConditionalRender;
        public readonly delegate* unmanaged<void> EndConditionalRender;
        public readonly delegate* unmanaged<uint, int, VertexAttribIType, int, void*, void> VertexAttribIPointer;
        public readonly delegate* unmanaged<uint, VertexAttribEnum, int*, void> GetVertexAttribIiv;
        public readonly delegate* unmanaged<uint, VertexAttribEnum, uint*, void> GetVertexAttribIuiv;
        public readonly delegate* unmanaged<uint, int, void> VertexAttribI1i;
        public readonly delegate* unmanaged<uint, int, int, void> VertexAttribI2i;
        public readonly delegate* unmanaged<uint, int, int, int, void> VertexAttribI3i;
        public readonly delegate* unmanaged<uint, int, int, int, int, void> VertexAttribI4i;
        public readonly delegate* unmanaged<uint, uint, void> VertexAttribI1ui;
        public readonly delegate* unmanaged<uint, uint, uint, void> VertexAttribI2ui;
        public readonly delegate* unmanaged<uint, uint, uint, uint, void> VertexAttribI3ui;
        public readonly delegate* unmanaged<uint, uint, uint, uint, uint, void> VertexAttribI4ui;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttribI1iv;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttribI2iv;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttribI3iv;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttribI4iv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttribI1uiv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttribI2uiv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttribI3uiv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttribI4uiv;
        public readonly delegate* unmanaged<uint, GLbyte*, void> VertexAttribI4bv;
        public readonly delegate* unmanaged<uint, GLshort*, void> VertexAttribI4sv;
        public readonly delegate* unmanaged<uint, GLubyte*, void> VertexAttribI4ubv;
        public readonly delegate* unmanaged<uint, ushort*, void> VertexAttribI4usv;
        public readonly delegate* unmanaged<uint, int, uint*, void> GetUniformuiv;
        public readonly delegate* unmanaged<uint, uint, GLchar*, void> BindFragDataLocation;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetFragDataLocation;
        public readonly delegate* unmanaged<int, uint, void> Uniform1ui;
        public readonly delegate* unmanaged<int, uint, uint, void> Uniform2ui;
        public readonly delegate* unmanaged<int, uint, uint, uint, void> Uniform3ui;
        public readonly delegate* unmanaged<int, uint, uint, uint, uint, void> Uniform4ui;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform1uiv;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform2uiv;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform3uiv;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform4uiv;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int*, void> TexParameterIiv;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, uint*, void> TexParameterIuiv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void> GetTexParameterIiv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, uint*, void> GetTexParameterIuiv;
        public readonly delegate* unmanaged<Buffer, int, int*, void> ClearBufferiv;
        public readonly delegate* unmanaged<Buffer, int, uint*, void> ClearBufferuiv;
        public readonly delegate* unmanaged<Buffer, int, float*, void> ClearBufferfv;
        public readonly delegate* unmanaged<Buffer, int, float, int, void> ClearBufferfi;
        public readonly delegate* unmanaged<StringName, uint, GLubyte*> GetStringi;
        public readonly delegate* unmanaged<uint, byte> IsRenderbuffer;
        public readonly delegate* unmanaged<RenderbufferTarget, uint, void> BindRenderbuffer;
        public readonly delegate* unmanaged<int, uint*, void> DeleteRenderbuffers;
        public readonly delegate* unmanaged<int, uint*, void> GenRenderbuffers;
        public readonly delegate* unmanaged<RenderbufferTarget, InternalFormat, int, int, void> RenderbufferStorage;
        public readonly delegate* unmanaged<RenderbufferTarget, RenderbufferParameterName, int*, void> GetRenderbufferParameteriv;
        public readonly delegate* unmanaged<uint, byte> IsFramebuffer;
        public readonly delegate* unmanaged<FramebufferTarget, uint, void> BindFramebuffer;
        public readonly delegate* unmanaged<int, uint*, void> DeleteFramebuffers;
        public readonly delegate* unmanaged<int, uint*, void> GenFramebuffers;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferStatus> CheckFramebufferStatus;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> FramebufferTexture1D;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> FramebufferTexture2D;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> FramebufferTexture3D;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void> FramebufferRenderbuffer;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*, void> GetFramebufferAttachmentParameteriv;
        public readonly delegate* unmanaged<TextureTarget, void> GenerateMipmap;
        public readonly delegate* unmanaged<int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void> BlitFramebuffer;
        public readonly delegate* unmanaged<RenderbufferTarget, int, InternalFormat, int, int, void> RenderbufferStorageMultisample;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, int, void> FramebufferTextureLayer;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, MapBufferAccessMask, void*> MapBufferRange;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void> FlushMappedBufferRange;
        public readonly delegate* unmanaged<uint, void> BindVertexArray;
        public readonly delegate* unmanaged<int, uint*, void> DeleteVertexArrays;
        public readonly delegate* unmanaged<int, uint*, void> GenVertexArrays;
        public readonly delegate* unmanaged<uint, byte> IsVertexArray;
        public readonly delegate* unmanaged<PrimitiveType, int, int, int, void> DrawArraysInstanced;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void> DrawElementsInstanced;
        public readonly delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, void> TexBuffer;
        public readonly delegate* unmanaged<uint, void> PrimitiveRestartIndex;
        public readonly delegate* unmanaged<CopyBufferSubDataTarget, CopyBufferSubDataTarget, GLintptr, GLintptr, GLsizeiptr, void> CopyBufferSubData;
        public readonly delegate* unmanaged<uint, int, GLchar**, uint*, void> GetUniformIndices;
        public readonly delegate* unmanaged<uint, int, uint*, UniformPName, int*, void> GetActiveUniformsiv;
        public readonly delegate* unmanaged<uint, uint, int, int*, GLchar*, void> GetActiveUniformName;
        public readonly delegate* unmanaged<uint, GLchar*, uint> GetUniformBlockIndex;
        public readonly delegate* unmanaged<uint, uint, UniformBlockPName, int*, void> GetActiveUniformBlockiv;
        public readonly delegate* unmanaged<uint, uint, int, int*, GLchar*, void> GetActiveUniformBlockName;
        public readonly delegate* unmanaged<uint, uint, uint, void> UniformBlockBinding;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void> DrawElementsBaseVertex;
        public readonly delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, int, void> DrawRangeElementsBaseVertex;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, int, void> DrawElementsInstancedBaseVertex;
        public readonly delegate* unmanaged<PrimitiveType, int*, DrawElementsType, void**, int, int*, void> MultiDrawElementsBaseVertex;
        public readonly delegate* unmanaged<VertexProvokingMode, void> ProvokingVertex;
        public readonly delegate* unmanaged<SyncCondition, SyncBehaviorFlags, GLsync> FenceSync;
        public readonly delegate* unmanaged<GLsync, byte> IsSync;
        public readonly delegate* unmanaged<GLsync, void> DeleteSync;
        public readonly delegate* unmanaged<GLsync, SyncObjectMask, GLuint64, SyncStatus> ClientWaitSync;
        public readonly delegate* unmanaged<GLsync, SyncBehaviorFlags, GLuint64, void> WaitSync;
        public readonly delegate* unmanaged<GetPName, GLint64*, void> GetInteger64v;
        public readonly delegate* unmanaged<GLsync, SyncParameterName, int, int*, int*, void> GetSynciv;
        public readonly delegate* unmanaged<GetPName, uint, GLint64*, void> GetInteger64i_v;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPNameARB, GLint64*, void> GetBufferParameteri64v;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, void> FramebufferTexture;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, byte, void> TexImage2DMultisample;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, byte, void> TexImage3DMultisample;
        public readonly delegate* unmanaged<GetMultisamplePNameNV, uint, float*, void> GetMultisamplefv;
        public readonly delegate* unmanaged<uint, uint, void> SampleMaski;
        public readonly delegate* unmanaged<uint, uint, uint, GLchar*, void> BindFragDataLocationIndexed;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetFragDataIndex;
        public readonly delegate* unmanaged<int, uint*, void> GenSamplers;
        public readonly delegate* unmanaged<int, uint*, void> DeleteSamplers;
        public readonly delegate* unmanaged<uint, byte> IsSampler;
        public readonly delegate* unmanaged<uint, uint, void> BindSampler;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int, void> SamplerParameteri;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> SamplerParameteriv;
        public readonly delegate* unmanaged<uint, SamplerParameterF, float, void> SamplerParameterf;
        public readonly delegate* unmanaged<uint, SamplerParameterF, float*, void> SamplerParameterfv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> SamplerParameterIiv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, uint*, void> SamplerParameterIuiv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> GetSamplerParameteriv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> GetSamplerParameterIiv;
        public readonly delegate* unmanaged<uint, SamplerParameterF, float*, void> GetSamplerParameterfv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, uint*, void> GetSamplerParameterIuiv;
        public readonly delegate* unmanaged<uint, QueryCounterTarget, void> QueryCounter;
        public readonly delegate* unmanaged<uint, QueryObjectParameterName, GLint64*, void> GetQueryObjecti64v;
        public readonly delegate* unmanaged<uint, QueryObjectParameterName, GLuint64*, void> GetQueryObjectui64v;
        public readonly delegate* unmanaged<uint, uint, void> VertexAttribDivisor;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void> VertexAttribP1ui;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void> VertexAttribP1uiv;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void> VertexAttribP2ui;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void> VertexAttribP2uiv;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void> VertexAttribP3ui;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void> VertexAttribP3uiv;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint, void> VertexAttribP4ui;
        public readonly delegate* unmanaged<uint, VertexAttribPointerType, byte, uint*, void> VertexAttribP4uiv;
        public readonly delegate* unmanaged<VertexPointerType, uint, void> VertexP2ui;
        public readonly delegate* unmanaged<VertexPointerType, uint*, void> VertexP2uiv;
        public readonly delegate* unmanaged<VertexPointerType, uint, void> VertexP3ui;
        public readonly delegate* unmanaged<VertexPointerType, uint*, void> VertexP3uiv;
        public readonly delegate* unmanaged<VertexPointerType, uint, void> VertexP4ui;
        public readonly delegate* unmanaged<VertexPointerType, uint*, void> VertexP4uiv;
        public readonly delegate* unmanaged<TexCoordPointerType, uint, void> TexCoordP1ui;
        public readonly delegate* unmanaged<TexCoordPointerType, uint*, void> TexCoordP1uiv;
        public readonly delegate* unmanaged<TexCoordPointerType, uint, void> TexCoordP2ui;
        public readonly delegate* unmanaged<TexCoordPointerType, uint*, void> TexCoordP2uiv;
        public readonly delegate* unmanaged<TexCoordPointerType, uint, void> TexCoordP3ui;
        public readonly delegate* unmanaged<TexCoordPointerType, uint*, void> TexCoordP3uiv;
        public readonly delegate* unmanaged<TexCoordPointerType, uint, void> TexCoordP4ui;
        public readonly delegate* unmanaged<TexCoordPointerType, uint*, void> TexCoordP4uiv;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void> MultiTexCoordP1ui;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void> MultiTexCoordP1uiv;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void> MultiTexCoordP2ui;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void> MultiTexCoordP2uiv;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void> MultiTexCoordP3ui;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void> MultiTexCoordP3uiv;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint, void> MultiTexCoordP4ui;
        public readonly delegate* unmanaged<TextureUnit, TexCoordPointerType, uint*, void> MultiTexCoordP4uiv;
        public readonly delegate* unmanaged<NormalPointerType, uint, void> NormalP3ui;
        public readonly delegate* unmanaged<NormalPointerType, uint*, void> NormalP3uiv;
        public readonly delegate* unmanaged<ColorPointerType, uint, void> ColorP3ui;
        public readonly delegate* unmanaged<ColorPointerType, uint*, void> ColorP3uiv;
        public readonly delegate* unmanaged<ColorPointerType, uint, void> ColorP4ui;
        public readonly delegate* unmanaged<ColorPointerType, uint*, void> ColorP4uiv;
        public readonly delegate* unmanaged<ColorPointerType, uint, void> SecondaryColorP3ui;
        public readonly delegate* unmanaged<ColorPointerType, uint*, void> SecondaryColorP3uiv;
        public readonly delegate* unmanaged<float, void> MinSampleShading;
        public readonly delegate* unmanaged<uint, BlendEquationModeEXT, void> BlendEquationi;
        public readonly delegate* unmanaged<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> BlendEquationSeparatei;
        public readonly delegate* unmanaged<uint, BlendingFactor, BlendingFactor, void> BlendFunci;
        public readonly delegate* unmanaged<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> BlendFuncSeparatei;
        public readonly delegate* unmanaged<PrimitiveType, void*, void> DrawArraysIndirect;
        public readonly delegate* unmanaged<PrimitiveType, DrawElementsType, void*, void> DrawElementsIndirect;
        public readonly delegate* unmanaged<int, GLdouble, void> Uniform1d;
        public readonly delegate* unmanaged<int, GLdouble, GLdouble, void> Uniform2d;
        public readonly delegate* unmanaged<int, GLdouble, GLdouble, GLdouble, void> Uniform3d;
        public readonly delegate* unmanaged<int, GLdouble, GLdouble, GLdouble, GLdouble, void> Uniform4d;
        public readonly delegate* unmanaged<int, int, GLdouble*, void> Uniform1dv;
        public readonly delegate* unmanaged<int, int, GLdouble*, void> Uniform2dv;
        public readonly delegate* unmanaged<int, int, GLdouble*, void> Uniform3dv;
        public readonly delegate* unmanaged<int, int, GLdouble*, void> Uniform4dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix2dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix3dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix4dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix2x3dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix2x4dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix3x2dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix3x4dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix4x2dv;
        public readonly delegate* unmanaged<int, int, byte, GLdouble*, void> UniformMatrix4x3dv;
        public readonly delegate* unmanaged<uint, int, GLdouble*, void> GetUniformdv;
        public readonly delegate* unmanaged<uint, ShaderType, GLchar*, int> GetSubroutineUniformLocation;
        public readonly delegate* unmanaged<uint, ShaderType, GLchar*, uint> GetSubroutineIndex;
        public readonly delegate* unmanaged<uint, ShaderType, uint, SubroutineParameterName, int*, void> GetActiveSubroutineUniformiv;
        public readonly delegate* unmanaged<uint, ShaderType, uint, int, int*, GLchar*, void> GetActiveSubroutineUniformName;
        public readonly delegate* unmanaged<uint, ShaderType, uint, int, int*, GLchar*, void> GetActiveSubroutineName;
        public readonly delegate* unmanaged<ShaderType, int, uint*, void> UniformSubroutinesuiv;
        public readonly delegate* unmanaged<ShaderType, int, uint*, void> GetUniformSubroutineuiv;
        public readonly delegate* unmanaged<uint, ShaderType, ProgramStagePName, int*, void> GetProgramStageiv;
        public readonly delegate* unmanaged<PatchParameterName, int, void> PatchParameteri;
        public readonly delegate* unmanaged<PatchParameterName, float*, void> PatchParameterfv;
        public readonly delegate* unmanaged<BindTransformFeedbackTarget, uint, void> BindTransformFeedback;
        public readonly delegate* unmanaged<int, uint*, void> DeleteTransformFeedbacks;
        public readonly delegate* unmanaged<int, uint*, void> GenTransformFeedbacks;
        public readonly delegate* unmanaged<uint, byte> IsTransformFeedback;
        public readonly delegate* unmanaged<void> PauseTransformFeedback;
        public readonly delegate* unmanaged<void> ResumeTransformFeedback;
        public readonly delegate* unmanaged<PrimitiveType, uint, void> DrawTransformFeedback;
        public readonly delegate* unmanaged<PrimitiveType, uint, uint, void> DrawTransformFeedbackStream;
        public readonly delegate* unmanaged<QueryTarget, uint, uint, void> BeginQueryIndexed;
        public readonly delegate* unmanaged<QueryTarget, uint, void> EndQueryIndexed;
        public readonly delegate* unmanaged<QueryTarget, uint, QueryParameterName, int*, void> GetQueryIndexediv;
        public readonly delegate* unmanaged<void> ReleaseShaderCompiler;
        public readonly delegate* unmanaged<int, uint*, ShaderBinaryFormat, void*, int, void> ShaderBinary;
        public readonly delegate* unmanaged<ShaderType, PrecisionType, int*, int*, void> GetShaderPrecisionFormat;
        public readonly delegate* unmanaged<float, float, void> DepthRangef;
        public readonly delegate* unmanaged<float, void> ClearDepthf;
        public readonly delegate* unmanaged<uint, int, int*, uint*, void*, void> GetProgramBinary;
        public readonly delegate* unmanaged<uint, uint, void*, int, void> ProgramBinary;
        public readonly delegate* unmanaged<uint, ProgramParameterPName, int, void> ProgramParameteri;
        public readonly delegate* unmanaged<uint, UseProgramStageMask, uint, void> UseProgramStages;
        public readonly delegate* unmanaged<uint, uint, void> ActiveShaderProgram;
        public readonly delegate* unmanaged<ShaderType, int, GLchar**, uint> CreateShaderProgramv;
        public readonly delegate* unmanaged<uint, void> BindProgramPipeline;
        public readonly delegate* unmanaged<int, uint*, void> DeleteProgramPipelines;
        public readonly delegate* unmanaged<int, uint*, void> GenProgramPipelines;
        public readonly delegate* unmanaged<uint, byte> IsProgramPipeline;
        public readonly delegate* unmanaged<uint, PipelineParameterName, int*, void> GetProgramPipelineiv;
        public readonly delegate* unmanaged<uint, int, int, void> ProgramUniform1i;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform1iv;
        public readonly delegate* unmanaged<uint, int, float, void> ProgramUniform1f;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform1fv;
        public readonly delegate* unmanaged<uint, int, GLdouble, void> ProgramUniform1d;
        public readonly delegate* unmanaged<uint, int, int, GLdouble*, void> ProgramUniform1dv;
        public readonly delegate* unmanaged<uint, int, uint, void> ProgramUniform1ui;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform1uiv;
        public readonly delegate* unmanaged<uint, int, int, int, void> ProgramUniform2i;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform2iv;
        public readonly delegate* unmanaged<uint, int, float, float, void> ProgramUniform2f;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform2fv;
        public readonly delegate* unmanaged<uint, int, GLdouble, GLdouble, void> ProgramUniform2d;
        public readonly delegate* unmanaged<uint, int, int, GLdouble*, void> ProgramUniform2dv;
        public readonly delegate* unmanaged<uint, int, uint, uint, void> ProgramUniform2ui;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform2uiv;
        public readonly delegate* unmanaged<uint, int, int, int, int, void> ProgramUniform3i;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform3iv;
        public readonly delegate* unmanaged<uint, int, float, float, float, void> ProgramUniform3f;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform3fv;
        public readonly delegate* unmanaged<uint, int, GLdouble, GLdouble, GLdouble, void> ProgramUniform3d;
        public readonly delegate* unmanaged<uint, int, int, GLdouble*, void> ProgramUniform3dv;
        public readonly delegate* unmanaged<uint, int, uint, uint, uint, void> ProgramUniform3ui;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform3uiv;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, void> ProgramUniform4i;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform4iv;
        public readonly delegate* unmanaged<uint, int, float, float, float, float, void> ProgramUniform4f;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform4fv;
        public readonly delegate* unmanaged<uint, int, GLdouble, GLdouble, GLdouble, GLdouble, void> ProgramUniform4d;
        public readonly delegate* unmanaged<uint, int, int, GLdouble*, void> ProgramUniform4dv;
        public readonly delegate* unmanaged<uint, int, uint, uint, uint, uint, void> ProgramUniform4ui;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform4uiv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix2fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix3fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix2dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix3dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix4dv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix2x3fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix3x2fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix2x4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix4x2fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix3x4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix4x3fv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix2x3dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix3x2dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix2x4dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix4x2dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix3x4dv;
        public readonly delegate* unmanaged<uint, int, int, byte, GLdouble*, void> ProgramUniformMatrix4x3dv;
        public readonly delegate* unmanaged<uint, void> ValidateProgramPipeline;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetProgramPipelineInfoLog;
        public readonly delegate* unmanaged<uint, GLdouble, void> VertexAttribL1d;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, void> VertexAttribL2d;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, void> VertexAttribL3d;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, GLdouble, GLdouble, void> VertexAttribL4d;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttribL1dv;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttribL2dv;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttribL3dv;
        public readonly delegate* unmanaged<uint, GLdouble*, void> VertexAttribL4dv;
        public readonly delegate* unmanaged<uint, int, VertexAttribLType, int, void*, void> VertexAttribLPointer;
        public readonly delegate* unmanaged<uint, VertexAttribEnum, GLdouble*, void> GetVertexAttribLdv;
        public readonly delegate* unmanaged<uint, int, float*, void> ViewportArrayv;
        public readonly delegate* unmanaged<uint, float, float, float, float, void> ViewportIndexedf;
        public readonly delegate* unmanaged<uint, float*, void> ViewportIndexedfv;
        public readonly delegate* unmanaged<uint, int, int*, void> ScissorArrayv;
        public readonly delegate* unmanaged<uint, int, int, int, int, void> ScissorIndexed;
        public readonly delegate* unmanaged<uint, int*, void> ScissorIndexedv;
        public readonly delegate* unmanaged<uint, int, GLdouble*, void> DepthRangeArrayv;
        public readonly delegate* unmanaged<uint, GLdouble, GLdouble, void> DepthRangeIndexed;
        public readonly delegate* unmanaged<GetPName, uint, float*, void> GetFloati_v;
        public readonly delegate* unmanaged<GetPName, uint, GLdouble*, void> GetDoublei_v;
        public readonly delegate* unmanaged<PrimitiveType, int, int, int, uint, void> DrawArraysInstancedBaseInstance;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, uint, void> DrawElementsInstancedBaseInstance;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, int, uint, void> DrawElementsInstancedBaseVertexBaseInstance;
        public readonly delegate* unmanaged<TextureTarget, InternalFormat, InternalFormatPName, int, int*, void> GetInternalformativ;
        public readonly delegate* unmanaged<uint, uint, AtomicCounterBufferPName, int*, void> GetActiveAtomicCounterBufferiv;
        public readonly delegate* unmanaged<uint, uint, int, byte, int, BufferAccessARB, InternalFormat, void> BindImageTexture;
        public readonly delegate* unmanaged<MemoryBarrierMask, void> MemoryBarrier;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, void> TexStorage1D;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, void> TexStorage2D;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, void> TexStorage3D;
        public readonly delegate* unmanaged<PrimitiveType, uint, int, void> DrawTransformFeedbackInstanced;
        public readonly delegate* unmanaged<PrimitiveType, uint, uint, int, void> DrawTransformFeedbackStreamInstanced;
        public readonly delegate* unmanaged<BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*, void> ClearBufferData;
        public readonly delegate* unmanaged<BufferTargetARB, SizedInternalFormat, GLintptr, GLsizeiptr, PixelFormat, PixelType, void*, void> ClearBufferSubData;
        public readonly delegate* unmanaged<uint, uint, uint, void> DispatchCompute;
        public readonly delegate* unmanaged<GLintptr, void> DispatchComputeIndirect;
        public readonly delegate* unmanaged<uint, CopyImageSubDataTarget, int, int, int, int, uint, CopyImageSubDataTarget, int, int, int, int, int, int, int, void> CopyImageSubData;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferParameterName, int, void> FramebufferParameteri;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachmentParameterName, int*, void> GetFramebufferParameteriv;
        public readonly delegate* unmanaged<TextureTarget, InternalFormat, InternalFormatPName, int, GLint64*, void> GetInternalformati64v;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, void> InvalidateTexSubImage;
        public readonly delegate* unmanaged<uint, int, void> InvalidateTexImage;
        public readonly delegate* unmanaged<uint, GLintptr, GLsizeiptr, void> InvalidateBufferSubData;
        public readonly delegate* unmanaged<uint, void> InvalidateBufferData;
        public readonly delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, void> InvalidateFramebuffer;
        public readonly delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int, void> InvalidateSubFramebuffer;
        public readonly delegate* unmanaged<PrimitiveType, void*, int, int, void> MultiDrawArraysIndirect;
        public readonly delegate* unmanaged<PrimitiveType, DrawElementsType, void*, int, int, void> MultiDrawElementsIndirect;
        public readonly delegate* unmanaged<uint, ProgramInterface, ProgramInterfacePName, int*, void> GetProgramInterfaceiv;
        public readonly delegate* unmanaged<uint, ProgramInterface, GLchar*, uint> GetProgramResourceIndex;
        public readonly delegate* unmanaged<uint, ProgramInterface, uint, int, int*, GLchar*, void> GetProgramResourceName;
        public readonly delegate* unmanaged<uint, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*, void> GetProgramResourceiv;
        public readonly delegate* unmanaged<uint, ProgramInterface, GLchar*, int> GetProgramResourceLocation;
        public readonly delegate* unmanaged<uint, ProgramInterface, GLchar*, int> GetProgramResourceLocationIndex;
        public readonly delegate* unmanaged<uint, uint, uint, void> ShaderStorageBlockBinding;
        public readonly delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, GLintptr, GLsizeiptr, void> TexBufferRange;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, byte, void> TexStorage2DMultisample;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void> TexStorage3DMultisample;
        public readonly delegate* unmanaged<uint, TextureTarget, uint, SizedInternalFormat, uint, uint, uint, uint, void> TextureView;
        public readonly delegate* unmanaged<uint, uint, GLintptr, int, void> BindVertexBuffer;
        public readonly delegate* unmanaged<uint, int, VertexAttribType, byte, uint, void> VertexAttribFormat;
        public readonly delegate* unmanaged<uint, int, VertexAttribIType, uint, void> VertexAttribIFormat;
        public readonly delegate* unmanaged<uint, int, VertexAttribLType, uint, void> VertexAttribLFormat;
        public readonly delegate* unmanaged<uint, uint, void> VertexAttribBinding;
        public readonly delegate* unmanaged<uint, uint, void> VertexBindingDivisor;
        public readonly delegate* unmanaged<DebugSource, DebugType, DebugSeverity, int, uint*, byte, void> DebugMessageControl;
        public readonly delegate* unmanaged<DebugSource, DebugType, uint, DebugSeverity, int, GLchar*, void> DebugMessageInsert;
        public readonly delegate* unmanaged<GLDEBUGPROC, void*, void> DebugMessageCallback;
        public readonly delegate* unmanaged<uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, GLchar*, uint> GetDebugMessageLog;
        public readonly delegate* unmanaged<DebugSource, uint, int, GLchar*, void> PushDebugGroup;
        public readonly delegate* unmanaged<void> PopDebugGroup;
        public readonly delegate* unmanaged<ObjectIdentifier, uint, int, GLchar*, void> ObjectLabel;
        public readonly delegate* unmanaged<ObjectIdentifier, uint, int, int*, GLchar*, void> GetObjectLabel;
        public readonly delegate* unmanaged<void*, int, GLchar*, void> ObjectPtrLabel;
        public readonly delegate* unmanaged<void*, int, int*, GLchar*, void> GetObjectPtrLabel;
        public readonly delegate* unmanaged<BufferStorageTarget, GLsizeiptr, void*, BufferStorageMask, void> BufferStorage;
        public readonly delegate* unmanaged<uint, int, PixelFormat, PixelType, void*, void> ClearTexImage;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void> ClearTexSubImage;
        public readonly delegate* unmanaged<BufferTargetARB, uint, int, uint*, void> BindBuffersBase;
        public readonly delegate* unmanaged<BufferTargetARB, uint, int, uint*, GLintptr*, GLsizeiptr*, void> BindBuffersRange;
        public readonly delegate* unmanaged<uint, int, uint*, void> BindTextures;
        public readonly delegate* unmanaged<uint, int, uint*, void> BindSamplers;
        public readonly delegate* unmanaged<uint, int, uint*, void> BindImageTextures;
        public readonly delegate* unmanaged<uint, int, uint*, GLintptr*, int*, void> BindVertexBuffers;
        public readonly delegate* unmanaged<ClipControlOrigin, ClipControlDepth, void> ClipControl;
        public readonly delegate* unmanaged<int, uint*, void> CreateTransformFeedbacks;
        public readonly delegate* unmanaged<uint, uint, uint, void> TransformFeedbackBufferBase;
        public readonly delegate* unmanaged<uint, uint, uint, GLintptr, GLsizeiptr, void> TransformFeedbackBufferRange;
        public readonly delegate* unmanaged<uint, TransformFeedbackPName, int*, void> GetTransformFeedbackiv;
        public readonly delegate* unmanaged<uint, TransformFeedbackPName, uint, int*, void> GetTransformFeedbacki_v;
        public readonly delegate* unmanaged<uint, TransformFeedbackPName, uint, GLint64*, void> GetTransformFeedbacki64_v;
        public readonly delegate* unmanaged<int, uint*, void> CreateBuffers;
        public readonly delegate* unmanaged<uint, GLsizeiptr, void*, BufferStorageMask, void> NamedBufferStorage;
        public readonly delegate* unmanaged<uint, GLsizeiptr, void*, VertexBufferObjectUsage, void> NamedBufferData;
        public readonly delegate* unmanaged<uint, GLintptr, GLsizeiptr, void*, void> NamedBufferSubData;
        public readonly delegate* unmanaged<uint, uint, GLintptr, GLintptr, GLsizeiptr, void> CopyNamedBufferSubData;
        public readonly delegate* unmanaged<uint, SizedInternalFormat, PixelFormat, PixelType, void*, void> ClearNamedBufferData;
        public readonly delegate* unmanaged<uint, SizedInternalFormat, GLintptr, GLsizeiptr, PixelFormat, PixelType, void*, void> ClearNamedBufferSubData;
        public readonly delegate* unmanaged<uint, BufferAccessARB, void*> MapNamedBuffer;
        public readonly delegate* unmanaged<uint, GLintptr, GLsizeiptr, MapBufferAccessMask, void*> MapNamedBufferRange;
        public readonly delegate* unmanaged<uint, byte> UnmapNamedBuffer;
        public readonly delegate* unmanaged<uint, GLintptr, GLsizeiptr, void> FlushMappedNamedBufferRange;
        public readonly delegate* unmanaged<uint, BufferPNameARB, int*, void> GetNamedBufferParameteriv;
        public readonly delegate* unmanaged<uint, BufferPNameARB, GLint64*, void> GetNamedBufferParameteri64v;
        public readonly delegate* unmanaged<uint, BufferPointerNameARB, void**, void> GetNamedBufferPointerv;
        public readonly delegate* unmanaged<uint, GLintptr, GLsizeiptr, void*, void> GetNamedBufferSubData;
        public readonly delegate* unmanaged<int, uint*, void> CreateFramebuffers;
        public readonly delegate* unmanaged<uint, FramebufferAttachment, RenderbufferTarget, uint, void> NamedFramebufferRenderbuffer;
        public readonly delegate* unmanaged<uint, FramebufferParameterName, int, void> NamedFramebufferParameteri;
        public readonly delegate* unmanaged<uint, FramebufferAttachment, uint, int, void> NamedFramebufferTexture;
        public readonly delegate* unmanaged<uint, FramebufferAttachment, uint, int, int, void> NamedFramebufferTextureLayer;
        public readonly delegate* unmanaged<uint, ColorBuffer, void> NamedFramebufferDrawBuffer;
        public readonly delegate* unmanaged<uint, int, ColorBuffer*, void> NamedFramebufferDrawBuffers;
        public readonly delegate* unmanaged<uint, ColorBuffer, void> NamedFramebufferReadBuffer;
        public readonly delegate* unmanaged<uint, int, FramebufferAttachment*, void> InvalidateNamedFramebufferData;
        public readonly delegate* unmanaged<uint, int, FramebufferAttachment*, int, int, int, int, void> InvalidateNamedFramebufferSubData;
        public readonly delegate* unmanaged<uint, Buffer, int, int*, void> ClearNamedFramebufferiv;
        public readonly delegate* unmanaged<uint, Buffer, int, uint*, void> ClearNamedFramebufferuiv;
        public readonly delegate* unmanaged<uint, Buffer, int, float*, void> ClearNamedFramebufferfv;
        public readonly delegate* unmanaged<uint, Buffer, int, float, int, void> ClearNamedFramebufferfi;
        public readonly delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void> BlitNamedFramebuffer;
        public readonly delegate* unmanaged<uint, FramebufferTarget, FramebufferStatus> CheckNamedFramebufferStatus;
        public readonly delegate* unmanaged<uint, GetFramebufferParameter, int*, void> GetNamedFramebufferParameteriv;
        public readonly delegate* unmanaged<uint, FramebufferAttachment, FramebufferAttachmentParameterName, int*, void> GetNamedFramebufferAttachmentParameteriv;
        public readonly delegate* unmanaged<int, uint*, void> CreateRenderbuffers;
        public readonly delegate* unmanaged<uint, InternalFormat, int, int, void> NamedRenderbufferStorage;
        public readonly delegate* unmanaged<uint, int, InternalFormat, int, int, void> NamedRenderbufferStorageMultisample;
        public readonly delegate* unmanaged<uint, RenderbufferParameterName, int*, void> GetNamedRenderbufferParameteriv;
        public readonly delegate* unmanaged<TextureTarget, int, uint*, void> CreateTextures;
        public readonly delegate* unmanaged<uint, SizedInternalFormat, uint, void> TextureBuffer;
        public readonly delegate* unmanaged<uint, SizedInternalFormat, uint, GLintptr, GLsizeiptr, void> TextureBufferRange;
        public readonly delegate* unmanaged<uint, int, SizedInternalFormat, int, void> TextureStorage1D;
        public readonly delegate* unmanaged<uint, int, SizedInternalFormat, int, int, void> TextureStorage2D;
        public readonly delegate* unmanaged<uint, int, SizedInternalFormat, int, int, int, void> TextureStorage3D;
        public readonly delegate* unmanaged<uint, int, SizedInternalFormat, int, int, byte, void> TextureStorage2DMultisample;
        public readonly delegate* unmanaged<uint, int, SizedInternalFormat, int, int, int, byte, void> TextureStorage3DMultisample;
        public readonly delegate* unmanaged<uint, int, int, int, PixelFormat, PixelType, void*, void> TextureSubImage1D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, PixelFormat, PixelType, void*, void> TextureSubImage2D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void> TextureSubImage3D;
        public readonly delegate* unmanaged<uint, int, int, int, InternalFormat, int, void*, void> CompressedTextureSubImage1D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTextureSubImage2D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTextureSubImage3D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, void> CopyTextureSubImage1D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, void> CopyTextureSubImage2D;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> CopyTextureSubImage3D;
        public readonly delegate* unmanaged<uint, TextureParameterName, float, void> TextureParameterf;
        public readonly delegate* unmanaged<uint, TextureParameterName, float*, void> TextureParameterfv;
        public readonly delegate* unmanaged<uint, TextureParameterName, int, void> TextureParameteri;
        public readonly delegate* unmanaged<uint, TextureParameterName, int*, void> TextureParameterIiv;
        public readonly delegate* unmanaged<uint, TextureParameterName, uint*, void> TextureParameterIuiv;
        public readonly delegate* unmanaged<uint, TextureParameterName, int*, void> TextureParameteriv;
        public readonly delegate* unmanaged<uint, void> GenerateTextureMipmap;
        public readonly delegate* unmanaged<uint, uint, void> BindTextureUnit;
        public readonly delegate* unmanaged<uint, int, PixelFormat, PixelType, int, void*, void> GetTextureImage;
        public readonly delegate* unmanaged<uint, int, int, void*, void> GetCompressedTextureImage;
        public readonly delegate* unmanaged<uint, int, GetTextureParameter, float*, void> GetTextureLevelParameterfv;
        public readonly delegate* unmanaged<uint, int, GetTextureParameter, int*, void> GetTextureLevelParameteriv;
        public readonly delegate* unmanaged<uint, GetTextureParameter, float*, void> GetTextureParameterfv;
        public readonly delegate* unmanaged<uint, GetTextureParameter, int*, void> GetTextureParameterIiv;
        public readonly delegate* unmanaged<uint, GetTextureParameter, uint*, void> GetTextureParameterIuiv;
        public readonly delegate* unmanaged<uint, GetTextureParameter, int*, void> GetTextureParameteriv;
        public readonly delegate* unmanaged<int, uint*, void> CreateVertexArrays;
        public readonly delegate* unmanaged<uint, uint, void> DisableVertexArrayAttrib;
        public readonly delegate* unmanaged<uint, uint, void> EnableVertexArrayAttrib;
        public readonly delegate* unmanaged<uint, uint, void> VertexArrayElementBuffer;
        public readonly delegate* unmanaged<uint, uint, uint, GLintptr, int, void> VertexArrayVertexBuffer;
        public readonly delegate* unmanaged<uint, uint, int, uint*, GLintptr*, int*, void> VertexArrayVertexBuffers;
        public readonly delegate* unmanaged<uint, uint, uint, void> VertexArrayAttribBinding;
        public readonly delegate* unmanaged<uint, uint, int, VertexAttribType, byte, uint, void> VertexArrayAttribFormat;
        public readonly delegate* unmanaged<uint, uint, int, VertexAttribIType, uint, void> VertexArrayAttribIFormat;
        public readonly delegate* unmanaged<uint, uint, int, VertexAttribLType, uint, void> VertexArrayAttribLFormat;
        public readonly delegate* unmanaged<uint, uint, uint, void> VertexArrayBindingDivisor;
        public readonly delegate* unmanaged<uint, VertexArrayPName, int*, void> GetVertexArrayiv;
        public readonly delegate* unmanaged<uint, uint, VertexArrayPName, int*, void> GetVertexArrayIndexediv;
        public readonly delegate* unmanaged<uint, uint, VertexArrayPName, GLint64*, void> GetVertexArrayIndexed64iv;
        public readonly delegate* unmanaged<int, uint*, void> CreateSamplers;
        public readonly delegate* unmanaged<int, uint*, void> CreateProgramPipelines;
        public readonly delegate* unmanaged<QueryTarget, int, uint*, void> CreateQueries;
        public readonly delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void> GetQueryBufferObjecti64v;
        public readonly delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void> GetQueryBufferObjectiv;
        public readonly delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void> GetQueryBufferObjectui64v;
        public readonly delegate* unmanaged<uint, uint, QueryObjectParameterName, GLintptr, void> GetQueryBufferObjectuiv;
        public readonly delegate* unmanaged<MemoryBarrierMask, void> MemoryBarrierByRegion;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*, void> GetTextureSubImage;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void*, void> GetCompressedTextureSubImage;
        public readonly delegate* unmanaged<GraphicsResetStatus> GetGraphicsResetStatus;
        public readonly delegate* unmanaged<TextureTarget, int, int, void*, void> GetnCompressedTexImage;
        public readonly delegate* unmanaged<TextureTarget, int, PixelFormat, PixelType, int, void*, void> GetnTexImage;
        public readonly delegate* unmanaged<uint, int, int, GLdouble*, void> GetnUniformdv;
        public readonly delegate* unmanaged<uint, int, int, float*, void> GetnUniformfv;
        public readonly delegate* unmanaged<uint, int, int, int*, void> GetnUniformiv;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> GetnUniformuiv;
        public readonly delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, int, void*, void> ReadnPixels;
        public readonly delegate* unmanaged<MapTarget, MapQuery, int, GLdouble*, void> GetnMapdv;
        public readonly delegate* unmanaged<MapTarget, MapQuery, int, float*, void> GetnMapfv;
        public readonly delegate* unmanaged<MapTarget, MapQuery, int, int*, void> GetnMapiv;
        public readonly delegate* unmanaged<PixelMap, int, float*, void> GetnPixelMapfv;
        public readonly delegate* unmanaged<PixelMap, int, uint*, void> GetnPixelMapuiv;
        public readonly delegate* unmanaged<PixelMap, int, ushort*, void> GetnPixelMapusv;
        public readonly delegate* unmanaged<int, GLubyte*, void> GetnPolygonStipple;
        public readonly delegate* unmanaged<ColorTableTarget, PixelFormat, PixelType, int, void*, void> GetnColorTable;
        public readonly delegate* unmanaged<ConvolutionTarget, PixelFormat, PixelType, int, void*, void> GetnConvolutionFilter;
        public readonly delegate* unmanaged<SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*, void> GetnSeparableFilter;
        public readonly delegate* unmanaged<HistogramTarget, byte, PixelFormat, PixelType, int, void*, void> GetnHistogram;
        public readonly delegate* unmanaged<MinmaxTarget, byte, PixelFormat, PixelType, int, void*, void> GetnMinmax;
        public readonly delegate* unmanaged<void> TextureBarrier;
        public readonly delegate* unmanaged<uint, GLchar*, uint, uint*, uint*, void> SpecializeShader;
        public readonly delegate* unmanaged<PrimitiveType, void*, GLintptr, int, int, void> MultiDrawArraysIndirectCount;
        public readonly delegate* unmanaged<PrimitiveType, DrawElementsType, void*, GLintptr, int, int, void> MultiDrawElementsIndirectCount;
        public readonly delegate* unmanaged<float, float, float, void> PolygonOffsetClamp;

        public static ReadOnlySpan<byte> CullFaceUtf8 => "glCullFace"u8;
        public static ReadOnlySpan<byte> FrontFaceUtf8 => "glFrontFace"u8;
        public static ReadOnlySpan<byte> HintUtf8 => "glHint"u8;
        public static ReadOnlySpan<byte> LineWidthUtf8 => "glLineWidth"u8;
        public static ReadOnlySpan<byte> PointSizeUtf8 => "glPointSize"u8;
        public static ReadOnlySpan<byte> PolygonModeUtf8 => "glPolygonMode"u8;
        public static ReadOnlySpan<byte> ScissorUtf8 => "glScissor"u8;
        public static ReadOnlySpan<byte> TexParameterfUtf8 => "glTexParameterf"u8;
        public static ReadOnlySpan<byte> TexParameterfvUtf8 => "glTexParameterfv"u8;
        public static ReadOnlySpan<byte> TexParameteriUtf8 => "glTexParameteri"u8;
        public static ReadOnlySpan<byte> TexParameterivUtf8 => "glTexParameteriv"u8;
        public static ReadOnlySpan<byte> TexImage1DUtf8 => "glTexImage1D"u8;
        public static ReadOnlySpan<byte> TexImage2DUtf8 => "glTexImage2D"u8;
        public static ReadOnlySpan<byte> DrawBufferUtf8 => "glDrawBuffer"u8;
        public static ReadOnlySpan<byte> ClearUtf8 => "glClear"u8;
        public static ReadOnlySpan<byte> ClearColorUtf8 => "glClearColor"u8;
        public static ReadOnlySpan<byte> ClearStencilUtf8 => "glClearStencil"u8;
        public static ReadOnlySpan<byte> ClearDepthUtf8 => "glClearDepth"u8;
        public static ReadOnlySpan<byte> StencilMaskUtf8 => "glStencilMask"u8;
        public static ReadOnlySpan<byte> ColorMaskUtf8 => "glColorMask"u8;
        public static ReadOnlySpan<byte> DepthMaskUtf8 => "glDepthMask"u8;
        public static ReadOnlySpan<byte> DisableUtf8 => "glDisable"u8;
        public static ReadOnlySpan<byte> EnableUtf8 => "glEnable"u8;
        public static ReadOnlySpan<byte> FinishUtf8 => "glFinish"u8;
        public static ReadOnlySpan<byte> FlushUtf8 => "glFlush"u8;
        public static ReadOnlySpan<byte> BlendFuncUtf8 => "glBlendFunc"u8;
        public static ReadOnlySpan<byte> LogicOpUtf8 => "glLogicOp"u8;
        public static ReadOnlySpan<byte> StencilFuncUtf8 => "glStencilFunc"u8;
        public static ReadOnlySpan<byte> StencilOpUtf8 => "glStencilOp"u8;
        public static ReadOnlySpan<byte> DepthFuncUtf8 => "glDepthFunc"u8;
        public static ReadOnlySpan<byte> PixelStorefUtf8 => "glPixelStoref"u8;
        public static ReadOnlySpan<byte> PixelStoreiUtf8 => "glPixelStorei"u8;
        public static ReadOnlySpan<byte> ReadBufferUtf8 => "glReadBuffer"u8;
        public static ReadOnlySpan<byte> ReadPixelsUtf8 => "glReadPixels"u8;
        public static ReadOnlySpan<byte> GetBooleanvUtf8 => "glGetBooleanv"u8;
        public static ReadOnlySpan<byte> GetDoublevUtf8 => "glGetDoublev"u8;
        public static ReadOnlySpan<byte> GetErrorUtf8 => "glGetError"u8;
        public static ReadOnlySpan<byte> GetFloatvUtf8 => "glGetFloatv"u8;
        public static ReadOnlySpan<byte> GetIntegervUtf8 => "glGetIntegerv"u8;
        public static ReadOnlySpan<byte> GetStringUtf8 => "glGetString"u8;
        public static ReadOnlySpan<byte> GetTexImageUtf8 => "glGetTexImage"u8;
        public static ReadOnlySpan<byte> GetTexParameterfvUtf8 => "glGetTexParameterfv"u8;
        public static ReadOnlySpan<byte> GetTexParameterivUtf8 => "glGetTexParameteriv"u8;
        public static ReadOnlySpan<byte> GetTexLevelParameterfvUtf8 => "glGetTexLevelParameterfv"u8;
        public static ReadOnlySpan<byte> GetTexLevelParameterivUtf8 => "glGetTexLevelParameteriv"u8;
        public static ReadOnlySpan<byte> IsEnabledUtf8 => "glIsEnabled"u8;
        public static ReadOnlySpan<byte> DepthRangeUtf8 => "glDepthRange"u8;
        public static ReadOnlySpan<byte> ViewportUtf8 => "glViewport"u8;
        public static ReadOnlySpan<byte> NewListUtf8 => "glNewList"u8;
        public static ReadOnlySpan<byte> EndListUtf8 => "glEndList"u8;
        public static ReadOnlySpan<byte> CallListUtf8 => "glCallList"u8;
        public static ReadOnlySpan<byte> CallListsUtf8 => "glCallLists"u8;
        public static ReadOnlySpan<byte> DeleteListsUtf8 => "glDeleteLists"u8;
        public static ReadOnlySpan<byte> GenListsUtf8 => "glGenLists"u8;
        public static ReadOnlySpan<byte> ListBaseUtf8 => "glListBase"u8;
        public static ReadOnlySpan<byte> BeginUtf8 => "glBegin"u8;
        public static ReadOnlySpan<byte> BitmapUtf8 => "glBitmap"u8;
        public static ReadOnlySpan<byte> Color3bUtf8 => "glColor3b"u8;
        public static ReadOnlySpan<byte> Color3bvUtf8 => "glColor3bv"u8;
        public static ReadOnlySpan<byte> Color3dUtf8 => "glColor3d"u8;
        public static ReadOnlySpan<byte> Color3dvUtf8 => "glColor3dv"u8;
        public static ReadOnlySpan<byte> Color3fUtf8 => "glColor3f"u8;
        public static ReadOnlySpan<byte> Color3fvUtf8 => "glColor3fv"u8;
        public static ReadOnlySpan<byte> Color3iUtf8 => "glColor3i"u8;
        public static ReadOnlySpan<byte> Color3ivUtf8 => "glColor3iv"u8;
        public static ReadOnlySpan<byte> Color3sUtf8 => "glColor3s"u8;
        public static ReadOnlySpan<byte> Color3svUtf8 => "glColor3sv"u8;
        public static ReadOnlySpan<byte> Color3ubUtf8 => "glColor3ub"u8;
        public static ReadOnlySpan<byte> Color3ubvUtf8 => "glColor3ubv"u8;
        public static ReadOnlySpan<byte> Color3uiUtf8 => "glColor3ui"u8;
        public static ReadOnlySpan<byte> Color3uivUtf8 => "glColor3uiv"u8;
        public static ReadOnlySpan<byte> Color3usUtf8 => "glColor3us"u8;
        public static ReadOnlySpan<byte> Color3usvUtf8 => "glColor3usv"u8;
        public static ReadOnlySpan<byte> Color4bUtf8 => "glColor4b"u8;
        public static ReadOnlySpan<byte> Color4bvUtf8 => "glColor4bv"u8;
        public static ReadOnlySpan<byte> Color4dUtf8 => "glColor4d"u8;
        public static ReadOnlySpan<byte> Color4dvUtf8 => "glColor4dv"u8;
        public static ReadOnlySpan<byte> Color4fUtf8 => "glColor4f"u8;
        public static ReadOnlySpan<byte> Color4fvUtf8 => "glColor4fv"u8;
        public static ReadOnlySpan<byte> Color4iUtf8 => "glColor4i"u8;
        public static ReadOnlySpan<byte> Color4ivUtf8 => "glColor4iv"u8;
        public static ReadOnlySpan<byte> Color4sUtf8 => "glColor4s"u8;
        public static ReadOnlySpan<byte> Color4svUtf8 => "glColor4sv"u8;
        public static ReadOnlySpan<byte> Color4ubUtf8 => "glColor4ub"u8;
        public static ReadOnlySpan<byte> Color4ubvUtf8 => "glColor4ubv"u8;
        public static ReadOnlySpan<byte> Color4uiUtf8 => "glColor4ui"u8;
        public static ReadOnlySpan<byte> Color4uivUtf8 => "glColor4uiv"u8;
        public static ReadOnlySpan<byte> Color4usUtf8 => "glColor4us"u8;
        public static ReadOnlySpan<byte> Color4usvUtf8 => "glColor4usv"u8;
        public static ReadOnlySpan<byte> EdgeFlagUtf8 => "glEdgeFlag"u8;
        public static ReadOnlySpan<byte> EdgeFlagvUtf8 => "glEdgeFlagv"u8;
        public static ReadOnlySpan<byte> EndUtf8 => "glEnd"u8;
        public static ReadOnlySpan<byte> IndexdUtf8 => "glIndexd"u8;
        public static ReadOnlySpan<byte> IndexdvUtf8 => "glIndexdv"u8;
        public static ReadOnlySpan<byte> IndexfUtf8 => "glIndexf"u8;
        public static ReadOnlySpan<byte> IndexfvUtf8 => "glIndexfv"u8;
        public static ReadOnlySpan<byte> IndexiUtf8 => "glIndexi"u8;
        public static ReadOnlySpan<byte> IndexivUtf8 => "glIndexiv"u8;
        public static ReadOnlySpan<byte> IndexsUtf8 => "glIndexs"u8;
        public static ReadOnlySpan<byte> IndexsvUtf8 => "glIndexsv"u8;
        public static ReadOnlySpan<byte> Normal3bUtf8 => "glNormal3b"u8;
        public static ReadOnlySpan<byte> Normal3bvUtf8 => "glNormal3bv"u8;
        public static ReadOnlySpan<byte> Normal3dUtf8 => "glNormal3d"u8;
        public static ReadOnlySpan<byte> Normal3dvUtf8 => "glNormal3dv"u8;
        public static ReadOnlySpan<byte> Normal3fUtf8 => "glNormal3f"u8;
        public static ReadOnlySpan<byte> Normal3fvUtf8 => "glNormal3fv"u8;
        public static ReadOnlySpan<byte> Normal3iUtf8 => "glNormal3i"u8;
        public static ReadOnlySpan<byte> Normal3ivUtf8 => "glNormal3iv"u8;
        public static ReadOnlySpan<byte> Normal3sUtf8 => "glNormal3s"u8;
        public static ReadOnlySpan<byte> Normal3svUtf8 => "glNormal3sv"u8;
        public static ReadOnlySpan<byte> RasterPos2dUtf8 => "glRasterPos2d"u8;
        public static ReadOnlySpan<byte> RasterPos2dvUtf8 => "glRasterPos2dv"u8;
        public static ReadOnlySpan<byte> RasterPos2fUtf8 => "glRasterPos2f"u8;
        public static ReadOnlySpan<byte> RasterPos2fvUtf8 => "glRasterPos2fv"u8;
        public static ReadOnlySpan<byte> RasterPos2iUtf8 => "glRasterPos2i"u8;
        public static ReadOnlySpan<byte> RasterPos2ivUtf8 => "glRasterPos2iv"u8;
        public static ReadOnlySpan<byte> RasterPos2sUtf8 => "glRasterPos2s"u8;
        public static ReadOnlySpan<byte> RasterPos2svUtf8 => "glRasterPos2sv"u8;
        public static ReadOnlySpan<byte> RasterPos3dUtf8 => "glRasterPos3d"u8;
        public static ReadOnlySpan<byte> RasterPos3dvUtf8 => "glRasterPos3dv"u8;
        public static ReadOnlySpan<byte> RasterPos3fUtf8 => "glRasterPos3f"u8;
        public static ReadOnlySpan<byte> RasterPos3fvUtf8 => "glRasterPos3fv"u8;
        public static ReadOnlySpan<byte> RasterPos3iUtf8 => "glRasterPos3i"u8;
        public static ReadOnlySpan<byte> RasterPos3ivUtf8 => "glRasterPos3iv"u8;
        public static ReadOnlySpan<byte> RasterPos3sUtf8 => "glRasterPos3s"u8;
        public static ReadOnlySpan<byte> RasterPos3svUtf8 => "glRasterPos3sv"u8;
        public static ReadOnlySpan<byte> RasterPos4dUtf8 => "glRasterPos4d"u8;
        public static ReadOnlySpan<byte> RasterPos4dvUtf8 => "glRasterPos4dv"u8;
        public static ReadOnlySpan<byte> RasterPos4fUtf8 => "glRasterPos4f"u8;
        public static ReadOnlySpan<byte> RasterPos4fvUtf8 => "glRasterPos4fv"u8;
        public static ReadOnlySpan<byte> RasterPos4iUtf8 => "glRasterPos4i"u8;
        public static ReadOnlySpan<byte> RasterPos4ivUtf8 => "glRasterPos4iv"u8;
        public static ReadOnlySpan<byte> RasterPos4sUtf8 => "glRasterPos4s"u8;
        public static ReadOnlySpan<byte> RasterPos4svUtf8 => "glRasterPos4sv"u8;
        public static ReadOnlySpan<byte> RectdUtf8 => "glRectd"u8;
        public static ReadOnlySpan<byte> RectdvUtf8 => "glRectdv"u8;
        public static ReadOnlySpan<byte> RectfUtf8 => "glRectf"u8;
        public static ReadOnlySpan<byte> RectfvUtf8 => "glRectfv"u8;
        public static ReadOnlySpan<byte> RectiUtf8 => "glRecti"u8;
        public static ReadOnlySpan<byte> RectivUtf8 => "glRectiv"u8;
        public static ReadOnlySpan<byte> RectsUtf8 => "glRects"u8;
        public static ReadOnlySpan<byte> RectsvUtf8 => "glRectsv"u8;
        public static ReadOnlySpan<byte> TexCoord1dUtf8 => "glTexCoord1d"u8;
        public static ReadOnlySpan<byte> TexCoord1dvUtf8 => "glTexCoord1dv"u8;
        public static ReadOnlySpan<byte> TexCoord1fUtf8 => "glTexCoord1f"u8;
        public static ReadOnlySpan<byte> TexCoord1fvUtf8 => "glTexCoord1fv"u8;
        public static ReadOnlySpan<byte> TexCoord1iUtf8 => "glTexCoord1i"u8;
        public static ReadOnlySpan<byte> TexCoord1ivUtf8 => "glTexCoord1iv"u8;
        public static ReadOnlySpan<byte> TexCoord1sUtf8 => "glTexCoord1s"u8;
        public static ReadOnlySpan<byte> TexCoord1svUtf8 => "glTexCoord1sv"u8;
        public static ReadOnlySpan<byte> TexCoord2dUtf8 => "glTexCoord2d"u8;
        public static ReadOnlySpan<byte> TexCoord2dvUtf8 => "glTexCoord2dv"u8;
        public static ReadOnlySpan<byte> TexCoord2fUtf8 => "glTexCoord2f"u8;
        public static ReadOnlySpan<byte> TexCoord2fvUtf8 => "glTexCoord2fv"u8;
        public static ReadOnlySpan<byte> TexCoord2iUtf8 => "glTexCoord2i"u8;
        public static ReadOnlySpan<byte> TexCoord2ivUtf8 => "glTexCoord2iv"u8;
        public static ReadOnlySpan<byte> TexCoord2sUtf8 => "glTexCoord2s"u8;
        public static ReadOnlySpan<byte> TexCoord2svUtf8 => "glTexCoord2sv"u8;
        public static ReadOnlySpan<byte> TexCoord3dUtf8 => "glTexCoord3d"u8;
        public static ReadOnlySpan<byte> TexCoord3dvUtf8 => "glTexCoord3dv"u8;
        public static ReadOnlySpan<byte> TexCoord3fUtf8 => "glTexCoord3f"u8;
        public static ReadOnlySpan<byte> TexCoord3fvUtf8 => "glTexCoord3fv"u8;
        public static ReadOnlySpan<byte> TexCoord3iUtf8 => "glTexCoord3i"u8;
        public static ReadOnlySpan<byte> TexCoord3ivUtf8 => "glTexCoord3iv"u8;
        public static ReadOnlySpan<byte> TexCoord3sUtf8 => "glTexCoord3s"u8;
        public static ReadOnlySpan<byte> TexCoord3svUtf8 => "glTexCoord3sv"u8;
        public static ReadOnlySpan<byte> TexCoord4dUtf8 => "glTexCoord4d"u8;
        public static ReadOnlySpan<byte> TexCoord4dvUtf8 => "glTexCoord4dv"u8;
        public static ReadOnlySpan<byte> TexCoord4fUtf8 => "glTexCoord4f"u8;
        public static ReadOnlySpan<byte> TexCoord4fvUtf8 => "glTexCoord4fv"u8;
        public static ReadOnlySpan<byte> TexCoord4iUtf8 => "glTexCoord4i"u8;
        public static ReadOnlySpan<byte> TexCoord4ivUtf8 => "glTexCoord4iv"u8;
        public static ReadOnlySpan<byte> TexCoord4sUtf8 => "glTexCoord4s"u8;
        public static ReadOnlySpan<byte> TexCoord4svUtf8 => "glTexCoord4sv"u8;
        public static ReadOnlySpan<byte> Vertex2dUtf8 => "glVertex2d"u8;
        public static ReadOnlySpan<byte> Vertex2dvUtf8 => "glVertex2dv"u8;
        public static ReadOnlySpan<byte> Vertex2fUtf8 => "glVertex2f"u8;
        public static ReadOnlySpan<byte> Vertex2fvUtf8 => "glVertex2fv"u8;
        public static ReadOnlySpan<byte> Vertex2iUtf8 => "glVertex2i"u8;
        public static ReadOnlySpan<byte> Vertex2ivUtf8 => "glVertex2iv"u8;
        public static ReadOnlySpan<byte> Vertex2sUtf8 => "glVertex2s"u8;
        public static ReadOnlySpan<byte> Vertex2svUtf8 => "glVertex2sv"u8;
        public static ReadOnlySpan<byte> Vertex3dUtf8 => "glVertex3d"u8;
        public static ReadOnlySpan<byte> Vertex3dvUtf8 => "glVertex3dv"u8;
        public static ReadOnlySpan<byte> Vertex3fUtf8 => "glVertex3f"u8;
        public static ReadOnlySpan<byte> Vertex3fvUtf8 => "glVertex3fv"u8;
        public static ReadOnlySpan<byte> Vertex3iUtf8 => "glVertex3i"u8;
        public static ReadOnlySpan<byte> Vertex3ivUtf8 => "glVertex3iv"u8;
        public static ReadOnlySpan<byte> Vertex3sUtf8 => "glVertex3s"u8;
        public static ReadOnlySpan<byte> Vertex3svUtf8 => "glVertex3sv"u8;
        public static ReadOnlySpan<byte> Vertex4dUtf8 => "glVertex4d"u8;
        public static ReadOnlySpan<byte> Vertex4dvUtf8 => "glVertex4dv"u8;
        public static ReadOnlySpan<byte> Vertex4fUtf8 => "glVertex4f"u8;
        public static ReadOnlySpan<byte> Vertex4fvUtf8 => "glVertex4fv"u8;
        public static ReadOnlySpan<byte> Vertex4iUtf8 => "glVertex4i"u8;
        public static ReadOnlySpan<byte> Vertex4ivUtf8 => "glVertex4iv"u8;
        public static ReadOnlySpan<byte> Vertex4sUtf8 => "glVertex4s"u8;
        public static ReadOnlySpan<byte> Vertex4svUtf8 => "glVertex4sv"u8;
        public static ReadOnlySpan<byte> ClipPlaneUtf8 => "glClipPlane"u8;
        public static ReadOnlySpan<byte> ColorMaterialUtf8 => "glColorMaterial"u8;
        public static ReadOnlySpan<byte> FogfUtf8 => "glFogf"u8;
        public static ReadOnlySpan<byte> FogfvUtf8 => "glFogfv"u8;
        public static ReadOnlySpan<byte> FogiUtf8 => "glFogi"u8;
        public static ReadOnlySpan<byte> FogivUtf8 => "glFogiv"u8;
        public static ReadOnlySpan<byte> LightfUtf8 => "glLightf"u8;
        public static ReadOnlySpan<byte> LightfvUtf8 => "glLightfv"u8;
        public static ReadOnlySpan<byte> LightiUtf8 => "glLighti"u8;
        public static ReadOnlySpan<byte> LightivUtf8 => "glLightiv"u8;
        public static ReadOnlySpan<byte> LightModelfUtf8 => "glLightModelf"u8;
        public static ReadOnlySpan<byte> LightModelfvUtf8 => "glLightModelfv"u8;
        public static ReadOnlySpan<byte> LightModeliUtf8 => "glLightModeli"u8;
        public static ReadOnlySpan<byte> LightModelivUtf8 => "glLightModeliv"u8;
        public static ReadOnlySpan<byte> LineStippleUtf8 => "glLineStipple"u8;
        public static ReadOnlySpan<byte> MaterialfUtf8 => "glMaterialf"u8;
        public static ReadOnlySpan<byte> MaterialfvUtf8 => "glMaterialfv"u8;
        public static ReadOnlySpan<byte> MaterialiUtf8 => "glMateriali"u8;
        public static ReadOnlySpan<byte> MaterialivUtf8 => "glMaterialiv"u8;
        public static ReadOnlySpan<byte> PolygonStippleUtf8 => "glPolygonStipple"u8;
        public static ReadOnlySpan<byte> ShadeModelUtf8 => "glShadeModel"u8;
        public static ReadOnlySpan<byte> TexEnvfUtf8 => "glTexEnvf"u8;
        public static ReadOnlySpan<byte> TexEnvfvUtf8 => "glTexEnvfv"u8;
        public static ReadOnlySpan<byte> TexEnviUtf8 => "glTexEnvi"u8;
        public static ReadOnlySpan<byte> TexEnvivUtf8 => "glTexEnviv"u8;
        public static ReadOnlySpan<byte> TexGendUtf8 => "glTexGend"u8;
        public static ReadOnlySpan<byte> TexGendvUtf8 => "glTexGendv"u8;
        public static ReadOnlySpan<byte> TexGenfUtf8 => "glTexGenf"u8;
        public static ReadOnlySpan<byte> TexGenfvUtf8 => "glTexGenfv"u8;
        public static ReadOnlySpan<byte> TexGeniUtf8 => "glTexGeni"u8;
        public static ReadOnlySpan<byte> TexGenivUtf8 => "glTexGeniv"u8;
        public static ReadOnlySpan<byte> FeedbackBufferUtf8 => "glFeedbackBuffer"u8;
        public static ReadOnlySpan<byte> SelectBufferUtf8 => "glSelectBuffer"u8;
        public static ReadOnlySpan<byte> RenderModeUtf8 => "glRenderMode"u8;
        public static ReadOnlySpan<byte> InitNamesUtf8 => "glInitNames"u8;
        public static ReadOnlySpan<byte> LoadNameUtf8 => "glLoadName"u8;
        public static ReadOnlySpan<byte> PassThroughUtf8 => "glPassThrough"u8;
        public static ReadOnlySpan<byte> PopNameUtf8 => "glPopName"u8;
        public static ReadOnlySpan<byte> PushNameUtf8 => "glPushName"u8;
        public static ReadOnlySpan<byte> ClearAccumUtf8 => "glClearAccum"u8;
        public static ReadOnlySpan<byte> ClearIndexUtf8 => "glClearIndex"u8;
        public static ReadOnlySpan<byte> IndexMaskUtf8 => "glIndexMask"u8;
        public static ReadOnlySpan<byte> AccumUtf8 => "glAccum"u8;
        public static ReadOnlySpan<byte> PopAttribUtf8 => "glPopAttrib"u8;
        public static ReadOnlySpan<byte> PushAttribUtf8 => "glPushAttrib"u8;
        public static ReadOnlySpan<byte> Map1dUtf8 => "glMap1d"u8;
        public static ReadOnlySpan<byte> Map1fUtf8 => "glMap1f"u8;
        public static ReadOnlySpan<byte> Map2dUtf8 => "glMap2d"u8;
        public static ReadOnlySpan<byte> Map2fUtf8 => "glMap2f"u8;
        public static ReadOnlySpan<byte> MapGrid1dUtf8 => "glMapGrid1d"u8;
        public static ReadOnlySpan<byte> MapGrid1fUtf8 => "glMapGrid1f"u8;
        public static ReadOnlySpan<byte> MapGrid2dUtf8 => "glMapGrid2d"u8;
        public static ReadOnlySpan<byte> MapGrid2fUtf8 => "glMapGrid2f"u8;
        public static ReadOnlySpan<byte> EvalCoord1dUtf8 => "glEvalCoord1d"u8;
        public static ReadOnlySpan<byte> EvalCoord1dvUtf8 => "glEvalCoord1dv"u8;
        public static ReadOnlySpan<byte> EvalCoord1fUtf8 => "glEvalCoord1f"u8;
        public static ReadOnlySpan<byte> EvalCoord1fvUtf8 => "glEvalCoord1fv"u8;
        public static ReadOnlySpan<byte> EvalCoord2dUtf8 => "glEvalCoord2d"u8;
        public static ReadOnlySpan<byte> EvalCoord2dvUtf8 => "glEvalCoord2dv"u8;
        public static ReadOnlySpan<byte> EvalCoord2fUtf8 => "glEvalCoord2f"u8;
        public static ReadOnlySpan<byte> EvalCoord2fvUtf8 => "glEvalCoord2fv"u8;
        public static ReadOnlySpan<byte> EvalMesh1Utf8 => "glEvalMesh1"u8;
        public static ReadOnlySpan<byte> EvalPoint1Utf8 => "glEvalPoint1"u8;
        public static ReadOnlySpan<byte> EvalMesh2Utf8 => "glEvalMesh2"u8;
        public static ReadOnlySpan<byte> EvalPoint2Utf8 => "glEvalPoint2"u8;
        public static ReadOnlySpan<byte> AlphaFuncUtf8 => "glAlphaFunc"u8;
        public static ReadOnlySpan<byte> PixelZoomUtf8 => "glPixelZoom"u8;
        public static ReadOnlySpan<byte> PixelTransferfUtf8 => "glPixelTransferf"u8;
        public static ReadOnlySpan<byte> PixelTransferiUtf8 => "glPixelTransferi"u8;
        public static ReadOnlySpan<byte> PixelMapfvUtf8 => "glPixelMapfv"u8;
        public static ReadOnlySpan<byte> PixelMapuivUtf8 => "glPixelMapuiv"u8;
        public static ReadOnlySpan<byte> PixelMapusvUtf8 => "glPixelMapusv"u8;
        public static ReadOnlySpan<byte> CopyPixelsUtf8 => "glCopyPixels"u8;
        public static ReadOnlySpan<byte> DrawPixelsUtf8 => "glDrawPixels"u8;
        public static ReadOnlySpan<byte> GetClipPlaneUtf8 => "glGetClipPlane"u8;
        public static ReadOnlySpan<byte> GetLightfvUtf8 => "glGetLightfv"u8;
        public static ReadOnlySpan<byte> GetLightivUtf8 => "glGetLightiv"u8;
        public static ReadOnlySpan<byte> GetMapdvUtf8 => "glGetMapdv"u8;
        public static ReadOnlySpan<byte> GetMapfvUtf8 => "glGetMapfv"u8;
        public static ReadOnlySpan<byte> GetMapivUtf8 => "glGetMapiv"u8;
        public static ReadOnlySpan<byte> GetMaterialfvUtf8 => "glGetMaterialfv"u8;
        public static ReadOnlySpan<byte> GetMaterialivUtf8 => "glGetMaterialiv"u8;
        public static ReadOnlySpan<byte> GetPixelMapfvUtf8 => "glGetPixelMapfv"u8;
        public static ReadOnlySpan<byte> GetPixelMapuivUtf8 => "glGetPixelMapuiv"u8;
        public static ReadOnlySpan<byte> GetPixelMapusvUtf8 => "glGetPixelMapusv"u8;
        public static ReadOnlySpan<byte> GetPolygonStippleUtf8 => "glGetPolygonStipple"u8;
        public static ReadOnlySpan<byte> GetTexEnvfvUtf8 => "glGetTexEnvfv"u8;
        public static ReadOnlySpan<byte> GetTexEnvivUtf8 => "glGetTexEnviv"u8;
        public static ReadOnlySpan<byte> GetTexGendvUtf8 => "glGetTexGendv"u8;
        public static ReadOnlySpan<byte> GetTexGenfvUtf8 => "glGetTexGenfv"u8;
        public static ReadOnlySpan<byte> GetTexGenivUtf8 => "glGetTexGeniv"u8;
        public static ReadOnlySpan<byte> IsListUtf8 => "glIsList"u8;
        public static ReadOnlySpan<byte> FrustumUtf8 => "glFrustum"u8;
        public static ReadOnlySpan<byte> LoadIdentityUtf8 => "glLoadIdentity"u8;
        public static ReadOnlySpan<byte> LoadMatrixfUtf8 => "glLoadMatrixf"u8;
        public static ReadOnlySpan<byte> LoadMatrixdUtf8 => "glLoadMatrixd"u8;
        public static ReadOnlySpan<byte> MatrixModeUtf8 => "glMatrixMode"u8;
        public static ReadOnlySpan<byte> MultMatrixfUtf8 => "glMultMatrixf"u8;
        public static ReadOnlySpan<byte> MultMatrixdUtf8 => "glMultMatrixd"u8;
        public static ReadOnlySpan<byte> OrthoUtf8 => "glOrtho"u8;
        public static ReadOnlySpan<byte> PopMatrixUtf8 => "glPopMatrix"u8;
        public static ReadOnlySpan<byte> PushMatrixUtf8 => "glPushMatrix"u8;
        public static ReadOnlySpan<byte> RotatedUtf8 => "glRotated"u8;
        public static ReadOnlySpan<byte> RotatefUtf8 => "glRotatef"u8;
        public static ReadOnlySpan<byte> ScaledUtf8 => "glScaled"u8;
        public static ReadOnlySpan<byte> ScalefUtf8 => "glScalef"u8;
        public static ReadOnlySpan<byte> TranslatedUtf8 => "glTranslated"u8;
        public static ReadOnlySpan<byte> TranslatefUtf8 => "glTranslatef"u8;
        public static ReadOnlySpan<byte> DrawArraysUtf8 => "glDrawArrays"u8;
        public static ReadOnlySpan<byte> DrawElementsUtf8 => "glDrawElements"u8;
        public static ReadOnlySpan<byte> GetPointervUtf8 => "glGetPointerv"u8;
        public static ReadOnlySpan<byte> PolygonOffsetUtf8 => "glPolygonOffset"u8;
        public static ReadOnlySpan<byte> CopyTexImage1DUtf8 => "glCopyTexImage1D"u8;
        public static ReadOnlySpan<byte> CopyTexImage2DUtf8 => "glCopyTexImage2D"u8;
        public static ReadOnlySpan<byte> CopyTexSubImage1DUtf8 => "glCopyTexSubImage1D"u8;
        public static ReadOnlySpan<byte> CopyTexSubImage2DUtf8 => "glCopyTexSubImage2D"u8;
        public static ReadOnlySpan<byte> TexSubImage1DUtf8 => "glTexSubImage1D"u8;
        public static ReadOnlySpan<byte> TexSubImage2DUtf8 => "glTexSubImage2D"u8;
        public static ReadOnlySpan<byte> BindTextureUtf8 => "glBindTexture"u8;
        public static ReadOnlySpan<byte> DeleteTexturesUtf8 => "glDeleteTextures"u8;
        public static ReadOnlySpan<byte> GenTexturesUtf8 => "glGenTextures"u8;
        public static ReadOnlySpan<byte> IsTextureUtf8 => "glIsTexture"u8;
        public static ReadOnlySpan<byte> ArrayElementUtf8 => "glArrayElement"u8;
        public static ReadOnlySpan<byte> ColorPointerUtf8 => "glColorPointer"u8;
        public static ReadOnlySpan<byte> DisableClientStateUtf8 => "glDisableClientState"u8;
        public static ReadOnlySpan<byte> EdgeFlagPointerUtf8 => "glEdgeFlagPointer"u8;
        public static ReadOnlySpan<byte> EnableClientStateUtf8 => "glEnableClientState"u8;
        public static ReadOnlySpan<byte> IndexPointerUtf8 => "glIndexPointer"u8;
        public static ReadOnlySpan<byte> InterleavedArraysUtf8 => "glInterleavedArrays"u8;
        public static ReadOnlySpan<byte> NormalPointerUtf8 => "glNormalPointer"u8;
        public static ReadOnlySpan<byte> TexCoordPointerUtf8 => "glTexCoordPointer"u8;
        public static ReadOnlySpan<byte> VertexPointerUtf8 => "glVertexPointer"u8;
        public static ReadOnlySpan<byte> AreTexturesResidentUtf8 => "glAreTexturesResident"u8;
        public static ReadOnlySpan<byte> PrioritizeTexturesUtf8 => "glPrioritizeTextures"u8;
        public static ReadOnlySpan<byte> IndexubUtf8 => "glIndexub"u8;
        public static ReadOnlySpan<byte> IndexubvUtf8 => "glIndexubv"u8;
        public static ReadOnlySpan<byte> PopClientAttribUtf8 => "glPopClientAttrib"u8;
        public static ReadOnlySpan<byte> PushClientAttribUtf8 => "glPushClientAttrib"u8;
        public static ReadOnlySpan<byte> DrawRangeElementsUtf8 => "glDrawRangeElements"u8;
        public static ReadOnlySpan<byte> TexImage3DUtf8 => "glTexImage3D"u8;
        public static ReadOnlySpan<byte> TexSubImage3DUtf8 => "glTexSubImage3D"u8;
        public static ReadOnlySpan<byte> CopyTexSubImage3DUtf8 => "glCopyTexSubImage3D"u8;
        public static ReadOnlySpan<byte> ActiveTextureUtf8 => "glActiveTexture"u8;
        public static ReadOnlySpan<byte> SampleCoverageUtf8 => "glSampleCoverage"u8;
        public static ReadOnlySpan<byte> CompressedTexImage3DUtf8 => "glCompressedTexImage3D"u8;
        public static ReadOnlySpan<byte> CompressedTexImage2DUtf8 => "glCompressedTexImage2D"u8;
        public static ReadOnlySpan<byte> CompressedTexImage1DUtf8 => "glCompressedTexImage1D"u8;
        public static ReadOnlySpan<byte> CompressedTexSubImage3DUtf8 => "glCompressedTexSubImage3D"u8;
        public static ReadOnlySpan<byte> CompressedTexSubImage2DUtf8 => "glCompressedTexSubImage2D"u8;
        public static ReadOnlySpan<byte> CompressedTexSubImage1DUtf8 => "glCompressedTexSubImage1D"u8;
        public static ReadOnlySpan<byte> GetCompressedTexImageUtf8 => "glGetCompressedTexImage"u8;
        public static ReadOnlySpan<byte> ClientActiveTextureUtf8 => "glClientActiveTexture"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1dUtf8 => "glMultiTexCoord1d"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1dvUtf8 => "glMultiTexCoord1dv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1fUtf8 => "glMultiTexCoord1f"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1fvUtf8 => "glMultiTexCoord1fv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1iUtf8 => "glMultiTexCoord1i"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1ivUtf8 => "glMultiTexCoord1iv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1sUtf8 => "glMultiTexCoord1s"u8;
        public static ReadOnlySpan<byte> MultiTexCoord1svUtf8 => "glMultiTexCoord1sv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2dUtf8 => "glMultiTexCoord2d"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2dvUtf8 => "glMultiTexCoord2dv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2fUtf8 => "glMultiTexCoord2f"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2fvUtf8 => "glMultiTexCoord2fv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2iUtf8 => "glMultiTexCoord2i"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2ivUtf8 => "glMultiTexCoord2iv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2sUtf8 => "glMultiTexCoord2s"u8;
        public static ReadOnlySpan<byte> MultiTexCoord2svUtf8 => "glMultiTexCoord2sv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3dUtf8 => "glMultiTexCoord3d"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3dvUtf8 => "glMultiTexCoord3dv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3fUtf8 => "glMultiTexCoord3f"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3fvUtf8 => "glMultiTexCoord3fv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3iUtf8 => "glMultiTexCoord3i"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3ivUtf8 => "glMultiTexCoord3iv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3sUtf8 => "glMultiTexCoord3s"u8;
        public static ReadOnlySpan<byte> MultiTexCoord3svUtf8 => "glMultiTexCoord3sv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4dUtf8 => "glMultiTexCoord4d"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4dvUtf8 => "glMultiTexCoord4dv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4fUtf8 => "glMultiTexCoord4f"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4fvUtf8 => "glMultiTexCoord4fv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4iUtf8 => "glMultiTexCoord4i"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4ivUtf8 => "glMultiTexCoord4iv"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4sUtf8 => "glMultiTexCoord4s"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4svUtf8 => "glMultiTexCoord4sv"u8;
        public static ReadOnlySpan<byte> LoadTransposeMatrixfUtf8 => "glLoadTransposeMatrixf"u8;
        public static ReadOnlySpan<byte> LoadTransposeMatrixdUtf8 => "glLoadTransposeMatrixd"u8;
        public static ReadOnlySpan<byte> MultTransposeMatrixfUtf8 => "glMultTransposeMatrixf"u8;
        public static ReadOnlySpan<byte> MultTransposeMatrixdUtf8 => "glMultTransposeMatrixd"u8;
        public static ReadOnlySpan<byte> BlendFuncSeparateUtf8 => "glBlendFuncSeparate"u8;
        public static ReadOnlySpan<byte> MultiDrawArraysUtf8 => "glMultiDrawArrays"u8;
        public static ReadOnlySpan<byte> MultiDrawElementsUtf8 => "glMultiDrawElements"u8;
        public static ReadOnlySpan<byte> PointParameterfUtf8 => "glPointParameterf"u8;
        public static ReadOnlySpan<byte> PointParameterfvUtf8 => "glPointParameterfv"u8;
        public static ReadOnlySpan<byte> PointParameteriUtf8 => "glPointParameteri"u8;
        public static ReadOnlySpan<byte> PointParameterivUtf8 => "glPointParameteriv"u8;
        public static ReadOnlySpan<byte> FogCoordfUtf8 => "glFogCoordf"u8;
        public static ReadOnlySpan<byte> FogCoordfvUtf8 => "glFogCoordfv"u8;
        public static ReadOnlySpan<byte> FogCoorddUtf8 => "glFogCoordd"u8;
        public static ReadOnlySpan<byte> FogCoorddvUtf8 => "glFogCoorddv"u8;
        public static ReadOnlySpan<byte> FogCoordPointerUtf8 => "glFogCoordPointer"u8;
        public static ReadOnlySpan<byte> SecondaryColor3bUtf8 => "glSecondaryColor3b"u8;
        public static ReadOnlySpan<byte> SecondaryColor3bvUtf8 => "glSecondaryColor3bv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3dUtf8 => "glSecondaryColor3d"u8;
        public static ReadOnlySpan<byte> SecondaryColor3dvUtf8 => "glSecondaryColor3dv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3fUtf8 => "glSecondaryColor3f"u8;
        public static ReadOnlySpan<byte> SecondaryColor3fvUtf8 => "glSecondaryColor3fv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3iUtf8 => "glSecondaryColor3i"u8;
        public static ReadOnlySpan<byte> SecondaryColor3ivUtf8 => "glSecondaryColor3iv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3sUtf8 => "glSecondaryColor3s"u8;
        public static ReadOnlySpan<byte> SecondaryColor3svUtf8 => "glSecondaryColor3sv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3ubUtf8 => "glSecondaryColor3ub"u8;
        public static ReadOnlySpan<byte> SecondaryColor3ubvUtf8 => "glSecondaryColor3ubv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3uiUtf8 => "glSecondaryColor3ui"u8;
        public static ReadOnlySpan<byte> SecondaryColor3uivUtf8 => "glSecondaryColor3uiv"u8;
        public static ReadOnlySpan<byte> SecondaryColor3usUtf8 => "glSecondaryColor3us"u8;
        public static ReadOnlySpan<byte> SecondaryColor3usvUtf8 => "glSecondaryColor3usv"u8;
        public static ReadOnlySpan<byte> SecondaryColorPointerUtf8 => "glSecondaryColorPointer"u8;
        public static ReadOnlySpan<byte> WindowPos2dUtf8 => "glWindowPos2d"u8;
        public static ReadOnlySpan<byte> WindowPos2dvUtf8 => "glWindowPos2dv"u8;
        public static ReadOnlySpan<byte> WindowPos2fUtf8 => "glWindowPos2f"u8;
        public static ReadOnlySpan<byte> WindowPos2fvUtf8 => "glWindowPos2fv"u8;
        public static ReadOnlySpan<byte> WindowPos2iUtf8 => "glWindowPos2i"u8;
        public static ReadOnlySpan<byte> WindowPos2ivUtf8 => "glWindowPos2iv"u8;
        public static ReadOnlySpan<byte> WindowPos2sUtf8 => "glWindowPos2s"u8;
        public static ReadOnlySpan<byte> WindowPos2svUtf8 => "glWindowPos2sv"u8;
        public static ReadOnlySpan<byte> WindowPos3dUtf8 => "glWindowPos3d"u8;
        public static ReadOnlySpan<byte> WindowPos3dvUtf8 => "glWindowPos3dv"u8;
        public static ReadOnlySpan<byte> WindowPos3fUtf8 => "glWindowPos3f"u8;
        public static ReadOnlySpan<byte> WindowPos3fvUtf8 => "glWindowPos3fv"u8;
        public static ReadOnlySpan<byte> WindowPos3iUtf8 => "glWindowPos3i"u8;
        public static ReadOnlySpan<byte> WindowPos3ivUtf8 => "glWindowPos3iv"u8;
        public static ReadOnlySpan<byte> WindowPos3sUtf8 => "glWindowPos3s"u8;
        public static ReadOnlySpan<byte> WindowPos3svUtf8 => "glWindowPos3sv"u8;
        public static ReadOnlySpan<byte> BlendColorUtf8 => "glBlendColor"u8;
        public static ReadOnlySpan<byte> BlendEquationUtf8 => "glBlendEquation"u8;
        public static ReadOnlySpan<byte> GenQueriesUtf8 => "glGenQueries"u8;
        public static ReadOnlySpan<byte> DeleteQueriesUtf8 => "glDeleteQueries"u8;
        public static ReadOnlySpan<byte> IsQueryUtf8 => "glIsQuery"u8;
        public static ReadOnlySpan<byte> BeginQueryUtf8 => "glBeginQuery"u8;
        public static ReadOnlySpan<byte> EndQueryUtf8 => "glEndQuery"u8;
        public static ReadOnlySpan<byte> GetQueryivUtf8 => "glGetQueryiv"u8;
        public static ReadOnlySpan<byte> GetQueryObjectivUtf8 => "glGetQueryObjectiv"u8;
        public static ReadOnlySpan<byte> GetQueryObjectuivUtf8 => "glGetQueryObjectuiv"u8;
        public static ReadOnlySpan<byte> BindBufferUtf8 => "glBindBuffer"u8;
        public static ReadOnlySpan<byte> DeleteBuffersUtf8 => "glDeleteBuffers"u8;
        public static ReadOnlySpan<byte> GenBuffersUtf8 => "glGenBuffers"u8;
        public static ReadOnlySpan<byte> IsBufferUtf8 => "glIsBuffer"u8;
        public static ReadOnlySpan<byte> BufferDataUtf8 => "glBufferData"u8;
        public static ReadOnlySpan<byte> BufferSubDataUtf8 => "glBufferSubData"u8;
        public static ReadOnlySpan<byte> GetBufferSubDataUtf8 => "glGetBufferSubData"u8;
        public static ReadOnlySpan<byte> MapBufferUtf8 => "glMapBuffer"u8;
        public static ReadOnlySpan<byte> UnmapBufferUtf8 => "glUnmapBuffer"u8;
        public static ReadOnlySpan<byte> GetBufferParameterivUtf8 => "glGetBufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetBufferPointervUtf8 => "glGetBufferPointerv"u8;
        public static ReadOnlySpan<byte> BlendEquationSeparateUtf8 => "glBlendEquationSeparate"u8;
        public static ReadOnlySpan<byte> DrawBuffersUtf8 => "glDrawBuffers"u8;
        public static ReadOnlySpan<byte> StencilOpSeparateUtf8 => "glStencilOpSeparate"u8;
        public static ReadOnlySpan<byte> StencilFuncSeparateUtf8 => "glStencilFuncSeparate"u8;
        public static ReadOnlySpan<byte> StencilMaskSeparateUtf8 => "glStencilMaskSeparate"u8;
        public static ReadOnlySpan<byte> AttachShaderUtf8 => "glAttachShader"u8;
        public static ReadOnlySpan<byte> BindAttribLocationUtf8 => "glBindAttribLocation"u8;
        public static ReadOnlySpan<byte> CompileShaderUtf8 => "glCompileShader"u8;
        public static ReadOnlySpan<byte> CreateProgramUtf8 => "glCreateProgram"u8;
        public static ReadOnlySpan<byte> CreateShaderUtf8 => "glCreateShader"u8;
        public static ReadOnlySpan<byte> DeleteProgramUtf8 => "glDeleteProgram"u8;
        public static ReadOnlySpan<byte> DeleteShaderUtf8 => "glDeleteShader"u8;
        public static ReadOnlySpan<byte> DetachShaderUtf8 => "glDetachShader"u8;
        public static ReadOnlySpan<byte> DisableVertexAttribArrayUtf8 => "glDisableVertexAttribArray"u8;
        public static ReadOnlySpan<byte> EnableVertexAttribArrayUtf8 => "glEnableVertexAttribArray"u8;
        public static ReadOnlySpan<byte> GetActiveAttribUtf8 => "glGetActiveAttrib"u8;
        public static ReadOnlySpan<byte> GetActiveUniformUtf8 => "glGetActiveUniform"u8;
        public static ReadOnlySpan<byte> GetAttachedShadersUtf8 => "glGetAttachedShaders"u8;
        public static ReadOnlySpan<byte> GetAttribLocationUtf8 => "glGetAttribLocation"u8;
        public static ReadOnlySpan<byte> GetProgramivUtf8 => "glGetProgramiv"u8;
        public static ReadOnlySpan<byte> GetProgramInfoLogUtf8 => "glGetProgramInfoLog"u8;
        public static ReadOnlySpan<byte> GetShaderivUtf8 => "glGetShaderiv"u8;
        public static ReadOnlySpan<byte> GetShaderInfoLogUtf8 => "glGetShaderInfoLog"u8;
        public static ReadOnlySpan<byte> GetShaderSourceUtf8 => "glGetShaderSource"u8;
        public static ReadOnlySpan<byte> GetUniformLocationUtf8 => "glGetUniformLocation"u8;
        public static ReadOnlySpan<byte> GetUniformfvUtf8 => "glGetUniformfv"u8;
        public static ReadOnlySpan<byte> GetUniformivUtf8 => "glGetUniformiv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribdvUtf8 => "glGetVertexAttribdv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribfvUtf8 => "glGetVertexAttribfv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribivUtf8 => "glGetVertexAttribiv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribPointervUtf8 => "glGetVertexAttribPointerv"u8;
        public static ReadOnlySpan<byte> IsProgramUtf8 => "glIsProgram"u8;
        public static ReadOnlySpan<byte> IsShaderUtf8 => "glIsShader"u8;
        public static ReadOnlySpan<byte> LinkProgramUtf8 => "glLinkProgram"u8;
        public static ReadOnlySpan<byte> ShaderSourceUtf8 => "glShaderSource"u8;
        public static ReadOnlySpan<byte> UseProgramUtf8 => "glUseProgram"u8;
        public static ReadOnlySpan<byte> Uniform1fUtf8 => "glUniform1f"u8;
        public static ReadOnlySpan<byte> Uniform2fUtf8 => "glUniform2f"u8;
        public static ReadOnlySpan<byte> Uniform3fUtf8 => "glUniform3f"u8;
        public static ReadOnlySpan<byte> Uniform4fUtf8 => "glUniform4f"u8;
        public static ReadOnlySpan<byte> Uniform1iUtf8 => "glUniform1i"u8;
        public static ReadOnlySpan<byte> Uniform2iUtf8 => "glUniform2i"u8;
        public static ReadOnlySpan<byte> Uniform3iUtf8 => "glUniform3i"u8;
        public static ReadOnlySpan<byte> Uniform4iUtf8 => "glUniform4i"u8;
        public static ReadOnlySpan<byte> Uniform1fvUtf8 => "glUniform1fv"u8;
        public static ReadOnlySpan<byte> Uniform2fvUtf8 => "glUniform2fv"u8;
        public static ReadOnlySpan<byte> Uniform3fvUtf8 => "glUniform3fv"u8;
        public static ReadOnlySpan<byte> Uniform4fvUtf8 => "glUniform4fv"u8;
        public static ReadOnlySpan<byte> Uniform1ivUtf8 => "glUniform1iv"u8;
        public static ReadOnlySpan<byte> Uniform2ivUtf8 => "glUniform2iv"u8;
        public static ReadOnlySpan<byte> Uniform3ivUtf8 => "glUniform3iv"u8;
        public static ReadOnlySpan<byte> Uniform4ivUtf8 => "glUniform4iv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2fvUtf8 => "glUniformMatrix2fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3fvUtf8 => "glUniformMatrix3fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4fvUtf8 => "glUniformMatrix4fv"u8;
        public static ReadOnlySpan<byte> ValidateProgramUtf8 => "glValidateProgram"u8;
        public static ReadOnlySpan<byte> VertexAttrib1dUtf8 => "glVertexAttrib1d"u8;
        public static ReadOnlySpan<byte> VertexAttrib1dvUtf8 => "glVertexAttrib1dv"u8;
        public static ReadOnlySpan<byte> VertexAttrib1fUtf8 => "glVertexAttrib1f"u8;
        public static ReadOnlySpan<byte> VertexAttrib1fvUtf8 => "glVertexAttrib1fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib1sUtf8 => "glVertexAttrib1s"u8;
        public static ReadOnlySpan<byte> VertexAttrib1svUtf8 => "glVertexAttrib1sv"u8;
        public static ReadOnlySpan<byte> VertexAttrib2dUtf8 => "glVertexAttrib2d"u8;
        public static ReadOnlySpan<byte> VertexAttrib2dvUtf8 => "glVertexAttrib2dv"u8;
        public static ReadOnlySpan<byte> VertexAttrib2fUtf8 => "glVertexAttrib2f"u8;
        public static ReadOnlySpan<byte> VertexAttrib2fvUtf8 => "glVertexAttrib2fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib2sUtf8 => "glVertexAttrib2s"u8;
        public static ReadOnlySpan<byte> VertexAttrib2svUtf8 => "glVertexAttrib2sv"u8;
        public static ReadOnlySpan<byte> VertexAttrib3dUtf8 => "glVertexAttrib3d"u8;
        public static ReadOnlySpan<byte> VertexAttrib3dvUtf8 => "glVertexAttrib3dv"u8;
        public static ReadOnlySpan<byte> VertexAttrib3fUtf8 => "glVertexAttrib3f"u8;
        public static ReadOnlySpan<byte> VertexAttrib3fvUtf8 => "glVertexAttrib3fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib3sUtf8 => "glVertexAttrib3s"u8;
        public static ReadOnlySpan<byte> VertexAttrib3svUtf8 => "glVertexAttrib3sv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NbvUtf8 => "glVertexAttrib4Nbv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NivUtf8 => "glVertexAttrib4Niv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NsvUtf8 => "glVertexAttrib4Nsv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NubUtf8 => "glVertexAttrib4Nub"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NubvUtf8 => "glVertexAttrib4Nubv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NuivUtf8 => "glVertexAttrib4Nuiv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4NusvUtf8 => "glVertexAttrib4Nusv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4bvUtf8 => "glVertexAttrib4bv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4dUtf8 => "glVertexAttrib4d"u8;
        public static ReadOnlySpan<byte> VertexAttrib4dvUtf8 => "glVertexAttrib4dv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4fUtf8 => "glVertexAttrib4f"u8;
        public static ReadOnlySpan<byte> VertexAttrib4fvUtf8 => "glVertexAttrib4fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4ivUtf8 => "glVertexAttrib4iv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4sUtf8 => "glVertexAttrib4s"u8;
        public static ReadOnlySpan<byte> VertexAttrib4svUtf8 => "glVertexAttrib4sv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4ubvUtf8 => "glVertexAttrib4ubv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4uivUtf8 => "glVertexAttrib4uiv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4usvUtf8 => "glVertexAttrib4usv"u8;
        public static ReadOnlySpan<byte> VertexAttribPointerUtf8 => "glVertexAttribPointer"u8;
        public static ReadOnlySpan<byte> UniformMatrix2x3fvUtf8 => "glUniformMatrix2x3fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3x2fvUtf8 => "glUniformMatrix3x2fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2x4fvUtf8 => "glUniformMatrix2x4fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4x2fvUtf8 => "glUniformMatrix4x2fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3x4fvUtf8 => "glUniformMatrix3x4fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4x3fvUtf8 => "glUniformMatrix4x3fv"u8;
        public static ReadOnlySpan<byte> ColorMaskiUtf8 => "glColorMaski"u8;
        public static ReadOnlySpan<byte> GetBooleani_vUtf8 => "glGetBooleani_v"u8;
        public static ReadOnlySpan<byte> GetIntegeri_vUtf8 => "glGetIntegeri_v"u8;
        public static ReadOnlySpan<byte> EnableiUtf8 => "glEnablei"u8;
        public static ReadOnlySpan<byte> DisableiUtf8 => "glDisablei"u8;
        public static ReadOnlySpan<byte> IsEnablediUtf8 => "glIsEnabledi"u8;
        public static ReadOnlySpan<byte> BeginTransformFeedbackUtf8 => "glBeginTransformFeedback"u8;
        public static ReadOnlySpan<byte> EndTransformFeedbackUtf8 => "glEndTransformFeedback"u8;
        public static ReadOnlySpan<byte> BindBufferRangeUtf8 => "glBindBufferRange"u8;
        public static ReadOnlySpan<byte> BindBufferBaseUtf8 => "glBindBufferBase"u8;
        public static ReadOnlySpan<byte> TransformFeedbackVaryingsUtf8 => "glTransformFeedbackVaryings"u8;
        public static ReadOnlySpan<byte> GetTransformFeedbackVaryingUtf8 => "glGetTransformFeedbackVarying"u8;
        public static ReadOnlySpan<byte> ClampColorUtf8 => "glClampColor"u8;
        public static ReadOnlySpan<byte> BeginConditionalRenderUtf8 => "glBeginConditionalRender"u8;
        public static ReadOnlySpan<byte> EndConditionalRenderUtf8 => "glEndConditionalRender"u8;
        public static ReadOnlySpan<byte> VertexAttribIPointerUtf8 => "glVertexAttribIPointer"u8;
        public static ReadOnlySpan<byte> GetVertexAttribIivUtf8 => "glGetVertexAttribIiv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribIuivUtf8 => "glGetVertexAttribIuiv"u8;
        public static ReadOnlySpan<byte> VertexAttribI1iUtf8 => "glVertexAttribI1i"u8;
        public static ReadOnlySpan<byte> VertexAttribI2iUtf8 => "glVertexAttribI2i"u8;
        public static ReadOnlySpan<byte> VertexAttribI3iUtf8 => "glVertexAttribI3i"u8;
        public static ReadOnlySpan<byte> VertexAttribI4iUtf8 => "glVertexAttribI4i"u8;
        public static ReadOnlySpan<byte> VertexAttribI1uiUtf8 => "glVertexAttribI1ui"u8;
        public static ReadOnlySpan<byte> VertexAttribI2uiUtf8 => "glVertexAttribI2ui"u8;
        public static ReadOnlySpan<byte> VertexAttribI3uiUtf8 => "glVertexAttribI3ui"u8;
        public static ReadOnlySpan<byte> VertexAttribI4uiUtf8 => "glVertexAttribI4ui"u8;
        public static ReadOnlySpan<byte> VertexAttribI1ivUtf8 => "glVertexAttribI1iv"u8;
        public static ReadOnlySpan<byte> VertexAttribI2ivUtf8 => "glVertexAttribI2iv"u8;
        public static ReadOnlySpan<byte> VertexAttribI3ivUtf8 => "glVertexAttribI3iv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4ivUtf8 => "glVertexAttribI4iv"u8;
        public static ReadOnlySpan<byte> VertexAttribI1uivUtf8 => "glVertexAttribI1uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribI2uivUtf8 => "glVertexAttribI2uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribI3uivUtf8 => "glVertexAttribI3uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4uivUtf8 => "glVertexAttribI4uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4bvUtf8 => "glVertexAttribI4bv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4svUtf8 => "glVertexAttribI4sv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4ubvUtf8 => "glVertexAttribI4ubv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4usvUtf8 => "glVertexAttribI4usv"u8;
        public static ReadOnlySpan<byte> GetUniformuivUtf8 => "glGetUniformuiv"u8;
        public static ReadOnlySpan<byte> BindFragDataLocationUtf8 => "glBindFragDataLocation"u8;
        public static ReadOnlySpan<byte> GetFragDataLocationUtf8 => "glGetFragDataLocation"u8;
        public static ReadOnlySpan<byte> Uniform1uiUtf8 => "glUniform1ui"u8;
        public static ReadOnlySpan<byte> Uniform2uiUtf8 => "glUniform2ui"u8;
        public static ReadOnlySpan<byte> Uniform3uiUtf8 => "glUniform3ui"u8;
        public static ReadOnlySpan<byte> Uniform4uiUtf8 => "glUniform4ui"u8;
        public static ReadOnlySpan<byte> Uniform1uivUtf8 => "glUniform1uiv"u8;
        public static ReadOnlySpan<byte> Uniform2uivUtf8 => "glUniform2uiv"u8;
        public static ReadOnlySpan<byte> Uniform3uivUtf8 => "glUniform3uiv"u8;
        public static ReadOnlySpan<byte> Uniform4uivUtf8 => "glUniform4uiv"u8;
        public static ReadOnlySpan<byte> TexParameterIivUtf8 => "glTexParameterIiv"u8;
        public static ReadOnlySpan<byte> TexParameterIuivUtf8 => "glTexParameterIuiv"u8;
        public static ReadOnlySpan<byte> GetTexParameterIivUtf8 => "glGetTexParameterIiv"u8;
        public static ReadOnlySpan<byte> GetTexParameterIuivUtf8 => "glGetTexParameterIuiv"u8;
        public static ReadOnlySpan<byte> ClearBufferivUtf8 => "glClearBufferiv"u8;
        public static ReadOnlySpan<byte> ClearBufferuivUtf8 => "glClearBufferuiv"u8;
        public static ReadOnlySpan<byte> ClearBufferfvUtf8 => "glClearBufferfv"u8;
        public static ReadOnlySpan<byte> ClearBufferfiUtf8 => "glClearBufferfi"u8;
        public static ReadOnlySpan<byte> GetStringiUtf8 => "glGetStringi"u8;
        public static ReadOnlySpan<byte> IsRenderbufferUtf8 => "glIsRenderbuffer"u8;
        public static ReadOnlySpan<byte> BindRenderbufferUtf8 => "glBindRenderbuffer"u8;
        public static ReadOnlySpan<byte> DeleteRenderbuffersUtf8 => "glDeleteRenderbuffers"u8;
        public static ReadOnlySpan<byte> GenRenderbuffersUtf8 => "glGenRenderbuffers"u8;
        public static ReadOnlySpan<byte> RenderbufferStorageUtf8 => "glRenderbufferStorage"u8;
        public static ReadOnlySpan<byte> GetRenderbufferParameterivUtf8 => "glGetRenderbufferParameteriv"u8;
        public static ReadOnlySpan<byte> IsFramebufferUtf8 => "glIsFramebuffer"u8;
        public static ReadOnlySpan<byte> BindFramebufferUtf8 => "glBindFramebuffer"u8;
        public static ReadOnlySpan<byte> DeleteFramebuffersUtf8 => "glDeleteFramebuffers"u8;
        public static ReadOnlySpan<byte> GenFramebuffersUtf8 => "glGenFramebuffers"u8;
        public static ReadOnlySpan<byte> CheckFramebufferStatusUtf8 => "glCheckFramebufferStatus"u8;
        public static ReadOnlySpan<byte> FramebufferTexture1DUtf8 => "glFramebufferTexture1D"u8;
        public static ReadOnlySpan<byte> FramebufferTexture2DUtf8 => "glFramebufferTexture2D"u8;
        public static ReadOnlySpan<byte> FramebufferTexture3DUtf8 => "glFramebufferTexture3D"u8;
        public static ReadOnlySpan<byte> FramebufferRenderbufferUtf8 => "glFramebufferRenderbuffer"u8;
        public static ReadOnlySpan<byte> GetFramebufferAttachmentParameterivUtf8 => "glGetFramebufferAttachmentParameteriv"u8;
        public static ReadOnlySpan<byte> GenerateMipmapUtf8 => "glGenerateMipmap"u8;
        public static ReadOnlySpan<byte> BlitFramebufferUtf8 => "glBlitFramebuffer"u8;
        public static ReadOnlySpan<byte> RenderbufferStorageMultisampleUtf8 => "glRenderbufferStorageMultisample"u8;
        public static ReadOnlySpan<byte> FramebufferTextureLayerUtf8 => "glFramebufferTextureLayer"u8;
        public static ReadOnlySpan<byte> MapBufferRangeUtf8 => "glMapBufferRange"u8;
        public static ReadOnlySpan<byte> FlushMappedBufferRangeUtf8 => "glFlushMappedBufferRange"u8;
        public static ReadOnlySpan<byte> BindVertexArrayUtf8 => "glBindVertexArray"u8;
        public static ReadOnlySpan<byte> DeleteVertexArraysUtf8 => "glDeleteVertexArrays"u8;
        public static ReadOnlySpan<byte> GenVertexArraysUtf8 => "glGenVertexArrays"u8;
        public static ReadOnlySpan<byte> IsVertexArrayUtf8 => "glIsVertexArray"u8;
        public static ReadOnlySpan<byte> DrawArraysInstancedUtf8 => "glDrawArraysInstanced"u8;
        public static ReadOnlySpan<byte> DrawElementsInstancedUtf8 => "glDrawElementsInstanced"u8;
        public static ReadOnlySpan<byte> TexBufferUtf8 => "glTexBuffer"u8;
        public static ReadOnlySpan<byte> PrimitiveRestartIndexUtf8 => "glPrimitiveRestartIndex"u8;
        public static ReadOnlySpan<byte> CopyBufferSubDataUtf8 => "glCopyBufferSubData"u8;
        public static ReadOnlySpan<byte> GetUniformIndicesUtf8 => "glGetUniformIndices"u8;
        public static ReadOnlySpan<byte> GetActiveUniformsivUtf8 => "glGetActiveUniformsiv"u8;
        public static ReadOnlySpan<byte> GetActiveUniformNameUtf8 => "glGetActiveUniformName"u8;
        public static ReadOnlySpan<byte> GetUniformBlockIndexUtf8 => "glGetUniformBlockIndex"u8;
        public static ReadOnlySpan<byte> GetActiveUniformBlockivUtf8 => "glGetActiveUniformBlockiv"u8;
        public static ReadOnlySpan<byte> GetActiveUniformBlockNameUtf8 => "glGetActiveUniformBlockName"u8;
        public static ReadOnlySpan<byte> UniformBlockBindingUtf8 => "glUniformBlockBinding"u8;
        public static ReadOnlySpan<byte> DrawElementsBaseVertexUtf8 => "glDrawElementsBaseVertex"u8;
        public static ReadOnlySpan<byte> DrawRangeElementsBaseVertexUtf8 => "glDrawRangeElementsBaseVertex"u8;
        public static ReadOnlySpan<byte> DrawElementsInstancedBaseVertexUtf8 => "glDrawElementsInstancedBaseVertex"u8;
        public static ReadOnlySpan<byte> MultiDrawElementsBaseVertexUtf8 => "glMultiDrawElementsBaseVertex"u8;
        public static ReadOnlySpan<byte> ProvokingVertexUtf8 => "glProvokingVertex"u8;
        public static ReadOnlySpan<byte> FenceSyncUtf8 => "glFenceSync"u8;
        public static ReadOnlySpan<byte> IsSyncUtf8 => "glIsSync"u8;
        public static ReadOnlySpan<byte> DeleteSyncUtf8 => "glDeleteSync"u8;
        public static ReadOnlySpan<byte> ClientWaitSyncUtf8 => "glClientWaitSync"u8;
        public static ReadOnlySpan<byte> WaitSyncUtf8 => "glWaitSync"u8;
        public static ReadOnlySpan<byte> GetInteger64vUtf8 => "glGetInteger64v"u8;
        public static ReadOnlySpan<byte> GetSyncivUtf8 => "glGetSynciv"u8;
        public static ReadOnlySpan<byte> GetInteger64i_vUtf8 => "glGetInteger64i_v"u8;
        public static ReadOnlySpan<byte> GetBufferParameteri64vUtf8 => "glGetBufferParameteri64v"u8;
        public static ReadOnlySpan<byte> FramebufferTextureUtf8 => "glFramebufferTexture"u8;
        public static ReadOnlySpan<byte> TexImage2DMultisampleUtf8 => "glTexImage2DMultisample"u8;
        public static ReadOnlySpan<byte> TexImage3DMultisampleUtf8 => "glTexImage3DMultisample"u8;
        public static ReadOnlySpan<byte> GetMultisamplefvUtf8 => "glGetMultisamplefv"u8;
        public static ReadOnlySpan<byte> SampleMaskiUtf8 => "glSampleMaski"u8;
        public static ReadOnlySpan<byte> BindFragDataLocationIndexedUtf8 => "glBindFragDataLocationIndexed"u8;
        public static ReadOnlySpan<byte> GetFragDataIndexUtf8 => "glGetFragDataIndex"u8;
        public static ReadOnlySpan<byte> GenSamplersUtf8 => "glGenSamplers"u8;
        public static ReadOnlySpan<byte> DeleteSamplersUtf8 => "glDeleteSamplers"u8;
        public static ReadOnlySpan<byte> IsSamplerUtf8 => "glIsSampler"u8;
        public static ReadOnlySpan<byte> BindSamplerUtf8 => "glBindSampler"u8;
        public static ReadOnlySpan<byte> SamplerParameteriUtf8 => "glSamplerParameteri"u8;
        public static ReadOnlySpan<byte> SamplerParameterivUtf8 => "glSamplerParameteriv"u8;
        public static ReadOnlySpan<byte> SamplerParameterfUtf8 => "glSamplerParameterf"u8;
        public static ReadOnlySpan<byte> SamplerParameterfvUtf8 => "glSamplerParameterfv"u8;
        public static ReadOnlySpan<byte> SamplerParameterIivUtf8 => "glSamplerParameterIiv"u8;
        public static ReadOnlySpan<byte> SamplerParameterIuivUtf8 => "glSamplerParameterIuiv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterivUtf8 => "glGetSamplerParameteriv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterIivUtf8 => "glGetSamplerParameterIiv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterfvUtf8 => "glGetSamplerParameterfv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterIuivUtf8 => "glGetSamplerParameterIuiv"u8;
        public static ReadOnlySpan<byte> QueryCounterUtf8 => "glQueryCounter"u8;
        public static ReadOnlySpan<byte> GetQueryObjecti64vUtf8 => "glGetQueryObjecti64v"u8;
        public static ReadOnlySpan<byte> GetQueryObjectui64vUtf8 => "glGetQueryObjectui64v"u8;
        public static ReadOnlySpan<byte> VertexAttribDivisorUtf8 => "glVertexAttribDivisor"u8;
        public static ReadOnlySpan<byte> VertexAttribP1uiUtf8 => "glVertexAttribP1ui"u8;
        public static ReadOnlySpan<byte> VertexAttribP1uivUtf8 => "glVertexAttribP1uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribP2uiUtf8 => "glVertexAttribP2ui"u8;
        public static ReadOnlySpan<byte> VertexAttribP2uivUtf8 => "glVertexAttribP2uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribP3uiUtf8 => "glVertexAttribP3ui"u8;
        public static ReadOnlySpan<byte> VertexAttribP3uivUtf8 => "glVertexAttribP3uiv"u8;
        public static ReadOnlySpan<byte> VertexAttribP4uiUtf8 => "glVertexAttribP4ui"u8;
        public static ReadOnlySpan<byte> VertexAttribP4uivUtf8 => "glVertexAttribP4uiv"u8;
        public static ReadOnlySpan<byte> VertexP2uiUtf8 => "glVertexP2ui"u8;
        public static ReadOnlySpan<byte> VertexP2uivUtf8 => "glVertexP2uiv"u8;
        public static ReadOnlySpan<byte> VertexP3uiUtf8 => "glVertexP3ui"u8;
        public static ReadOnlySpan<byte> VertexP3uivUtf8 => "glVertexP3uiv"u8;
        public static ReadOnlySpan<byte> VertexP4uiUtf8 => "glVertexP4ui"u8;
        public static ReadOnlySpan<byte> VertexP4uivUtf8 => "glVertexP4uiv"u8;
        public static ReadOnlySpan<byte> TexCoordP1uiUtf8 => "glTexCoordP1ui"u8;
        public static ReadOnlySpan<byte> TexCoordP1uivUtf8 => "glTexCoordP1uiv"u8;
        public static ReadOnlySpan<byte> TexCoordP2uiUtf8 => "glTexCoordP2ui"u8;
        public static ReadOnlySpan<byte> TexCoordP2uivUtf8 => "glTexCoordP2uiv"u8;
        public static ReadOnlySpan<byte> TexCoordP3uiUtf8 => "glTexCoordP3ui"u8;
        public static ReadOnlySpan<byte> TexCoordP3uivUtf8 => "glTexCoordP3uiv"u8;
        public static ReadOnlySpan<byte> TexCoordP4uiUtf8 => "glTexCoordP4ui"u8;
        public static ReadOnlySpan<byte> TexCoordP4uivUtf8 => "glTexCoordP4uiv"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP1uiUtf8 => "glMultiTexCoordP1ui"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP1uivUtf8 => "glMultiTexCoordP1uiv"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP2uiUtf8 => "glMultiTexCoordP2ui"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP2uivUtf8 => "glMultiTexCoordP2uiv"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP3uiUtf8 => "glMultiTexCoordP3ui"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP3uivUtf8 => "glMultiTexCoordP3uiv"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP4uiUtf8 => "glMultiTexCoordP4ui"u8;
        public static ReadOnlySpan<byte> MultiTexCoordP4uivUtf8 => "glMultiTexCoordP4uiv"u8;
        public static ReadOnlySpan<byte> NormalP3uiUtf8 => "glNormalP3ui"u8;
        public static ReadOnlySpan<byte> NormalP3uivUtf8 => "glNormalP3uiv"u8;
        public static ReadOnlySpan<byte> ColorP3uiUtf8 => "glColorP3ui"u8;
        public static ReadOnlySpan<byte> ColorP3uivUtf8 => "glColorP3uiv"u8;
        public static ReadOnlySpan<byte> ColorP4uiUtf8 => "glColorP4ui"u8;
        public static ReadOnlySpan<byte> ColorP4uivUtf8 => "glColorP4uiv"u8;
        public static ReadOnlySpan<byte> SecondaryColorP3uiUtf8 => "glSecondaryColorP3ui"u8;
        public static ReadOnlySpan<byte> SecondaryColorP3uivUtf8 => "glSecondaryColorP3uiv"u8;
        public static ReadOnlySpan<byte> MinSampleShadingUtf8 => "glMinSampleShading"u8;
        public static ReadOnlySpan<byte> BlendEquationiUtf8 => "glBlendEquationi"u8;
        public static ReadOnlySpan<byte> BlendEquationSeparateiUtf8 => "glBlendEquationSeparatei"u8;
        public static ReadOnlySpan<byte> BlendFunciUtf8 => "glBlendFunci"u8;
        public static ReadOnlySpan<byte> BlendFuncSeparateiUtf8 => "glBlendFuncSeparatei"u8;
        public static ReadOnlySpan<byte> DrawArraysIndirectUtf8 => "glDrawArraysIndirect"u8;
        public static ReadOnlySpan<byte> DrawElementsIndirectUtf8 => "glDrawElementsIndirect"u8;
        public static ReadOnlySpan<byte> Uniform1dUtf8 => "glUniform1d"u8;
        public static ReadOnlySpan<byte> Uniform2dUtf8 => "glUniform2d"u8;
        public static ReadOnlySpan<byte> Uniform3dUtf8 => "glUniform3d"u8;
        public static ReadOnlySpan<byte> Uniform4dUtf8 => "glUniform4d"u8;
        public static ReadOnlySpan<byte> Uniform1dvUtf8 => "glUniform1dv"u8;
        public static ReadOnlySpan<byte> Uniform2dvUtf8 => "glUniform2dv"u8;
        public static ReadOnlySpan<byte> Uniform3dvUtf8 => "glUniform3dv"u8;
        public static ReadOnlySpan<byte> Uniform4dvUtf8 => "glUniform4dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2dvUtf8 => "glUniformMatrix2dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3dvUtf8 => "glUniformMatrix3dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4dvUtf8 => "glUniformMatrix4dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2x3dvUtf8 => "glUniformMatrix2x3dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2x4dvUtf8 => "glUniformMatrix2x4dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3x2dvUtf8 => "glUniformMatrix3x2dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3x4dvUtf8 => "glUniformMatrix3x4dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4x2dvUtf8 => "glUniformMatrix4x2dv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4x3dvUtf8 => "glUniformMatrix4x3dv"u8;
        public static ReadOnlySpan<byte> GetUniformdvUtf8 => "glGetUniformdv"u8;
        public static ReadOnlySpan<byte> GetSubroutineUniformLocationUtf8 => "glGetSubroutineUniformLocation"u8;
        public static ReadOnlySpan<byte> GetSubroutineIndexUtf8 => "glGetSubroutineIndex"u8;
        public static ReadOnlySpan<byte> GetActiveSubroutineUniformivUtf8 => "glGetActiveSubroutineUniformiv"u8;
        public static ReadOnlySpan<byte> GetActiveSubroutineUniformNameUtf8 => "glGetActiveSubroutineUniformName"u8;
        public static ReadOnlySpan<byte> GetActiveSubroutineNameUtf8 => "glGetActiveSubroutineName"u8;
        public static ReadOnlySpan<byte> UniformSubroutinesuivUtf8 => "glUniformSubroutinesuiv"u8;
        public static ReadOnlySpan<byte> GetUniformSubroutineuivUtf8 => "glGetUniformSubroutineuiv"u8;
        public static ReadOnlySpan<byte> GetProgramStageivUtf8 => "glGetProgramStageiv"u8;
        public static ReadOnlySpan<byte> PatchParameteriUtf8 => "glPatchParameteri"u8;
        public static ReadOnlySpan<byte> PatchParameterfvUtf8 => "glPatchParameterfv"u8;
        public static ReadOnlySpan<byte> BindTransformFeedbackUtf8 => "glBindTransformFeedback"u8;
        public static ReadOnlySpan<byte> DeleteTransformFeedbacksUtf8 => "glDeleteTransformFeedbacks"u8;
        public static ReadOnlySpan<byte> GenTransformFeedbacksUtf8 => "glGenTransformFeedbacks"u8;
        public static ReadOnlySpan<byte> IsTransformFeedbackUtf8 => "glIsTransformFeedback"u8;
        public static ReadOnlySpan<byte> PauseTransformFeedbackUtf8 => "glPauseTransformFeedback"u8;
        public static ReadOnlySpan<byte> ResumeTransformFeedbackUtf8 => "glResumeTransformFeedback"u8;
        public static ReadOnlySpan<byte> DrawTransformFeedbackUtf8 => "glDrawTransformFeedback"u8;
        public static ReadOnlySpan<byte> DrawTransformFeedbackStreamUtf8 => "glDrawTransformFeedbackStream"u8;
        public static ReadOnlySpan<byte> BeginQueryIndexedUtf8 => "glBeginQueryIndexed"u8;
        public static ReadOnlySpan<byte> EndQueryIndexedUtf8 => "glEndQueryIndexed"u8;
        public static ReadOnlySpan<byte> GetQueryIndexedivUtf8 => "glGetQueryIndexediv"u8;
        public static ReadOnlySpan<byte> ReleaseShaderCompilerUtf8 => "glReleaseShaderCompiler"u8;
        public static ReadOnlySpan<byte> ShaderBinaryUtf8 => "glShaderBinary"u8;
        public static ReadOnlySpan<byte> GetShaderPrecisionFormatUtf8 => "glGetShaderPrecisionFormat"u8;
        public static ReadOnlySpan<byte> DepthRangefUtf8 => "glDepthRangef"u8;
        public static ReadOnlySpan<byte> ClearDepthfUtf8 => "glClearDepthf"u8;
        public static ReadOnlySpan<byte> GetProgramBinaryUtf8 => "glGetProgramBinary"u8;
        public static ReadOnlySpan<byte> ProgramBinaryUtf8 => "glProgramBinary"u8;
        public static ReadOnlySpan<byte> ProgramParameteriUtf8 => "glProgramParameteri"u8;
        public static ReadOnlySpan<byte> UseProgramStagesUtf8 => "glUseProgramStages"u8;
        public static ReadOnlySpan<byte> ActiveShaderProgramUtf8 => "glActiveShaderProgram"u8;
        public static ReadOnlySpan<byte> CreateShaderProgramvUtf8 => "glCreateShaderProgramv"u8;
        public static ReadOnlySpan<byte> BindProgramPipelineUtf8 => "glBindProgramPipeline"u8;
        public static ReadOnlySpan<byte> DeleteProgramPipelinesUtf8 => "glDeleteProgramPipelines"u8;
        public static ReadOnlySpan<byte> GenProgramPipelinesUtf8 => "glGenProgramPipelines"u8;
        public static ReadOnlySpan<byte> IsProgramPipelineUtf8 => "glIsProgramPipeline"u8;
        public static ReadOnlySpan<byte> GetProgramPipelineivUtf8 => "glGetProgramPipelineiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1iUtf8 => "glProgramUniform1i"u8;
        public static ReadOnlySpan<byte> ProgramUniform1ivUtf8 => "glProgramUniform1iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1fUtf8 => "glProgramUniform1f"u8;
        public static ReadOnlySpan<byte> ProgramUniform1fvUtf8 => "glProgramUniform1fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1dUtf8 => "glProgramUniform1d"u8;
        public static ReadOnlySpan<byte> ProgramUniform1dvUtf8 => "glProgramUniform1dv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1uiUtf8 => "glProgramUniform1ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform1uivUtf8 => "glProgramUniform1uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2iUtf8 => "glProgramUniform2i"u8;
        public static ReadOnlySpan<byte> ProgramUniform2ivUtf8 => "glProgramUniform2iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2fUtf8 => "glProgramUniform2f"u8;
        public static ReadOnlySpan<byte> ProgramUniform2fvUtf8 => "glProgramUniform2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2dUtf8 => "glProgramUniform2d"u8;
        public static ReadOnlySpan<byte> ProgramUniform2dvUtf8 => "glProgramUniform2dv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2uiUtf8 => "glProgramUniform2ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform2uivUtf8 => "glProgramUniform2uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3iUtf8 => "glProgramUniform3i"u8;
        public static ReadOnlySpan<byte> ProgramUniform3ivUtf8 => "glProgramUniform3iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3fUtf8 => "glProgramUniform3f"u8;
        public static ReadOnlySpan<byte> ProgramUniform3fvUtf8 => "glProgramUniform3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3dUtf8 => "glProgramUniform3d"u8;
        public static ReadOnlySpan<byte> ProgramUniform3dvUtf8 => "glProgramUniform3dv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3uiUtf8 => "glProgramUniform3ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform3uivUtf8 => "glProgramUniform3uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4iUtf8 => "glProgramUniform4i"u8;
        public static ReadOnlySpan<byte> ProgramUniform4ivUtf8 => "glProgramUniform4iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4fUtf8 => "glProgramUniform4f"u8;
        public static ReadOnlySpan<byte> ProgramUniform4fvUtf8 => "glProgramUniform4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4dUtf8 => "glProgramUniform4d"u8;
        public static ReadOnlySpan<byte> ProgramUniform4dvUtf8 => "glProgramUniform4dv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4uiUtf8 => "glProgramUniform4ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform4uivUtf8 => "glProgramUniform4uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2fvUtf8 => "glProgramUniformMatrix2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3fvUtf8 => "glProgramUniformMatrix3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4fvUtf8 => "glProgramUniformMatrix4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2dvUtf8 => "glProgramUniformMatrix2dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3dvUtf8 => "glProgramUniformMatrix3dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4dvUtf8 => "glProgramUniformMatrix4dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2x3fvUtf8 => "glProgramUniformMatrix2x3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3x2fvUtf8 => "glProgramUniformMatrix3x2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2x4fvUtf8 => "glProgramUniformMatrix2x4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4x2fvUtf8 => "glProgramUniformMatrix4x2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3x4fvUtf8 => "glProgramUniformMatrix3x4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4x3fvUtf8 => "glProgramUniformMatrix4x3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2x3dvUtf8 => "glProgramUniformMatrix2x3dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3x2dvUtf8 => "glProgramUniformMatrix3x2dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2x4dvUtf8 => "glProgramUniformMatrix2x4dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4x2dvUtf8 => "glProgramUniformMatrix4x2dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3x4dvUtf8 => "glProgramUniformMatrix3x4dv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4x3dvUtf8 => "glProgramUniformMatrix4x3dv"u8;
        public static ReadOnlySpan<byte> ValidateProgramPipelineUtf8 => "glValidateProgramPipeline"u8;
        public static ReadOnlySpan<byte> GetProgramPipelineInfoLogUtf8 => "glGetProgramPipelineInfoLog"u8;
        public static ReadOnlySpan<byte> VertexAttribL1dUtf8 => "glVertexAttribL1d"u8;
        public static ReadOnlySpan<byte> VertexAttribL2dUtf8 => "glVertexAttribL2d"u8;
        public static ReadOnlySpan<byte> VertexAttribL3dUtf8 => "glVertexAttribL3d"u8;
        public static ReadOnlySpan<byte> VertexAttribL4dUtf8 => "glVertexAttribL4d"u8;
        public static ReadOnlySpan<byte> VertexAttribL1dvUtf8 => "glVertexAttribL1dv"u8;
        public static ReadOnlySpan<byte> VertexAttribL2dvUtf8 => "glVertexAttribL2dv"u8;
        public static ReadOnlySpan<byte> VertexAttribL3dvUtf8 => "glVertexAttribL3dv"u8;
        public static ReadOnlySpan<byte> VertexAttribL4dvUtf8 => "glVertexAttribL4dv"u8;
        public static ReadOnlySpan<byte> VertexAttribLPointerUtf8 => "glVertexAttribLPointer"u8;
        public static ReadOnlySpan<byte> GetVertexAttribLdvUtf8 => "glGetVertexAttribLdv"u8;
        public static ReadOnlySpan<byte> ViewportArrayvUtf8 => "glViewportArrayv"u8;
        public static ReadOnlySpan<byte> ViewportIndexedfUtf8 => "glViewportIndexedf"u8;
        public static ReadOnlySpan<byte> ViewportIndexedfvUtf8 => "glViewportIndexedfv"u8;
        public static ReadOnlySpan<byte> ScissorArrayvUtf8 => "glScissorArrayv"u8;
        public static ReadOnlySpan<byte> ScissorIndexedUtf8 => "glScissorIndexed"u8;
        public static ReadOnlySpan<byte> ScissorIndexedvUtf8 => "glScissorIndexedv"u8;
        public static ReadOnlySpan<byte> DepthRangeArrayvUtf8 => "glDepthRangeArrayv"u8;
        public static ReadOnlySpan<byte> DepthRangeIndexedUtf8 => "glDepthRangeIndexed"u8;
        public static ReadOnlySpan<byte> GetFloati_vUtf8 => "glGetFloati_v"u8;
        public static ReadOnlySpan<byte> GetDoublei_vUtf8 => "glGetDoublei_v"u8;
        public static ReadOnlySpan<byte> DrawArraysInstancedBaseInstanceUtf8 => "glDrawArraysInstancedBaseInstance"u8;
        public static ReadOnlySpan<byte> DrawElementsInstancedBaseInstanceUtf8 => "glDrawElementsInstancedBaseInstance"u8;
        public static ReadOnlySpan<byte> DrawElementsInstancedBaseVertexBaseInstanceUtf8 => "glDrawElementsInstancedBaseVertexBaseInstance"u8;
        public static ReadOnlySpan<byte> GetInternalformativUtf8 => "glGetInternalformativ"u8;
        public static ReadOnlySpan<byte> GetActiveAtomicCounterBufferivUtf8 => "glGetActiveAtomicCounterBufferiv"u8;
        public static ReadOnlySpan<byte> BindImageTextureUtf8 => "glBindImageTexture"u8;
        public static ReadOnlySpan<byte> MemoryBarrierUtf8 => "glMemoryBarrier"u8;
        public static ReadOnlySpan<byte> TexStorage1DUtf8 => "glTexStorage1D"u8;
        public static ReadOnlySpan<byte> TexStorage2DUtf8 => "glTexStorage2D"u8;
        public static ReadOnlySpan<byte> TexStorage3DUtf8 => "glTexStorage3D"u8;
        public static ReadOnlySpan<byte> DrawTransformFeedbackInstancedUtf8 => "glDrawTransformFeedbackInstanced"u8;
        public static ReadOnlySpan<byte> DrawTransformFeedbackStreamInstancedUtf8 => "glDrawTransformFeedbackStreamInstanced"u8;
        public static ReadOnlySpan<byte> ClearBufferDataUtf8 => "glClearBufferData"u8;
        public static ReadOnlySpan<byte> ClearBufferSubDataUtf8 => "glClearBufferSubData"u8;
        public static ReadOnlySpan<byte> DispatchComputeUtf8 => "glDispatchCompute"u8;
        public static ReadOnlySpan<byte> DispatchComputeIndirectUtf8 => "glDispatchComputeIndirect"u8;
        public static ReadOnlySpan<byte> CopyImageSubDataUtf8 => "glCopyImageSubData"u8;
        public static ReadOnlySpan<byte> FramebufferParameteriUtf8 => "glFramebufferParameteri"u8;
        public static ReadOnlySpan<byte> GetFramebufferParameterivUtf8 => "glGetFramebufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetInternalformati64vUtf8 => "glGetInternalformati64v"u8;
        public static ReadOnlySpan<byte> InvalidateTexSubImageUtf8 => "glInvalidateTexSubImage"u8;
        public static ReadOnlySpan<byte> InvalidateTexImageUtf8 => "glInvalidateTexImage"u8;
        public static ReadOnlySpan<byte> InvalidateBufferSubDataUtf8 => "glInvalidateBufferSubData"u8;
        public static ReadOnlySpan<byte> InvalidateBufferDataUtf8 => "glInvalidateBufferData"u8;
        public static ReadOnlySpan<byte> InvalidateFramebufferUtf8 => "glInvalidateFramebuffer"u8;
        public static ReadOnlySpan<byte> InvalidateSubFramebufferUtf8 => "glInvalidateSubFramebuffer"u8;
        public static ReadOnlySpan<byte> MultiDrawArraysIndirectUtf8 => "glMultiDrawArraysIndirect"u8;
        public static ReadOnlySpan<byte> MultiDrawElementsIndirectUtf8 => "glMultiDrawElementsIndirect"u8;
        public static ReadOnlySpan<byte> GetProgramInterfaceivUtf8 => "glGetProgramInterfaceiv"u8;
        public static ReadOnlySpan<byte> GetProgramResourceIndexUtf8 => "glGetProgramResourceIndex"u8;
        public static ReadOnlySpan<byte> GetProgramResourceNameUtf8 => "glGetProgramResourceName"u8;
        public static ReadOnlySpan<byte> GetProgramResourceivUtf8 => "glGetProgramResourceiv"u8;
        public static ReadOnlySpan<byte> GetProgramResourceLocationUtf8 => "glGetProgramResourceLocation"u8;
        public static ReadOnlySpan<byte> GetProgramResourceLocationIndexUtf8 => "glGetProgramResourceLocationIndex"u8;
        public static ReadOnlySpan<byte> ShaderStorageBlockBindingUtf8 => "glShaderStorageBlockBinding"u8;
        public static ReadOnlySpan<byte> TexBufferRangeUtf8 => "glTexBufferRange"u8;
        public static ReadOnlySpan<byte> TexStorage2DMultisampleUtf8 => "glTexStorage2DMultisample"u8;
        public static ReadOnlySpan<byte> TexStorage3DMultisampleUtf8 => "glTexStorage3DMultisample"u8;
        public static ReadOnlySpan<byte> TextureViewUtf8 => "glTextureView"u8;
        public static ReadOnlySpan<byte> BindVertexBufferUtf8 => "glBindVertexBuffer"u8;
        public static ReadOnlySpan<byte> VertexAttribFormatUtf8 => "glVertexAttribFormat"u8;
        public static ReadOnlySpan<byte> VertexAttribIFormatUtf8 => "glVertexAttribIFormat"u8;
        public static ReadOnlySpan<byte> VertexAttribLFormatUtf8 => "glVertexAttribLFormat"u8;
        public static ReadOnlySpan<byte> VertexAttribBindingUtf8 => "glVertexAttribBinding"u8;
        public static ReadOnlySpan<byte> VertexBindingDivisorUtf8 => "glVertexBindingDivisor"u8;
        public static ReadOnlySpan<byte> DebugMessageControlUtf8 => "glDebugMessageControl"u8;
        public static ReadOnlySpan<byte> DebugMessageInsertUtf8 => "glDebugMessageInsert"u8;
        public static ReadOnlySpan<byte> DebugMessageCallbackUtf8 => "glDebugMessageCallback"u8;
        public static ReadOnlySpan<byte> GetDebugMessageLogUtf8 => "glGetDebugMessageLog"u8;
        public static ReadOnlySpan<byte> PushDebugGroupUtf8 => "glPushDebugGroup"u8;
        public static ReadOnlySpan<byte> PopDebugGroupUtf8 => "glPopDebugGroup"u8;
        public static ReadOnlySpan<byte> ObjectLabelUtf8 => "glObjectLabel"u8;
        public static ReadOnlySpan<byte> GetObjectLabelUtf8 => "glGetObjectLabel"u8;
        public static ReadOnlySpan<byte> ObjectPtrLabelUtf8 => "glObjectPtrLabel"u8;
        public static ReadOnlySpan<byte> GetObjectPtrLabelUtf8 => "glGetObjectPtrLabel"u8;
        public static ReadOnlySpan<byte> BufferStorageUtf8 => "glBufferStorage"u8;
        public static ReadOnlySpan<byte> ClearTexImageUtf8 => "glClearTexImage"u8;
        public static ReadOnlySpan<byte> ClearTexSubImageUtf8 => "glClearTexSubImage"u8;
        public static ReadOnlySpan<byte> BindBuffersBaseUtf8 => "glBindBuffersBase"u8;
        public static ReadOnlySpan<byte> BindBuffersRangeUtf8 => "glBindBuffersRange"u8;
        public static ReadOnlySpan<byte> BindTexturesUtf8 => "glBindTextures"u8;
        public static ReadOnlySpan<byte> BindSamplersUtf8 => "glBindSamplers"u8;
        public static ReadOnlySpan<byte> BindImageTexturesUtf8 => "glBindImageTextures"u8;
        public static ReadOnlySpan<byte> BindVertexBuffersUtf8 => "glBindVertexBuffers"u8;
        public static ReadOnlySpan<byte> ClipControlUtf8 => "glClipControl"u8;
        public static ReadOnlySpan<byte> CreateTransformFeedbacksUtf8 => "glCreateTransformFeedbacks"u8;
        public static ReadOnlySpan<byte> TransformFeedbackBufferBaseUtf8 => "glTransformFeedbackBufferBase"u8;
        public static ReadOnlySpan<byte> TransformFeedbackBufferRangeUtf8 => "glTransformFeedbackBufferRange"u8;
        public static ReadOnlySpan<byte> GetTransformFeedbackivUtf8 => "glGetTransformFeedbackiv"u8;
        public static ReadOnlySpan<byte> GetTransformFeedbacki_vUtf8 => "glGetTransformFeedbacki_v"u8;
        public static ReadOnlySpan<byte> GetTransformFeedbacki64_vUtf8 => "glGetTransformFeedbacki64_v"u8;
        public static ReadOnlySpan<byte> CreateBuffersUtf8 => "glCreateBuffers"u8;
        public static ReadOnlySpan<byte> NamedBufferStorageUtf8 => "glNamedBufferStorage"u8;
        public static ReadOnlySpan<byte> NamedBufferDataUtf8 => "glNamedBufferData"u8;
        public static ReadOnlySpan<byte> NamedBufferSubDataUtf8 => "glNamedBufferSubData"u8;
        public static ReadOnlySpan<byte> CopyNamedBufferSubDataUtf8 => "glCopyNamedBufferSubData"u8;
        public static ReadOnlySpan<byte> ClearNamedBufferDataUtf8 => "glClearNamedBufferData"u8;
        public static ReadOnlySpan<byte> ClearNamedBufferSubDataUtf8 => "glClearNamedBufferSubData"u8;
        public static ReadOnlySpan<byte> MapNamedBufferUtf8 => "glMapNamedBuffer"u8;
        public static ReadOnlySpan<byte> MapNamedBufferRangeUtf8 => "glMapNamedBufferRange"u8;
        public static ReadOnlySpan<byte> UnmapNamedBufferUtf8 => "glUnmapNamedBuffer"u8;
        public static ReadOnlySpan<byte> FlushMappedNamedBufferRangeUtf8 => "glFlushMappedNamedBufferRange"u8;
        public static ReadOnlySpan<byte> GetNamedBufferParameterivUtf8 => "glGetNamedBufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetNamedBufferParameteri64vUtf8 => "glGetNamedBufferParameteri64v"u8;
        public static ReadOnlySpan<byte> GetNamedBufferPointervUtf8 => "glGetNamedBufferPointerv"u8;
        public static ReadOnlySpan<byte> GetNamedBufferSubDataUtf8 => "glGetNamedBufferSubData"u8;
        public static ReadOnlySpan<byte> CreateFramebuffersUtf8 => "glCreateFramebuffers"u8;
        public static ReadOnlySpan<byte> NamedFramebufferRenderbufferUtf8 => "glNamedFramebufferRenderbuffer"u8;
        public static ReadOnlySpan<byte> NamedFramebufferParameteriUtf8 => "glNamedFramebufferParameteri"u8;
        public static ReadOnlySpan<byte> NamedFramebufferTextureUtf8 => "glNamedFramebufferTexture"u8;
        public static ReadOnlySpan<byte> NamedFramebufferTextureLayerUtf8 => "glNamedFramebufferTextureLayer"u8;
        public static ReadOnlySpan<byte> NamedFramebufferDrawBufferUtf8 => "glNamedFramebufferDrawBuffer"u8;
        public static ReadOnlySpan<byte> NamedFramebufferDrawBuffersUtf8 => "glNamedFramebufferDrawBuffers"u8;
        public static ReadOnlySpan<byte> NamedFramebufferReadBufferUtf8 => "glNamedFramebufferReadBuffer"u8;
        public static ReadOnlySpan<byte> InvalidateNamedFramebufferDataUtf8 => "glInvalidateNamedFramebufferData"u8;
        public static ReadOnlySpan<byte> InvalidateNamedFramebufferSubDataUtf8 => "glInvalidateNamedFramebufferSubData"u8;
        public static ReadOnlySpan<byte> ClearNamedFramebufferivUtf8 => "glClearNamedFramebufferiv"u8;
        public static ReadOnlySpan<byte> ClearNamedFramebufferuivUtf8 => "glClearNamedFramebufferuiv"u8;
        public static ReadOnlySpan<byte> ClearNamedFramebufferfvUtf8 => "glClearNamedFramebufferfv"u8;
        public static ReadOnlySpan<byte> ClearNamedFramebufferfiUtf8 => "glClearNamedFramebufferfi"u8;
        public static ReadOnlySpan<byte> BlitNamedFramebufferUtf8 => "glBlitNamedFramebuffer"u8;
        public static ReadOnlySpan<byte> CheckNamedFramebufferStatusUtf8 => "glCheckNamedFramebufferStatus"u8;
        public static ReadOnlySpan<byte> GetNamedFramebufferParameterivUtf8 => "glGetNamedFramebufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetNamedFramebufferAttachmentParameterivUtf8 => "glGetNamedFramebufferAttachmentParameteriv"u8;
        public static ReadOnlySpan<byte> CreateRenderbuffersUtf8 => "glCreateRenderbuffers"u8;
        public static ReadOnlySpan<byte> NamedRenderbufferStorageUtf8 => "glNamedRenderbufferStorage"u8;
        public static ReadOnlySpan<byte> NamedRenderbufferStorageMultisampleUtf8 => "glNamedRenderbufferStorageMultisample"u8;
        public static ReadOnlySpan<byte> GetNamedRenderbufferParameterivUtf8 => "glGetNamedRenderbufferParameteriv"u8;
        public static ReadOnlySpan<byte> CreateTexturesUtf8 => "glCreateTextures"u8;
        public static ReadOnlySpan<byte> TextureBufferUtf8 => "glTextureBuffer"u8;
        public static ReadOnlySpan<byte> TextureBufferRangeUtf8 => "glTextureBufferRange"u8;
        public static ReadOnlySpan<byte> TextureStorage1DUtf8 => "glTextureStorage1D"u8;
        public static ReadOnlySpan<byte> TextureStorage2DUtf8 => "glTextureStorage2D"u8;
        public static ReadOnlySpan<byte> TextureStorage3DUtf8 => "glTextureStorage3D"u8;
        public static ReadOnlySpan<byte> TextureStorage2DMultisampleUtf8 => "glTextureStorage2DMultisample"u8;
        public static ReadOnlySpan<byte> TextureStorage3DMultisampleUtf8 => "glTextureStorage3DMultisample"u8;
        public static ReadOnlySpan<byte> TextureSubImage1DUtf8 => "glTextureSubImage1D"u8;
        public static ReadOnlySpan<byte> TextureSubImage2DUtf8 => "glTextureSubImage2D"u8;
        public static ReadOnlySpan<byte> TextureSubImage3DUtf8 => "glTextureSubImage3D"u8;
        public static ReadOnlySpan<byte> CompressedTextureSubImage1DUtf8 => "glCompressedTextureSubImage1D"u8;
        public static ReadOnlySpan<byte> CompressedTextureSubImage2DUtf8 => "glCompressedTextureSubImage2D"u8;
        public static ReadOnlySpan<byte> CompressedTextureSubImage3DUtf8 => "glCompressedTextureSubImage3D"u8;
        public static ReadOnlySpan<byte> CopyTextureSubImage1DUtf8 => "glCopyTextureSubImage1D"u8;
        public static ReadOnlySpan<byte> CopyTextureSubImage2DUtf8 => "glCopyTextureSubImage2D"u8;
        public static ReadOnlySpan<byte> CopyTextureSubImage3DUtf8 => "glCopyTextureSubImage3D"u8;
        public static ReadOnlySpan<byte> TextureParameterfUtf8 => "glTextureParameterf"u8;
        public static ReadOnlySpan<byte> TextureParameterfvUtf8 => "glTextureParameterfv"u8;
        public static ReadOnlySpan<byte> TextureParameteriUtf8 => "glTextureParameteri"u8;
        public static ReadOnlySpan<byte> TextureParameterIivUtf8 => "glTextureParameterIiv"u8;
        public static ReadOnlySpan<byte> TextureParameterIuivUtf8 => "glTextureParameterIuiv"u8;
        public static ReadOnlySpan<byte> TextureParameterivUtf8 => "glTextureParameteriv"u8;
        public static ReadOnlySpan<byte> GenerateTextureMipmapUtf8 => "glGenerateTextureMipmap"u8;
        public static ReadOnlySpan<byte> BindTextureUnitUtf8 => "glBindTextureUnit"u8;
        public static ReadOnlySpan<byte> GetTextureImageUtf8 => "glGetTextureImage"u8;
        public static ReadOnlySpan<byte> GetCompressedTextureImageUtf8 => "glGetCompressedTextureImage"u8;
        public static ReadOnlySpan<byte> GetTextureLevelParameterfvUtf8 => "glGetTextureLevelParameterfv"u8;
        public static ReadOnlySpan<byte> GetTextureLevelParameterivUtf8 => "glGetTextureLevelParameteriv"u8;
        public static ReadOnlySpan<byte> GetTextureParameterfvUtf8 => "glGetTextureParameterfv"u8;
        public static ReadOnlySpan<byte> GetTextureParameterIivUtf8 => "glGetTextureParameterIiv"u8;
        public static ReadOnlySpan<byte> GetTextureParameterIuivUtf8 => "glGetTextureParameterIuiv"u8;
        public static ReadOnlySpan<byte> GetTextureParameterivUtf8 => "glGetTextureParameteriv"u8;
        public static ReadOnlySpan<byte> CreateVertexArraysUtf8 => "glCreateVertexArrays"u8;
        public static ReadOnlySpan<byte> DisableVertexArrayAttribUtf8 => "glDisableVertexArrayAttrib"u8;
        public static ReadOnlySpan<byte> EnableVertexArrayAttribUtf8 => "glEnableVertexArrayAttrib"u8;
        public static ReadOnlySpan<byte> VertexArrayElementBufferUtf8 => "glVertexArrayElementBuffer"u8;
        public static ReadOnlySpan<byte> VertexArrayVertexBufferUtf8 => "glVertexArrayVertexBuffer"u8;
        public static ReadOnlySpan<byte> VertexArrayVertexBuffersUtf8 => "glVertexArrayVertexBuffers"u8;
        public static ReadOnlySpan<byte> VertexArrayAttribBindingUtf8 => "glVertexArrayAttribBinding"u8;
        public static ReadOnlySpan<byte> VertexArrayAttribFormatUtf8 => "glVertexArrayAttribFormat"u8;
        public static ReadOnlySpan<byte> VertexArrayAttribIFormatUtf8 => "glVertexArrayAttribIFormat"u8;
        public static ReadOnlySpan<byte> VertexArrayAttribLFormatUtf8 => "glVertexArrayAttribLFormat"u8;
        public static ReadOnlySpan<byte> VertexArrayBindingDivisorUtf8 => "glVertexArrayBindingDivisor"u8;
        public static ReadOnlySpan<byte> GetVertexArrayivUtf8 => "glGetVertexArrayiv"u8;
        public static ReadOnlySpan<byte> GetVertexArrayIndexedivUtf8 => "glGetVertexArrayIndexediv"u8;
        public static ReadOnlySpan<byte> GetVertexArrayIndexed64ivUtf8 => "glGetVertexArrayIndexed64iv"u8;
        public static ReadOnlySpan<byte> CreateSamplersUtf8 => "glCreateSamplers"u8;
        public static ReadOnlySpan<byte> CreateProgramPipelinesUtf8 => "glCreateProgramPipelines"u8;
        public static ReadOnlySpan<byte> CreateQueriesUtf8 => "glCreateQueries"u8;
        public static ReadOnlySpan<byte> GetQueryBufferObjecti64vUtf8 => "glGetQueryBufferObjecti64v"u8;
        public static ReadOnlySpan<byte> GetQueryBufferObjectivUtf8 => "glGetQueryBufferObjectiv"u8;
        public static ReadOnlySpan<byte> GetQueryBufferObjectui64vUtf8 => "glGetQueryBufferObjectui64v"u8;
        public static ReadOnlySpan<byte> GetQueryBufferObjectuivUtf8 => "glGetQueryBufferObjectuiv"u8;
        public static ReadOnlySpan<byte> MemoryBarrierByRegionUtf8 => "glMemoryBarrierByRegion"u8;
        public static ReadOnlySpan<byte> GetTextureSubImageUtf8 => "glGetTextureSubImage"u8;
        public static ReadOnlySpan<byte> GetCompressedTextureSubImageUtf8 => "glGetCompressedTextureSubImage"u8;
        public static ReadOnlySpan<byte> GetGraphicsResetStatusUtf8 => "glGetGraphicsResetStatus"u8;
        public static ReadOnlySpan<byte> GetnCompressedTexImageUtf8 => "glGetnCompressedTexImage"u8;
        public static ReadOnlySpan<byte> GetnTexImageUtf8 => "glGetnTexImage"u8;
        public static ReadOnlySpan<byte> GetnUniformdvUtf8 => "glGetnUniformdv"u8;
        public static ReadOnlySpan<byte> GetnUniformfvUtf8 => "glGetnUniformfv"u8;
        public static ReadOnlySpan<byte> GetnUniformivUtf8 => "glGetnUniformiv"u8;
        public static ReadOnlySpan<byte> GetnUniformuivUtf8 => "glGetnUniformuiv"u8;
        public static ReadOnlySpan<byte> ReadnPixelsUtf8 => "glReadnPixels"u8;
        public static ReadOnlySpan<byte> GetnMapdvUtf8 => "glGetnMapdv"u8;
        public static ReadOnlySpan<byte> GetnMapfvUtf8 => "glGetnMapfv"u8;
        public static ReadOnlySpan<byte> GetnMapivUtf8 => "glGetnMapiv"u8;
        public static ReadOnlySpan<byte> GetnPixelMapfvUtf8 => "glGetnPixelMapfv"u8;
        public static ReadOnlySpan<byte> GetnPixelMapuivUtf8 => "glGetnPixelMapuiv"u8;
        public static ReadOnlySpan<byte> GetnPixelMapusvUtf8 => "glGetnPixelMapusv"u8;
        public static ReadOnlySpan<byte> GetnPolygonStippleUtf8 => "glGetnPolygonStipple"u8;
        public static ReadOnlySpan<byte> GetnColorTableUtf8 => "glGetnColorTable"u8;
        public static ReadOnlySpan<byte> GetnConvolutionFilterUtf8 => "glGetnConvolutionFilter"u8;
        public static ReadOnlySpan<byte> GetnSeparableFilterUtf8 => "glGetnSeparableFilter"u8;
        public static ReadOnlySpan<byte> GetnHistogramUtf8 => "glGetnHistogram"u8;
        public static ReadOnlySpan<byte> GetnMinmaxUtf8 => "glGetnMinmax"u8;
        public static ReadOnlySpan<byte> TextureBarrierUtf8 => "glTextureBarrier"u8;
        public static ReadOnlySpan<byte> SpecializeShaderUtf8 => "glSpecializeShader"u8;
        public static ReadOnlySpan<byte> MultiDrawArraysIndirectCountUtf8 => "glMultiDrawArraysIndirectCount"u8;
        public static ReadOnlySpan<byte> MultiDrawElementsIndirectCountUtf8 => "glMultiDrawElementsIndirectCount"u8;
        public static ReadOnlySpan<byte> PolygonOffsetClampUtf8 => "glPolygonOffsetClamp"u8;

        private static ReadOnlySpan<byte> OpenGLESCMPrefix => "OpenGL ES-CM"u8;
        private static ReadOnlySpan<byte> OpenGLESCXPrefix => "OpenGL ES-CX"u8;
        private static ReadOnlySpan<byte> OpenGLESPrefix => "OpenGL ES"u8;
        private static ReadOnlySpan<byte> OpenGLSCPrefix => "OpenGL SC"u8;

        private static bool TryParseVersion(ReadOnlySpan<byte> value, out ushort major, out ushort minor, out bool isEmbedded)
        {
            if(value.StartsWith(OpenGLESCMPrefix))
            {
                value = value[(OpenGLESCMPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLESCXPrefix))
            {
                value = value[(OpenGLESCXPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLESPrefix))
            {
                value = value[(OpenGLESPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLSCPrefix))
            {
                value = value[(OpenGLSCPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else
            {
                isEmbedded = false;
            }

            return TryParseVersion(value, out major, out minor);
        }

        private static bool TryParseVersion(ReadOnlySpan<byte> value, out ushort major, out ushort minor)
        {
            var dotIndex = value.IndexOf((byte)'.');
            var spaceIndex = value.IndexOf((byte)' ');

            if(dotIndex == -1)
            {
                (major, minor) = (default, default);
                return false;
            }

            var fromFirstDot = value[(dotIndex + 1)..];
            var nextDot = fromFirstDot.IndexOf((byte)'.');
            var lastIndex = nextDot != -1 ? nextDot : (spaceIndex != -1 ? spaceIndex : fromFirstDot.Length);

            if(Utf8Parser.TryParse(value[..dotIndex], out major, out _) && Utf8Parser.TryParse(fromFirstDot[..lastIndex], out minor, out _))
                return true;

            major = minor = 0;
            return false;
        }
    }

    public readonly struct __GLsync;
    public readonly struct _cl_context;
    public readonly struct _cl_event;
    public enum AttribMask : uint
    {
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
        ColorBufferBit = 0x4000,
        CurrentBit = 0x1,
        PointBit = 0x2,
        LineBit = 0x4,
        PolygonBit = 0x8,
        PolygonStippleBit = 0x10,
        PixelModeBit = 0x20,
        LightingBit = 0x40,
        FogBit = 0x80,
        AccumBufferBit = 0x200,
        ViewportBit = 0x800,
        TransformBit = 0x1000,
        EnableBit = 0x2000,
        HintBit = 0x8000,
        EvalBit = 0x10000,
        ListBit = 0x20000,
        TextureBit = 0x40000,
        ScissorBit = 0x80000,
        AllAttribBits = 0xFFFFFFFF,
        MultisampleBit = 0x20000000,
    }
    public enum ClearBufferMask : uint
    {
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
        ColorBufferBit = 0x4000,
        AccumBufferBit = 0x200,
    }
    public enum SpecialNumbers : uint
    {
        False = 0x0,
        True = 0x1,
        Zero = 0x0,
        One = 0x1,
        None = 0x0,
        NoError = 0x0,
        InvalidIndex = 0xFFFFFFFF,
        TimeoutIgnored = 0xFFFFFFFF,
    }
    public enum Boolean : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum VertexShaderWriteMaskEXT : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum ClampColorModeARB : uint
    {
        False = 0x0,
        True = 0x1,
        FixedOnly = 0x891D,
    }
    public enum PrimitiveType : uint
    {
        Points = 0x0,
        Lines = 0x1,
        LineLoop = 0x2,
        LineStrip = 0x3,
        Triangles = 0x4,
        TriangleStrip = 0x5,
        TriangleFan = 0x6,
        Quads = 0x7,
        QuadStrip = 0x8,
        Polygon = 0x9,
        LinesAdjacency = 0xA,
        LineStripAdjacency = 0xB,
        TrianglesAdjacency = 0xC,
        TriangleStripAdjacency = 0xD,
        Patches = 0xE,
    }
    public enum StencilFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum IndexFunctionEXT : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum AlphaFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum DepthFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum TextureSwizzle : uint
    {
        Zero = 0x0,
        One = 0x1,
        Red = 0x1903,
        Green = 0x1904,
        Blue = 0x1905,
        Alpha = 0x1906,
    }
    public enum StencilOp : uint
    {
        Zero = 0x0,
        Invert = 0x150A,
        Keep = 0x1E00,
        Replace = 0x1E01,
        Incr = 0x1E02,
        Decr = 0x1E03,
        IncrWrap = 0x8507,
        DecrWrap = 0x8508,
    }
    public enum BlendingFactor : uint
    {
        Zero = 0x0,
        One = 0x1,
        SrcColor = 0x300,
        OneMinusSrcColor = 0x301,
        SrcAlpha = 0x302,
        OneMinusSrcAlpha = 0x303,
        DstAlpha = 0x304,
        OneMinusDstAlpha = 0x305,
        DstColor = 0x306,
        OneMinusDstColor = 0x307,
        SrcAlphaSaturate = 0x308,
        ConstantColor = 0x8001,
        OneMinusConstantColor = 0x8002,
        ConstantAlpha = 0x8003,
        OneMinusConstantAlpha = 0x8004,
        Src1Alpha = 0x8589,
        Src1Color = 0x88F9,
        OneMinusSrc1Color = 0x88FA,
        OneMinusSrc1Alpha = 0x88FB,
    }
    public enum FragmentShaderGenericSourceATI : uint
    {
        Zero = 0x0,
        One = 0x1,
        PrimaryColor = 0x8577,
    }
    public enum FragmentShaderDestMaskATI : uint
    {
        None = 0x0,
    }
    public enum FragmentShaderDestModMaskATI : uint
    {
        None = 0x0,
    }
    public enum PathFontStyle : uint
    {
        None = 0x0,
    }
    public enum FragmentShaderValueRepATI : uint
    {
        None = 0x0,
        Red = 0x1903,
        Green = 0x1904,
        Blue = 0x1905,
        Alpha = 0x1906,
    }
    public enum SyncBehaviorFlags : uint
    {
        None = 0x0,
    }
    public enum TextureCompareMode : uint
    {
        None = 0x0,
        CompareRToTexture = 0x884E,
        CompareRefToTexture = 0x884E,
    }
    public enum PathColorFormat : uint
    {
        None = 0x0,
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
        Intensity = 0x8049,
    }
    public enum CombinerBiasNV : uint
    {
        None = 0x0,
    }
    public enum CombinerScaleNV : uint
    {
        None = 0x0,
    }
    public enum DrawBufferMode : uint
    {
        None = 0x0,
        FrontLeft = 0x400,
        FrontRight = 0x401,
        BackLeft = 0x402,
        BackRight = 0x403,
        Front = 0x404,
        Back = 0x405,
        Left = 0x406,
        Right = 0x407,
        FrontAndBack = 0x408,
        Aux0 = 0x409,
        Aux1 = 0x40A,
        Aux2 = 0x40B,
        Aux3 = 0x40C,
        ColorAttachment0 = 0x8CE0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }
    public enum PixelTexGenModeSGIX : uint
    {
        None = 0x0,
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
    }
    public enum ReadBufferMode : uint
    {
        None = 0x0,
        FrontLeft = 0x400,
        FrontRight = 0x401,
        BackLeft = 0x402,
        BackRight = 0x403,
        Front = 0x404,
        Back = 0x405,
        Left = 0x406,
        Right = 0x407,
        Aux0 = 0x409,
        Aux1 = 0x40A,
        Aux2 = 0x40B,
        Aux3 = 0x40C,
        ColorAttachment0 = 0x8CE0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
    }
    public enum ColorBuffer : uint
    {
        None = 0x0,
        FrontLeft = 0x400,
        FrontRight = 0x401,
        BackLeft = 0x402,
        BackRight = 0x403,
        Front = 0x404,
        Back = 0x405,
        Left = 0x406,
        Right = 0x407,
        FrontAndBack = 0x408,
        ColorAttachment0 = 0x8CE0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }
    public enum PathGenMode : uint
    {
        None = 0x0,
        EyeLinear = 0x2400,
        ObjectLinear = 0x2401,
        Constant = 0x8576,
    }
    public enum PathTransformType : uint
    {
        None = 0x0,
    }
    public enum TriangleFace : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
    }
    public enum GraphicsResetStatus : uint
    {
        NoError = 0x0,
        GuiltyContextReset = 0x8253,
        InnocentContextReset = 0x8254,
        UnknownContextReset = 0x8255,
    }
    public enum ErrorCode : uint
    {
        NoError = 0x0,
        InvalidEnum = 0x500,
        InvalidValue = 0x501,
        InvalidOperation = 0x502,
        OutOfMemory = 0x505,
        StackOverflow = 0x503,
        StackUnderflow = 0x504,
        InvalidFramebufferOperation = 0x506,
    }
    public enum FrontFaceDirection : uint
    {
        Cw = 0x900,
        Ccw = 0x901,
    }
    public enum GetPName : uint
    {
        PointSize = 0xB11,
        PointSizeRange = 0xB12,
        PointSizeGranularity = 0xB13,
        LineSmooth = 0xB20,
        LineWidth = 0xB21,
        LineWidthRange = 0xB22,
        LineWidthGranularity = 0xB23,
        PolygonMode = 0xB40,
        PolygonSmooth = 0xB41,
        CullFace = 0xB44,
        CullFaceMode = 0xB45,
        FrontFace = 0xB46,
        DepthRange = 0xB70,
        DepthTest = 0xB71,
        DepthWritemask = 0xB72,
        DepthClearValue = 0xB73,
        DepthFunc = 0xB74,
        StencilTest = 0xB90,
        StencilClearValue = 0xB91,
        StencilFunc = 0xB92,
        StencilValueMask = 0xB93,
        StencilFail = 0xB94,
        StencilPassDepthFail = 0xB95,
        StencilPassDepthPass = 0xB96,
        StencilRef = 0xB97,
        StencilWritemask = 0xB98,
        Viewport = 0xBA2,
        Dither = 0xBD0,
        BlendDst = 0xBE0,
        BlendSrc = 0xBE1,
        Blend = 0xBE2,
        LogicOpMode = 0xBF0,
        DrawBuffer = 0xC01,
        ReadBuffer = 0xC02,
        ScissorBox = 0xC10,
        ScissorTest = 0xC11,
        ColorClearValue = 0xC22,
        ColorWritemask = 0xC23,
        Doublebuffer = 0xC32,
        Stereo = 0xC33,
        LineSmoothHint = 0xC52,
        PolygonSmoothHint = 0xC53,
        UnpackSwapBytes = 0xCF0,
        UnpackLsbFirst = 0xCF1,
        UnpackRowLength = 0xCF2,
        UnpackSkipRows = 0xCF3,
        UnpackSkipPixels = 0xCF4,
        UnpackAlignment = 0xCF5,
        PackSwapBytes = 0xD00,
        PackLsbFirst = 0xD01,
        PackRowLength = 0xD02,
        PackSkipRows = 0xD03,
        PackSkipPixels = 0xD04,
        PackAlignment = 0xD05,
        MaxTextureSize = 0xD33,
        MaxViewportDims = 0xD3A,
        SubpixelBits = 0xD50,
        Texture1D = 0xDE0,
        Texture2D = 0xDE1,
        CurrentColor = 0xB00,
        CurrentIndex = 0xB01,
        CurrentNormal = 0xB02,
        CurrentTextureCoords = 0xB03,
        CurrentRasterColor = 0xB04,
        CurrentRasterIndex = 0xB05,
        CurrentRasterTextureCoords = 0xB06,
        CurrentRasterPosition = 0xB07,
        CurrentRasterPositionValid = 0xB08,
        CurrentRasterDistance = 0xB09,
        PointSmooth = 0xB10,
        LineStipple = 0xB24,
        LineStipplePattern = 0xB25,
        LineStippleRepeat = 0xB26,
        ListMode = 0xB30,
        MaxListNesting = 0xB31,
        ListBase = 0xB32,
        ListIndex = 0xB33,
        PolygonStipple = 0xB42,
        EdgeFlag = 0xB43,
        Lighting = 0xB50,
        LightModelLocalViewer = 0xB51,
        LightModelTwoSide = 0xB52,
        LightModelAmbient = 0xB53,
        ShadeModel = 0xB54,
        ColorMaterialFace = 0xB55,
        ColorMaterialParameter = 0xB56,
        ColorMaterial = 0xB57,
        Fog = 0xB60,
        FogIndex = 0xB61,
        FogDensity = 0xB62,
        FogStart = 0xB63,
        FogEnd = 0xB64,
        FogMode = 0xB65,
        FogColor = 0xB66,
        AccumClearValue = 0xB80,
        MatrixMode = 0xBA0,
        Normalize = 0xBA1,
        ModelviewStackDepth = 0xBA3,
        ProjectionStackDepth = 0xBA4,
        TextureStackDepth = 0xBA5,
        ModelviewMatrix = 0xBA6,
        ProjectionMatrix = 0xBA7,
        TextureMatrix = 0xBA8,
        AttribStackDepth = 0xBB0,
        AlphaTest = 0xBC0,
        AlphaTestFunc = 0xBC1,
        AlphaTestRef = 0xBC2,
        LogicOp = 0xBF1,
        AuxBuffers = 0xC00,
        IndexClearValue = 0xC20,
        IndexWritemask = 0xC21,
        IndexMode = 0xC30,
        RgbaMode = 0xC31,
        RenderMode = 0xC40,
        PerspectiveCorrectionHint = 0xC50,
        PointSmoothHint = 0xC51,
        FogHint = 0xC54,
        TextureGenS = 0xC60,
        TextureGenT = 0xC61,
        TextureGenR = 0xC62,
        TextureGenQ = 0xC63,
        PixelMapIToISize = 0xCB0,
        PixelMapSToSSize = 0xCB1,
        PixelMapIToRSize = 0xCB2,
        PixelMapIToGSize = 0xCB3,
        PixelMapIToBSize = 0xCB4,
        PixelMapIToASize = 0xCB5,
        PixelMapRToRSize = 0xCB6,
        PixelMapGToGSize = 0xCB7,
        PixelMapBToBSize = 0xCB8,
        PixelMapAToASize = 0xCB9,
        MapColor = 0xD10,
        MapStencil = 0xD11,
        IndexShift = 0xD12,
        IndexOffset = 0xD13,
        RedScale = 0xD14,
        RedBias = 0xD15,
        ZoomX = 0xD16,
        ZoomY = 0xD17,
        GreenScale = 0xD18,
        GreenBias = 0xD19,
        BlueScale = 0xD1A,
        BlueBias = 0xD1B,
        AlphaScale = 0xD1C,
        AlphaBias = 0xD1D,
        DepthScale = 0xD1E,
        DepthBias = 0xD1F,
        MaxEvalOrder = 0xD30,
        MaxLights = 0xD31,
        MaxClipPlanes = 0xD32,
        MaxPixelMapTable = 0xD34,
        MaxAttribStackDepth = 0xD35,
        MaxModelviewStackDepth = 0xD36,
        MaxNameStackDepth = 0xD37,
        MaxProjectionStackDepth = 0xD38,
        MaxTextureStackDepth = 0xD39,
        IndexBits = 0xD51,
        RedBits = 0xD52,
        GreenBits = 0xD53,
        BlueBits = 0xD54,
        AlphaBits = 0xD55,
        DepthBits = 0xD56,
        StencilBits = 0xD57,
        AccumRedBits = 0xD58,
        AccumGreenBits = 0xD59,
        AccumBlueBits = 0xD5A,
        AccumAlphaBits = 0xD5B,
        NameStackDepth = 0xD70,
        AutoNormal = 0xD80,
        Map1Color4 = 0xD90,
        Map1Index = 0xD91,
        Map1Normal = 0xD92,
        Map1TextureCoord1 = 0xD93,
        Map1TextureCoord2 = 0xD94,
        Map1TextureCoord3 = 0xD95,
        Map1TextureCoord4 = 0xD96,
        Map1Vertex3 = 0xD97,
        Map1Vertex4 = 0xD98,
        Map2Color4 = 0xDB0,
        Map2Index = 0xDB1,
        Map2Normal = 0xDB2,
        Map2TextureCoord1 = 0xDB3,
        Map2TextureCoord2 = 0xDB4,
        Map2TextureCoord3 = 0xDB5,
        Map2TextureCoord4 = 0xDB6,
        Map2Vertex3 = 0xDB7,
        Map2Vertex4 = 0xDB8,
        Map1GridDomain = 0xDD0,
        Map1GridSegments = 0xDD1,
        Map2GridDomain = 0xDD2,
        Map2GridSegments = 0xDD3,
        ClipPlane0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipPlane5 = 0x3005,
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,
        ColorLogicOp = 0xBF2,
        PolygonOffsetUnits = 0x2A00,
        PolygonOffsetPoint = 0x2A01,
        PolygonOffsetLine = 0x2A02,
        PolygonOffsetFill = 0x8037,
        PolygonOffsetFactor = 0x8038,
        TextureBinding1D = 0x8068,
        TextureBinding2D = 0x8069,
        ClientAttribStackDepth = 0xBB1,
        IndexLogicOp = 0xBF1,
        MaxClientAttribStackDepth = 0xD3B,
        FeedbackBufferSize = 0xDF1,
        FeedbackBufferType = 0xDF2,
        SelectionBufferSize = 0xDF4,
        VertexArray = 0x8074,
        NormalArray = 0x8075,
        ColorArray = 0x8076,
        IndexArray = 0x8077,
        TextureCoordArray = 0x8078,
        EdgeFlagArray = 0x8079,
        VertexArraySize = 0x807A,
        VertexArrayType = 0x807B,
        VertexArrayStride = 0x807C,
        NormalArrayType = 0x807E,
        NormalArrayStride = 0x807F,
        ColorArraySize = 0x8081,
        ColorArrayType = 0x8082,
        ColorArrayStride = 0x8083,
        IndexArrayType = 0x8085,
        IndexArrayStride = 0x8086,
        TextureCoordArraySize = 0x8088,
        TextureCoordArrayType = 0x8089,
        TextureCoordArrayStride = 0x808A,
        EdgeFlagArrayStride = 0x808C,
        TextureBinding3D = 0x806A,
        PackSkipImages = 0x806B,
        PackImageHeight = 0x806C,
        UnpackSkipImages = 0x806D,
        UnpackImageHeight = 0x806E,
        Max3DTextureSize = 0x8073,
        MaxElementsVertices = 0x80E8,
        MaxElementsIndices = 0x80E9,
        SmoothPointSizeRange = 0xB12,
        SmoothPointSizeGranularity = 0xB13,
        SmoothLineWidthRange = 0xB22,
        SmoothLineWidthGranularity = 0xB23,
        AliasedLineWidthRange = 0x846E,
        LightModelColorControl = 0x81F8,
        AliasedPointSizeRange = 0x846D,
        ActiveTexture = 0x84E0,
        SampleBuffers = 0x80A8,
        Samples = 0x80A9,
        SampleCoverageValue = 0x80AA,
        SampleCoverageInvert = 0x80AB,
        TextureBindingCubeMap = 0x8514,
        MaxCubeMapTextureSize = 0x851C,
        TextureCompressionHint = 0x84EF,
        NumCompressedTextureFormats = 0x86A2,
        CompressedTextureFormats = 0x86A3,
        BlendDstRgb = 0x80C8,
        BlendSrcRgb = 0x80C9,
        BlendDstAlpha = 0x80CA,
        BlendSrcAlpha = 0x80CB,
        PointFadeThresholdSize = 0x8128,
        MaxTextureLodBias = 0x84FD,
        PointSizeMin = 0x8126,
        PointSizeMax = 0x8127,
        PointDistanceAttenuation = 0x8129,
        BlendColor = 0x8005,
        BlendEquation = 0x8009,
        ArrayBufferBinding = 0x8894,
        ElementArrayBufferBinding = 0x8895,
        BlendEquationRgb = 0x8009,
        StencilBackFunc = 0x8800,
        StencilBackFail = 0x8801,
        StencilBackPassDepthFail = 0x8802,
        StencilBackPassDepthPass = 0x8803,
        MaxDrawBuffers = 0x8824,
        BlendEquationAlpha = 0x883D,
        MaxVertexAttribs = 0x8869,
        MaxTextureImageUnits = 0x8872,
        MaxFragmentUniformComponents = 0x8B49,
        MaxVertexUniformComponents = 0x8B4A,
        MaxVaryingFloats = 0x8B4B,
        MaxVertexTextureImageUnits = 0x8B4C,
        MaxCombinedTextureImageUnits = 0x8B4D,
        FragmentShaderDerivativeHint = 0x8B8B,
        CurrentProgram = 0x8B8D,
        StencilBackRef = 0x8CA3,
        StencilBackValueMask = 0x8CA4,
        StencilBackWritemask = 0x8CA5,
        PixelPackBufferBinding = 0x88ED,
        PixelUnpackBufferBinding = 0x88EF,
        MaxClipDistances = 0xD32,
        MajorVersion = 0x821B,
        MinorVersion = 0x821C,
        NumExtensions = 0x821D,
        ContextFlags = 0x821E,
        MaxArrayTextureLayers = 0x88FF,
        MinProgramTexelOffset = 0x8904,
        MaxProgramTexelOffset = 0x8905,
        MaxVaryingComponents = 0x8B4B,
        TextureBinding1DArray = 0x8C1C,
        TextureBinding2DArray = 0x8C1D,
        TransformFeedbackBufferStart = 0x8C84,
        TransformFeedbackBufferSize = 0x8C85,
        TransformFeedbackBufferBinding = 0x8C8F,
        MaxRenderbufferSize = 0x84E8,
        DrawFramebufferBinding = 0x8CA6,
        RenderbufferBinding = 0x8CA7,
        ReadFramebufferBinding = 0x8CAA,
        MaxColorAttachments = 0x8CDF,
        VertexArrayBinding = 0x85B5,
        MaxTextureBufferSize = 0x8C2B,
        TextureBindingBuffer = 0x8C2C,
        TextureBindingRectangle = 0x84F6,
        MaxRectangleTextureSize = 0x84F8,
        PrimitiveRestartIndex = 0x8F9E,
        UniformBufferBinding = 0x8A28,
        UniformBufferStart = 0x8A29,
        UniformBufferSize = 0x8A2A,
        MaxVertexUniformBlocks = 0x8A2B,
        MaxGeometryUniformBlocks = 0x8A2C,
        MaxFragmentUniformBlocks = 0x8A2D,
        MaxCombinedUniformBlocks = 0x8A2E,
        MaxUniformBufferBindings = 0x8A2F,
        MaxUniformBlockSize = 0x8A30,
        MaxCombinedVertexUniformComponents = 0x8A31,
        MaxCombinedGeometryUniformComponents = 0x8A32,
        MaxCombinedFragmentUniformComponents = 0x8A33,
        UniformBufferOffsetAlignment = 0x8A34,
        ProgramPointSize = 0x8642,
        MaxGeometryTextureImageUnits = 0x8C29,
        MaxGeometryUniformComponents = 0x8DDF,
        MaxVertexOutputComponents = 0x9122,
        MaxGeometryInputComponents = 0x9123,
        MaxGeometryOutputComponents = 0x9124,
        MaxFragmentInputComponents = 0x9125,
        ContextProfileMask = 0x9126,
        ProvokingVertex = 0x8E4F,
        MaxServerWaitTimeout = 0x9111,
        MaxSampleMaskWords = 0x8E59,
        TextureBinding2DMultisample = 0x9104,
        TextureBinding2DMultisampleArray = 0x9105,
        MaxColorTextureSamples = 0x910E,
        MaxDepthTextureSamples = 0x910F,
        MaxIntegerSamples = 0x9110,
        MaxDualSourceDrawBuffers = 0x88FC,
        SamplerBinding = 0x8919,
        Timestamp = 0x8E28,
        MaxTessControlUniformBlocks = 0x8E89,
        MaxTessEvaluationUniformBlocks = 0x8E8A,
        ImplementationColorReadType = 0x8B9A,
        ImplementationColorReadFormat = 0x8B9B,
        ShaderCompiler = 0x8DFA,
        ShaderBinaryFormats = 0x8DF8,
        NumShaderBinaryFormats = 0x8DF9,
        MaxVertexUniformVectors = 0x8DFB,
        MaxVaryingVectors = 0x8DFC,
        MaxFragmentUniformVectors = 0x8DFD,
        NumProgramBinaryFormats = 0x87FE,
        ProgramBinaryFormats = 0x87FF,
        ProgramPipelineBinding = 0x825A,
        MaxViewports = 0x825B,
        ViewportSubpixelBits = 0x825C,
        ViewportBoundsRange = 0x825D,
        LayerProvokingVertex = 0x825E,
        ViewportIndexProvokingVertex = 0x825F,
        MinMapBufferAlignment = 0x90BC,
        MaxVertexAtomicCounters = 0x92D2,
        MaxTessControlAtomicCounters = 0x92D3,
        MaxTessEvaluationAtomicCounters = 0x92D4,
        MaxGeometryAtomicCounters = 0x92D5,
        MaxFragmentAtomicCounters = 0x92D6,
        MaxCombinedAtomicCounters = 0x92D7,
        MaxElementIndex = 0x8D6B,
        MaxComputeUniformBlocks = 0x91BB,
        MaxComputeTextureImageUnits = 0x91BC,
        MaxComputeUniformComponents = 0x8263,
        MaxComputeAtomicCounterBuffers = 0x8264,
        MaxComputeAtomicCounters = 0x8265,
        MaxCombinedComputeUniformComponents = 0x8266,
        MaxComputeWorkGroupInvocations = 0x90EB,
        MaxComputeWorkGroupCount = 0x91BE,
        MaxComputeWorkGroupSize = 0x91BF,
        DispatchIndirectBufferBinding = 0x90EF,
        MaxDebugGroupStackDepth = 0x826C,
        DebugGroupStackDepth = 0x826D,
        MaxLabelLength = 0x82E8,
        MaxUniformLocations = 0x826E,
        MaxFramebufferWidth = 0x9315,
        MaxFramebufferHeight = 0x9316,
        MaxFramebufferLayers = 0x9317,
        MaxFramebufferSamples = 0x9318,
        ShaderStorageBufferBinding = 0x90D3,
        ShaderStorageBufferStart = 0x90D4,
        ShaderStorageBufferSize = 0x90D5,
        MaxVertexShaderStorageBlocks = 0x90D6,
        MaxGeometryShaderStorageBlocks = 0x90D7,
        MaxTessControlShaderStorageBlocks = 0x90D8,
        MaxTessEvaluationShaderStorageBlocks = 0x90D9,
        MaxFragmentShaderStorageBlocks = 0x90DA,
        MaxComputeShaderStorageBlocks = 0x90DB,
        MaxCombinedShaderStorageBlocks = 0x90DC,
        MaxShaderStorageBufferBindings = 0x90DD,
        ShaderStorageBufferOffsetAlignment = 0x90DF,
        TextureBufferOffsetAlignment = 0x919F,
        VertexBindingDivisor = 0x82D6,
        VertexBindingOffset = 0x82D7,
        VertexBindingStride = 0x82D8,
        MaxVertexAttribRelativeOffset = 0x82D9,
        MaxVertexAttribBindings = 0x82DA,
    }
    public enum EnableCap : uint
    {
        LineSmooth = 0xB20,
        PolygonSmooth = 0xB41,
        CullFace = 0xB44,
        DepthTest = 0xB71,
        StencilTest = 0xB90,
        Dither = 0xBD0,
        Blend = 0xBE2,
        ScissorTest = 0xC11,
        Texture1D = 0xDE0,
        Texture2D = 0xDE1,
        PointSmooth = 0xB10,
        LineStipple = 0xB24,
        PolygonStipple = 0xB42,
        Lighting = 0xB50,
        ColorMaterial = 0xB57,
        Fog = 0xB60,
        Normalize = 0xBA1,
        AlphaTest = 0xBC0,
        TextureGenS = 0xC60,
        TextureGenT = 0xC61,
        TextureGenR = 0xC62,
        TextureGenQ = 0xC63,
        AutoNormal = 0xD80,
        Map1Color4 = 0xD90,
        Map1Index = 0xD91,
        Map1Normal = 0xD92,
        Map1TextureCoord1 = 0xD93,
        Map1TextureCoord2 = 0xD94,
        Map1TextureCoord3 = 0xD95,
        Map1TextureCoord4 = 0xD96,
        Map1Vertex3 = 0xD97,
        Map1Vertex4 = 0xD98,
        Map2Color4 = 0xDB0,
        Map2Index = 0xDB1,
        Map2Normal = 0xDB2,
        Map2TextureCoord1 = 0xDB3,
        Map2TextureCoord2 = 0xDB4,
        Map2TextureCoord3 = 0xDB5,
        Map2TextureCoord4 = 0xDB6,
        Map2Vertex3 = 0xDB7,
        Map2Vertex4 = 0xDB8,
        ClipPlane0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipPlane5 = 0x3005,
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,
        ColorLogicOp = 0xBF2,
        PolygonOffsetPoint = 0x2A01,
        PolygonOffsetLine = 0x2A02,
        PolygonOffsetFill = 0x8037,
        IndexLogicOp = 0xBF1,
        VertexArray = 0x8074,
        NormalArray = 0x8075,
        ColorArray = 0x8076,
        IndexArray = 0x8077,
        TextureCoordArray = 0x8078,
        EdgeFlagArray = 0x8079,
        Multisample = 0x809D,
        SampleAlphaToCoverage = 0x809E,
        SampleAlphaToOne = 0x809F,
        SampleCoverage = 0x80A0,
        TextureCubeMap = 0x8513,
        ClipDistance0 = 0x3000,
        ClipDistance1 = 0x3001,
        ClipDistance2 = 0x3002,
        ClipDistance3 = 0x3003,
        ClipDistance4 = 0x3004,
        ClipDistance5 = 0x3005,
        ClipDistance6 = 0x3006,
        ClipDistance7 = 0x3007,
        RasterizerDiscard = 0x8C89,
        FramebufferSrgb = 0x8DB9,
        TextureRectangle = 0x84F5,
        PrimitiveRestart = 0x8F9D,
        ProgramPointSize = 0x8642,
        DepthClamp = 0x864F,
        TextureCubeMapSeamless = 0x884F,
        SampleMask = 0x8E51,
        SampleShading = 0x8C36,
        PrimitiveRestartFixedIndex = 0x8D69,
        DebugOutputSynchronous = 0x8242,
        DebugOutput = 0x92E0,
        ColorTable = 0x80D0,
        PostConvolutionColorTable = 0x80D1,
        PostColorMatrixColorTable = 0x80D2,
    }
    public enum TextureEnvMode : uint
    {
        Blend = 0xBE2,
        Replace = 0x1E01,
        Add = 0x104,
        Modulate = 0x2100,
        Decal = 0x2101,
        Combine = 0x8570,
    }
    public enum GetFramebufferParameter : uint
    {
        Doublebuffer = 0xC32,
        Stereo = 0xC33,
        SampleBuffers = 0x80A8,
        Samples = 0x80A9,
        ImplementationColorReadType = 0x8B9A,
        ImplementationColorReadFormat = 0x8B9B,
        FramebufferDefaultWidth = 0x9310,
        FramebufferDefaultHeight = 0x9311,
        FramebufferDefaultLayers = 0x9312,
        FramebufferDefaultSamples = 0x9313,
        FramebufferDefaultFixedSampleLocations = 0x9314,
    }
    public enum HintTarget : uint
    {
        LineSmoothHint = 0xC52,
        PolygonSmoothHint = 0xC53,
        PerspectiveCorrectionHint = 0xC50,
        PointSmoothHint = 0xC51,
        FogHint = 0xC54,
        TextureCompressionHint = 0x84EF,
        GenerateMipmapHint = 0x8192,
        FragmentShaderDerivativeHint = 0x8B8B,
        ProgramBinaryRetrievableHint = 0x8257,
    }
    public enum PixelStoreParameter : uint
    {
        UnpackSwapBytes = 0xCF0,
        UnpackLsbFirst = 0xCF1,
        UnpackRowLength = 0xCF2,
        UnpackSkipRows = 0xCF3,
        UnpackSkipPixels = 0xCF4,
        UnpackAlignment = 0xCF5,
        PackSwapBytes = 0xD00,
        PackLsbFirst = 0xD01,
        PackRowLength = 0xD02,
        PackSkipRows = 0xD03,
        PackSkipPixels = 0xD04,
        PackAlignment = 0xD05,
        PackSkipImages = 0x806B,
        PackImageHeight = 0x806C,
        UnpackSkipImages = 0x806D,
        UnpackImageHeight = 0x806E,
    }
    public enum CopyImageSubDataTarget : uint
    {
        Texture1D = 0xDE0,
        Texture2D = 0xDE1,
        Texture3D = 0x806F,
        TextureCubeMap = 0x8513,
        Texture1DArray = 0x8C18,
        Texture2DArray = 0x8C1A,
        Renderbuffer = 0x8D41,
        TextureRectangle = 0x84F5,
        Texture2DMultisample = 0x9100,
        Texture2DMultisampleArray = 0x9102,
        TextureCubeMapArray = 0x9009,
    }
    public enum TextureTarget : uint
    {
        Texture1D = 0xDE0,
        Texture2D = 0xDE1,
        ProxyTexture1D = 0x8063,
        ProxyTexture2D = 0x8064,
        Texture3D = 0x806F,
        ProxyTexture3D = 0x8070,
        TextureCubeMap = 0x8513,
        TextureCubeMapPositiveX = 0x8515,
        TextureCubeMapNegativeX = 0x8516,
        TextureCubeMapPositiveY = 0x8517,
        TextureCubeMapNegativeY = 0x8518,
        TextureCubeMapPositiveZ = 0x8519,
        TextureCubeMapNegativeZ = 0x851A,
        ProxyTextureCubeMap = 0x851B,
        Texture1DArray = 0x8C18,
        ProxyTexture1DArray = 0x8C19,
        Texture2DArray = 0x8C1A,
        ProxyTexture2DArray = 0x8C1B,
        Renderbuffer = 0x8D41,
        TextureBuffer = 0x8C2A,
        TextureRectangle = 0x84F5,
        ProxyTextureRectangle = 0x84F7,
        Texture2DMultisample = 0x9100,
        ProxyTexture2DMultisample = 0x9101,
        Texture2DMultisampleArray = 0x9102,
        ProxyTexture2DMultisampleArray = 0x9103,
        TextureCubeMapArray = 0x9009,
        ProxyTextureCubeMapArray = 0x900B,
    }
    public enum TextureParameterName : uint
    {
        TextureWidth = 0x1000,
        TextureHeight = 0x1001,
        TextureBorderColor = 0x1004,
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        TextureComponents = 0x1003,
        TextureBorder = 0x1005,
        TextureInternalFormat = 0x1003,
        TextureRedSize = 0x805C,
        TextureGreenSize = 0x805D,
        TextureBlueSize = 0x805E,
        TextureAlphaSize = 0x805F,
        TextureLuminanceSize = 0x8060,
        TextureIntensitySize = 0x8061,
        TexturePriority = 0x8066,
        TextureResident = 0x8067,
        TextureWrapR = 0x8072,
        TextureMinLod = 0x813A,
        TextureMaxLod = 0x813B,
        TextureBaseLevel = 0x813C,
        TextureMaxLevel = 0x813D,
        TextureLodBias = 0x8501,
        TextureCompareMode = 0x884C,
        TextureCompareFunc = 0x884D,
        GenerateMipmap = 0x8191,
        TextureSwizzleR = 0x8E42,
        TextureSwizzleG = 0x8E43,
        TextureSwizzleB = 0x8E44,
        TextureSwizzleA = 0x8E45,
        TextureSwizzleRgba = 0x8E46,
        DepthStencilTextureMode = 0x90EA,
        TextureMaxAnisotropy = 0x84FE,
    }
    public enum GetTextureParameter : uint
    {
        TextureWidth = 0x1000,
        TextureHeight = 0x1001,
        TextureBorderColor = 0x1004,
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        TextureComponents = 0x1003,
        TextureBorder = 0x1005,
        TextureInternalFormat = 0x1003,
        TextureRedSize = 0x805C,
        TextureGreenSize = 0x805D,
        TextureBlueSize = 0x805E,
        TextureAlphaSize = 0x805F,
        TextureLuminanceSize = 0x8060,
        TextureIntensitySize = 0x8061,
        TexturePriority = 0x8066,
        TextureResident = 0x8067,
        NormalMap = 0x8511,
        ReflectionMap = 0x8512,
    }
    public enum SamplerParameterF : uint
    {
        BorderColor = 0x1004,
        MinLod = 0x813A,
        MaxLod = 0x813B,
        LodBias = 0x8501,
        MaxAnisotropy = 0x84FE,
    }
    public enum DebugSeverity : uint
    {
        DontCare = 0x1100,
        DebugSeverityHigh = 0x9146,
        DebugSeverityMedium = 0x9147,
        DebugSeverityLow = 0x9148,
        DebugSeverityNotification = 0x826B,
    }
    public enum HintMode : uint
    {
        DontCare = 0x1100,
        Fastest = 0x1101,
        Nicest = 0x1102,
    }
    public enum DebugSource : uint
    {
        DontCare = 0x1100,
        DebugSourceApi = 0x8246,
        DebugSourceWindowSystem = 0x8247,
        DebugSourceShaderCompiler = 0x8248,
        DebugSourceThirdParty = 0x8249,
        DebugSourceApplication = 0x824A,
        DebugSourceOther = 0x824B,
    }
    public enum DebugType : uint
    {
        DontCare = 0x1100,
        DebugTypeError = 0x824C,
        DebugTypeDeprecatedBehavior = 0x824D,
        DebugTypeUndefinedBehavior = 0x824E,
        DebugTypePortability = 0x824F,
        DebugTypePerformance = 0x8250,
        DebugTypeOther = 0x8251,
        DebugTypeMarker = 0x8268,
        DebugTypePushGroup = 0x8269,
        DebugTypePopGroup = 0x826A,
    }
    public enum VertexAttribIType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
    }
    public enum WeightPointerTypeARB : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum TangentPointerTypeEXT : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum BinormalPointerTypeEXT : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum ColorPointerType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum ListNameType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        N2Bytes = 0x1407,
        N3Bytes = 0x1408,
        N4Bytes = 0x1409,
    }
    public enum NormalPointerType : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum PixelType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Bitmap = 0x1A00,
        UnsignedByte332 = 0x8032,
        UnsignedShort4444 = 0x8033,
        UnsignedShort5551 = 0x8034,
        UnsignedInt8888 = 0x8035,
        UnsignedInt1010102 = 0x8036,
        UnsignedByte233Rev = 0x8362,
        UnsignedShort565 = 0x8363,
        UnsignedShort565Rev = 0x8364,
        UnsignedShort4444Rev = 0x8365,
        UnsignedShort1555Rev = 0x8366,
        UnsignedInt8888Rev = 0x8367,
        UnsignedInt2101010Rev = 0x8368,
        UnsignedInt10F11F11FRev = 0x8C3B,
        UnsignedInt5999Rev = 0x8C3E,
        Float32UnsignedInt248Rev = 0x8DAD,
        UnsignedInt248 = 0x84FA,
        HalfFloat = 0x140B,
    }
    public enum VertexAttribType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Double = 0x140A,
        UnsignedInt2101010Rev = 0x8368,
        UnsignedInt10F11F11FRev = 0x8C3B,
        HalfFloat = 0x140B,
        Int2101010Rev = 0x8D9F,
        Fixed = 0x140C,
    }
    public enum VertexAttribPointerType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Double = 0x140A,
        UnsignedInt2101010Rev = 0x8368,
        UnsignedInt10F11F11FRev = 0x8C3B,
        HalfFloat = 0x140B,
        Int2101010Rev = 0x8D9F,
        Fixed = 0x140C,
    }
    public enum ScalarType : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum ReplacementCodeTypeSUN : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum ElementPointerTypeATI : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum MatrixIndexPointerTypeARB : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum DrawElementsType : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum SecondaryColorPointerTypeIBM : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum IndexPointerType : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum TexCoordPointerType : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum VertexPointerType : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum PixelFormat : uint
    {
        UnsignedShort = 0x1403,
        UnsignedInt = 0x1405,
        StencilIndex = 0x1901,
        DepthComponent = 0x1902,
        Red = 0x1903,
        Green = 0x1904,
        Blue = 0x1905,
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        ColorIndex = 0x1900,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
        Bgr = 0x80E0,
        Bgra = 0x80E1,
        RedInteger = 0x8D94,
        GreenInteger = 0x8D95,
        BlueInteger = 0x8D96,
        RgbInteger = 0x8D98,
        RgbaInteger = 0x8D99,
        BgrInteger = 0x8D9A,
        BgraInteger = 0x8D9B,
        DepthStencil = 0x84F9,
        Rg = 0x8227,
        RgInteger = 0x8228,
    }
    public enum AttributeType : uint
    {
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Double = 0x140A,
        FloatVec2 = 0x8B50,
        FloatVec3 = 0x8B51,
        FloatVec4 = 0x8B52,
        IntVec2 = 0x8B53,
        IntVec3 = 0x8B54,
        IntVec4 = 0x8B55,
        Bool = 0x8B56,
        BoolVec2 = 0x8B57,
        BoolVec3 = 0x8B58,
        BoolVec4 = 0x8B59,
        FloatMat2 = 0x8B5A,
        FloatMat3 = 0x8B5B,
        FloatMat4 = 0x8B5C,
        Sampler1D = 0x8B5D,
        Sampler2D = 0x8B5E,
        Sampler3D = 0x8B5F,
        SamplerCube = 0x8B60,
        Sampler1DShadow = 0x8B61,
        Sampler2DShadow = 0x8B62,
        FloatMat2X3 = 0x8B65,
        FloatMat2X4 = 0x8B66,
        FloatMat3X2 = 0x8B67,
        FloatMat3X4 = 0x8B68,
        FloatMat4X2 = 0x8B69,
        FloatMat4X3 = 0x8B6A,
        Sampler1DArrayShadow = 0x8DC3,
        Sampler2DArrayShadow = 0x8DC4,
        SamplerCubeShadow = 0x8DC5,
        UnsignedIntVec2 = 0x8DC6,
        UnsignedIntVec3 = 0x8DC7,
        UnsignedIntVec4 = 0x8DC8,
        IntSampler1D = 0x8DC9,
        IntSampler2D = 0x8DCA,
        IntSampler3D = 0x8DCB,
        IntSamplerCube = 0x8DCC,
        IntSampler1DArray = 0x8DCE,
        IntSampler2DArray = 0x8DCF,
        UnsignedIntSampler1D = 0x8DD1,
        UnsignedIntSampler2D = 0x8DD2,
        UnsignedIntSampler3D = 0x8DD3,
        UnsignedIntSamplerCube = 0x8DD4,
        UnsignedIntSampler1DArray = 0x8DD6,
        UnsignedIntSampler2DArray = 0x8DD7,
        Sampler2DRect = 0x8B63,
        Sampler2DRectShadow = 0x8B64,
        SamplerBuffer = 0x8DC2,
        IntSampler2DRect = 0x8DCD,
        IntSamplerBuffer = 0x8DD0,
        UnsignedIntSampler2DRect = 0x8DD5,
        UnsignedIntSamplerBuffer = 0x8DD8,
        Sampler2DMultisample = 0x9108,
        IntSampler2DMultisample = 0x9109,
        UnsignedIntSampler2DMultisample = 0x910A,
        Sampler2DMultisampleArray = 0x910B,
        IntSampler2DMultisampleArray = 0x910C,
        UnsignedIntSampler2DMultisampleArray = 0x910D,
        SamplerCubeMapArray = 0x900C,
        SamplerCubeMapArrayShadow = 0x900D,
        IntSamplerCubeMapArray = 0x900E,
        UnsignedIntSamplerCubeMapArray = 0x900F,
        DoubleVec2 = 0x8FFC,
        DoubleVec3 = 0x8FFD,
        DoubleVec4 = 0x8FFE,
        DoubleMat2 = 0x8F46,
        DoubleMat3 = 0x8F47,
        DoubleMat4 = 0x8F48,
        DoubleMat2X3 = 0x8F49,
        DoubleMat2X4 = 0x8F4A,
        DoubleMat3X2 = 0x8F4B,
        DoubleMat3X4 = 0x8F4C,
        DoubleMat4X2 = 0x8F4D,
        DoubleMat4X3 = 0x8F4E,
        Image1D = 0x904C,
        Image2D = 0x904D,
        Image3D = 0x904E,
        Image2DRect = 0x904F,
        ImageCube = 0x9050,
        ImageBuffer = 0x9051,
        Image1DArray = 0x9052,
        Image2DArray = 0x9053,
        ImageCubeMapArray = 0x9054,
        Image2DMultisample = 0x9055,
        Image2DMultisampleArray = 0x9056,
        IntImage1D = 0x9057,
        IntImage2D = 0x9058,
        IntImage3D = 0x9059,
        IntImage2DRect = 0x905A,
        IntImageCube = 0x905B,
        IntImageBuffer = 0x905C,
        IntImage1DArray = 0x905D,
        IntImage2DArray = 0x905E,
        IntImageCubeMapArray = 0x905F,
        IntImage2DMultisample = 0x9060,
        IntImage2DMultisampleArray = 0x9061,
        UnsignedIntImage1D = 0x9062,
        UnsignedIntImage2D = 0x9063,
        UnsignedIntImage3D = 0x9064,
        UnsignedIntImage2DRect = 0x9065,
        UnsignedIntImageCube = 0x9066,
        UnsignedIntImageBuffer = 0x9067,
        UnsignedIntImage1DArray = 0x9068,
        UnsignedIntImage2DArray = 0x9069,
        UnsignedIntImageCubeMapArray = 0x906A,
        UnsignedIntImage2DMultisample = 0x906B,
        UnsignedIntImage2DMultisampleArray = 0x906C,
    }
    public enum UniformType : uint
    {
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Double = 0x140A,
        FloatVec2 = 0x8B50,
        FloatVec3 = 0x8B51,
        FloatVec4 = 0x8B52,
        IntVec2 = 0x8B53,
        IntVec3 = 0x8B54,
        IntVec4 = 0x8B55,
        Bool = 0x8B56,
        BoolVec2 = 0x8B57,
        BoolVec3 = 0x8B58,
        BoolVec4 = 0x8B59,
        FloatMat2 = 0x8B5A,
        FloatMat3 = 0x8B5B,
        FloatMat4 = 0x8B5C,
        Sampler1D = 0x8B5D,
        Sampler2D = 0x8B5E,
        Sampler3D = 0x8B5F,
        SamplerCube = 0x8B60,
        Sampler1DShadow = 0x8B61,
        Sampler2DShadow = 0x8B62,
        FloatMat2X3 = 0x8B65,
        FloatMat2X4 = 0x8B66,
        FloatMat3X2 = 0x8B67,
        FloatMat3X4 = 0x8B68,
        FloatMat4X2 = 0x8B69,
        FloatMat4X3 = 0x8B6A,
        Sampler1DArray = 0x8DC0,
        Sampler2DArray = 0x8DC1,
        Sampler1DArrayShadow = 0x8DC3,
        Sampler2DArrayShadow = 0x8DC4,
        SamplerCubeShadow = 0x8DC5,
        UnsignedIntVec2 = 0x8DC6,
        UnsignedIntVec3 = 0x8DC7,
        UnsignedIntVec4 = 0x8DC8,
        IntSampler1D = 0x8DC9,
        IntSampler2D = 0x8DCA,
        IntSampler3D = 0x8DCB,
        IntSamplerCube = 0x8DCC,
        IntSampler1DArray = 0x8DCE,
        IntSampler2DArray = 0x8DCF,
        UnsignedIntSampler1D = 0x8DD1,
        UnsignedIntSampler2D = 0x8DD2,
        UnsignedIntSampler3D = 0x8DD3,
        UnsignedIntSamplerCube = 0x8DD4,
        UnsignedIntSampler1DArray = 0x8DD6,
        UnsignedIntSampler2DArray = 0x8DD7,
        Sampler2DRect = 0x8B63,
        Sampler2DRectShadow = 0x8B64,
        SamplerBuffer = 0x8DC2,
        IntSampler2DRect = 0x8DCD,
        IntSamplerBuffer = 0x8DD0,
        UnsignedIntSampler2DRect = 0x8DD5,
        UnsignedIntSamplerBuffer = 0x8DD8,
        Sampler2DMultisample = 0x9108,
        IntSampler2DMultisample = 0x9109,
        UnsignedIntSampler2DMultisample = 0x910A,
        Sampler2DMultisampleArray = 0x910B,
        IntSampler2DMultisampleArray = 0x910C,
        UnsignedIntSampler2DMultisampleArray = 0x910D,
        SamplerCubeMapArray = 0x900C,
        SamplerCubeMapArrayShadow = 0x900D,
        IntSamplerCubeMapArray = 0x900E,
        UnsignedIntSamplerCubeMapArray = 0x900F,
        DoubleVec2 = 0x8FFC,
        DoubleVec3 = 0x8FFD,
        DoubleVec4 = 0x8FFE,
        DoubleMat2 = 0x8F46,
        DoubleMat3 = 0x8F47,
        DoubleMat4 = 0x8F48,
        DoubleMat2X3 = 0x8F49,
        DoubleMat2X4 = 0x8F4A,
        DoubleMat3X2 = 0x8F4B,
        DoubleMat3X4 = 0x8F4C,
        DoubleMat4X2 = 0x8F4D,
        DoubleMat4X3 = 0x8F4E,
    }
    public enum MapTypeNV : uint
    {
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum VertexWeightPointerTypeEXT : uint
    {
        Float = 0x1406,
    }
    public enum FogCoordinatePointerType : uint
    {
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum FogPointerTypeEXT : uint
    {
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum FogPointerTypeIBM : uint
    {
        Float = 0x1406,
        Double = 0x140A,
    }
    public enum LogicOp : uint
    {
        Clear = 0x1500,
        And = 0x1501,
        AndReverse = 0x1502,
        Copy = 0x1503,
        AndInverted = 0x1504,
        Noop = 0x1505,
        Xor = 0x1506,
        Or = 0x1507,
        Nor = 0x1508,
        Equiv = 0x1509,
        Invert = 0x150A,
        OrReverse = 0x150B,
        CopyInverted = 0x150C,
        OrInverted = 0x150D,
        Nand = 0x150E,
        Set = 0x150F,
    }
    public enum PathFillMode : uint
    {
        Invert = 0x150A,
    }
    public enum MatrixMode : uint
    {
        Texture = 0x1702,
        Modelview = 0x1700,
        Projection = 0x1701,
    }
    public enum ObjectIdentifier : uint
    {
        Texture = 0x1702,
        VertexArray = 0x8074,
        Framebuffer = 0x8D40,
        Renderbuffer = 0x8D41,
        TransformFeedback = 0x8E22,
        Buffer = 0x82E0,
        Shader = 0x82E1,
        Program = 0x82E2,
        Query = 0x82E3,
        ProgramPipeline = 0x82E4,
        Sampler = 0x82E6,
    }
    public enum Buffer : uint
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
    }
    public enum PixelCopyType : uint
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
    }
    public enum InvalidateFramebufferAttachment : uint
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
        DepthStencilAttachment = 0x821A,
        ColorAttachment0 = 0x8CE0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
        DepthAttachment = 0x8D00,
    }
    public enum InternalFormat : uint
    {
        StencilIndex = 0x1901,
        DepthComponent = 0x1902,
        Red = 0x1903,
        Rgb = 0x1907,
        Rgba = 0x1908,
        R3G3B2 = 0x2A10,
        Rgb4 = 0x804F,
        Rgb5 = 0x8050,
        Rgb8 = 0x8051,
        Rgb10 = 0x8052,
        Rgb12 = 0x8053,
        Rgb16 = 0x8054,
        Rgba2 = 0x8055,
        Rgba4 = 0x8056,
        Rgb5A1 = 0x8057,
        Rgba8 = 0x8058,
        Rgb10A2 = 0x8059,
        Rgba12 = 0x805A,
        Rgba16 = 0x805B,
        Alpha4 = 0x803B,
        Alpha8 = 0x803C,
        Alpha12 = 0x803D,
        Alpha16 = 0x803E,
        Luminance4 = 0x803F,
        Luminance8 = 0x8040,
        Luminance12 = 0x8041,
        Luminance16 = 0x8042,
        Luminance4Alpha4 = 0x8043,
        Luminance6Alpha2 = 0x8044,
        Luminance8Alpha8 = 0x8045,
        Luminance12Alpha4 = 0x8046,
        Luminance12Alpha12 = 0x8047,
        Luminance16Alpha16 = 0x8048,
        Intensity = 0x8049,
        Intensity4 = 0x804A,
        Intensity8 = 0x804B,
        Intensity12 = 0x804C,
        Intensity16 = 0x804D,
        CompressedRgb = 0x84ED,
        CompressedRgba = 0x84EE,
        DepthComponent16 = 0x81A5,
        DepthComponent24 = 0x81A6,
        DepthComponent32 = 0x81A7,
        Srgb = 0x8C40,
        Srgb8 = 0x8C41,
        SrgbAlpha = 0x8C42,
        Srgb8Alpha8 = 0x8C43,
        CompressedSrgb = 0x8C48,
        CompressedSrgbAlpha = 0x8C49,
        CompressedRed = 0x8225,
        CompressedRg = 0x8226,
        Rgba32F = 0x8814,
        Rgb32F = 0x8815,
        Rgba16F = 0x881A,
        Rgb16F = 0x881B,
        R11FG11FB10F = 0x8C3A,
        Rgb9E5 = 0x8C3D,
        Rgba32Ui = 0x8D70,
        Rgb32Ui = 0x8D71,
        Rgba16Ui = 0x8D76,
        Rgb16Ui = 0x8D77,
        Rgba8Ui = 0x8D7C,
        Rgb8Ui = 0x8D7D,
        Rgba32I = 0x8D82,
        Rgb32I = 0x8D83,
        Rgba16I = 0x8D88,
        Rgb16I = 0x8D89,
        Rgba8I = 0x8D8E,
        Rgb8I = 0x8D8F,
        DepthComponent32F = 0x8CAC,
        Depth32FStencil8 = 0x8CAD,
        DepthStencil = 0x84F9,
        Depth24Stencil8 = 0x88F0,
        StencilIndex1 = 0x8D46,
        StencilIndex4 = 0x8D47,
        StencilIndex8 = 0x8D48,
        StencilIndex16 = 0x8D49,
        CompressedRedRgtc1 = 0x8DBB,
        CompressedSignedRedRgtc1 = 0x8DBC,
        CompressedRgRgtc2 = 0x8DBD,
        CompressedSignedRgRgtc2 = 0x8DBE,
        Rg = 0x8227,
        R8 = 0x8229,
        R16 = 0x822A,
        Rg8 = 0x822B,
        Rg16 = 0x822C,
        R16F = 0x822D,
        R32F = 0x822E,
        Rg16F = 0x822F,
        Rg32F = 0x8230,
        R8I = 0x8231,
        R8Ui = 0x8232,
        R16I = 0x8233,
        R16Ui = 0x8234,
        R32I = 0x8235,
        R32Ui = 0x8236,
        Rg8I = 0x8237,
        Rg8Ui = 0x8238,
        Rg16I = 0x8239,
        Rg16Ui = 0x823A,
        Rg32I = 0x823B,
        Rg32Ui = 0x823C,
        R8Snorm = 0x8F94,
        Rg8Snorm = 0x8F95,
        Rgb8Snorm = 0x8F96,
        Rgba8Snorm = 0x8F97,
        R16Snorm = 0x8F98,
        Rg16Snorm = 0x8F99,
        Rgb16Snorm = 0x8F9A,
        Rgba16Snorm = 0x8F9B,
        Rgb10A2Ui = 0x906F,
        Rgb565 = 0x8D62,
        CompressedRgbaBptcUnorm = 0x8E8C,
        CompressedSrgbAlphaBptcUnorm = 0x8E8D,
        CompressedRgbBptcSignedFloat = 0x8E8E,
        CompressedRgbBptcUnsignedFloat = 0x8E8F,
        CompressedRgb8Etc2 = 0x9274,
        CompressedSrgb8Etc2 = 0x9275,
        CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276,
        CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277,
        CompressedRgba8Etc2Eac = 0x9278,
        CompressedSrgb8Alpha8Etc2Eac = 0x9279,
        CompressedR11Eac = 0x9270,
        CompressedSignedR11Eac = 0x9271,
        CompressedRg11Eac = 0x9272,
        CompressedSignedRg11Eac = 0x9273,
    }
    public enum DepthStencilTextureMode : uint
    {
        StencilIndex = 0x1901,
        DepthComponent = 0x1902,
    }
    public enum CombinerComponentUsageNV : uint
    {
        Blue = 0x1905,
        Alpha = 0x1906,
        Rgb = 0x1907,
    }
    public enum CombinerPortionNV : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
    }
    public enum PolygonMode : uint
    {
        Point = 0x1B00,
        Line = 0x1B01,
        Fill = 0x1B02,
    }
    public enum MeshMode1 : uint
    {
        Point = 0x1B00,
        Line = 0x1B01,
    }
    public enum MeshMode2 : uint
    {
        Point = 0x1B00,
        Line = 0x1B01,
        Fill = 0x1B02,
    }
    public enum LightEnvModeSGIX : uint
    {
        Replace = 0x1E01,
        Add = 0x104,
        Modulate = 0x2100,
    }
    public enum StringName : uint
    {
        Vendor = 0x1F00,
        Renderer = 0x1F01,
        Version = 0x1F02,
        Extensions = 0x1F03,
        ShadingLanguageVersion = 0x8B8C,
    }
    public enum BlitFramebufferFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }
    public enum TextureMagFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }
    public enum TextureMinFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
        NearestMipmapNearest = 0x2700,
        LinearMipmapNearest = 0x2701,
        NearestMipmapLinear = 0x2702,
        LinearMipmapLinear = 0x2703,
    }
    public enum FogMode : uint
    {
        Linear = 0x2601,
        Exp = 0x800,
        Exp2 = 0x801,
    }
    public enum SamplerParameterI : uint
    {
        MagFilter = 0x2800,
        MinFilter = 0x2801,
        WrapS = 0x2802,
        WrapT = 0x2803,
        WrapR = 0x8072,
        CompareMode = 0x884C,
        CompareFunc = 0x884D,
    }
    public enum TextureWrapMode : uint
    {
        Repeat = 0x2901,
        Clamp = 0x2900,
        ClampToEdge = 0x812F,
        ClampToBorder = 0x812D,
        MirroredRepeat = 0x8370,
    }
    public enum AccumOp : uint
    {
        Accum = 0x100,
        Load = 0x101,
        Return = 0x102,
        Mult = 0x103,
        Add = 0x104,
    }
    public enum FeedbackType : uint
    {
        N2D = 0x600,
        N3D = 0x601,
        N3DColor = 0x602,
        N3DColorTexture = 0x603,
        N4DColorTexture = 0x604,
    }
    public enum FeedBackToken : uint
    {
        PassThroughToken = 0x700,
        PointToken = 0x701,
        LineToken = 0x702,
        PolygonToken = 0x703,
        BitmapToken = 0x704,
        DrawPixelToken = 0x705,
        CopyPixelToken = 0x706,
        LineResetToken = 0x707,
    }
    public enum MapQuery : uint
    {
        Coeff = 0xA00,
        Order = 0xA01,
        Domain = 0xA02,
    }
    public enum GetMapQuery : uint
    {
        Coeff = 0xA00,
        Order = 0xA01,
        Domain = 0xA02,
    }
    public enum PixelMap : uint
    {
        IToI = 0xC70,
        SToS = 0xC71,
        IToR = 0xC72,
        IToG = 0xC73,
        IToB = 0xC74,
        IToA = 0xC75,
        RToR = 0xC76,
        GToG = 0xC77,
        BToB = 0xC78,
        AToA = 0xC79,
    }
    public enum VertexShaderTextureUnitParameter : uint
    {
        CurrentTextureCoords = 0xB03,
        TextureMatrix = 0xBA8,
    }
    public enum LightModelParameter : uint
    {
        LocalViewer = 0xB51,
        TwoSide = 0xB52,
        Ambient = 0xB53,
        ColorControl = 0x81F8,
    }
    public enum FogPName : uint
    {
        Index = 0xB61,
        Density = 0xB62,
        Start = 0xB63,
        End = 0xB64,
        Mode = 0xB65,
        CoordSrc = 0x8450,
    }
    public enum FogParameter : uint
    {
        Index = 0xB61,
        Density = 0xB62,
        Start = 0xB63,
        End = 0xB64,
        Mode = 0xB65,
        Color = 0xB66,
    }
    public enum PixelTransferParameter : uint
    {
        MapColor = 0xD10,
        MapStencil = 0xD11,
        IndexShift = 0xD12,
        IndexOffset = 0xD13,
        RedScale = 0xD14,
        RedBias = 0xD15,
        GreenScale = 0xD18,
        GreenBias = 0xD19,
        BlueScale = 0xD1A,
        BlueBias = 0xD1B,
        AlphaScale = 0xD1C,
        AlphaBias = 0xD1D,
        DepthScale = 0xD1E,
        DepthBias = 0xD1F,
    }
    public enum IndexMaterialParameterEXT : uint
    {
        Offset = 0xD13,
    }
    public enum TextureEnvParameter : uint
    {
        AlphaScale = 0xD1C,
        TextureEnvMode = 0x2200,
        TextureEnvColor = 0x2201,
        Combine = 0x8570,
        CombineRgb = 0x8571,
        CombineAlpha = 0x8572,
        Source0Rgb = 0x8580,
        Source1Rgb = 0x8581,
        Source2Rgb = 0x8582,
        Source0Alpha = 0x8588,
        Source1Alpha = 0x8589,
        Source2Alpha = 0x858A,
        Operand0Rgb = 0x8590,
        Operand1Rgb = 0x8591,
        Operand2Rgb = 0x8592,
        Operand0Alpha = 0x8598,
        Operand1Alpha = 0x8599,
        Operand2Alpha = 0x859A,
        RgbScale = 0x8573,
        AddSigned = 0x8574,
        Interpolate = 0x8575,
        Constant = 0x8576,
        PrimaryColor = 0x8577,
        Previous = 0x8578,
        TextureLodBias = 0x8501,
        Src1Alpha = 0x8589,
        Src0Rgb = 0x8580,
        Src1Rgb = 0x8581,
        Src2Rgb = 0x8582,
        Src0Alpha = 0x8588,
        Src2Alpha = 0x858A,
        CoordReplace = 0x8862,
    }
    public enum MapTarget : uint
    {
        Map1Color4 = 0xD90,
        Map1Index = 0xD91,
        Map1Normal = 0xD92,
        Map1TextureCoord1 = 0xD93,
        Map1TextureCoord2 = 0xD94,
        Map1TextureCoord3 = 0xD95,
        Map1TextureCoord4 = 0xD96,
        Map1Vertex3 = 0xD97,
        Map1Vertex4 = 0xD98,
        Map2Color4 = 0xDB0,
        Map2Index = 0xDB1,
        Map2Normal = 0xDB2,
        Map2TextureCoord1 = 0xDB3,
        Map2TextureCoord2 = 0xDB4,
        Map2TextureCoord3 = 0xDB5,
        Map2TextureCoord4 = 0xDB6,
        Map2Vertex3 = 0xDB7,
        Map2Vertex4 = 0xDB8,
    }
    public enum LightParameter : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Position = 0x1203,
        SpotDirection = 0x1204,
        SpotExponent = 0x1205,
        SpotCutoff = 0x1206,
        ConstantAttenuation = 0x1207,
        LinearAttenuation = 0x1208,
        QuadraticAttenuation = 0x1209,
    }
    public enum MaterialParameter : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Emission = 0x1600,
        Shininess = 0x1601,
        AmbientAndDiffuse = 0x1602,
        ColorIndexes = 0x1603,
    }
    public enum FragmentLightParameterSGIX : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Position = 0x1203,
        SpotDirection = 0x1204,
        SpotExponent = 0x1205,
        SpotCutoff = 0x1206,
        ConstantAttenuation = 0x1207,
        LinearAttenuation = 0x1208,
        QuadraticAttenuation = 0x1209,
    }
    public enum ColorMaterialParameter : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Emission = 0x1600,
        AmbientAndDiffuse = 0x1602,
    }
    public enum ListMode : uint
    {
        Compile = 0x1300,
        CompileAndExecute = 0x1301,
    }
    public enum RenderingMode : uint
    {
        Render = 0x1C00,
        Feedback = 0x1C01,
        Select = 0x1C02,
    }
    public enum ShadingModel : uint
    {
        Flat = 0x1D00,
        Smooth = 0x1D01,
    }
    public enum TextureCoordName : uint
    {
        S = 0x2000,
        T = 0x2001,
        R = 0x2002,
        Q = 0x2003,
    }
    public enum TextureEnvTarget : uint
    {
        TextureEnv = 0x2300,
        TextureFilterControl = 0x8500,
        PointSprite = 0x8861,
    }
    public enum TextureGenMode : uint
    {
        EyeLinear = 0x2400,
        ObjectLinear = 0x2401,
        SphereMap = 0x2402,
    }
    public enum TextureGenParameter : uint
    {
        TextureGenMode = 0x2500,
        ObjectPlane = 0x2501,
        EyePlane = 0x2502,
    }
    public enum ClipPlaneName : uint
    {
        Plane0 = 0x3000,
        Plane1 = 0x3001,
        Plane2 = 0x3002,
        Plane3 = 0x3003,
        Plane4 = 0x3004,
        Plane5 = 0x3005,
        Distance0 = 0x3000,
        Distance1 = 0x3001,
        Distance2 = 0x3002,
        Distance3 = 0x3003,
        Distance4 = 0x3004,
        Distance5 = 0x3005,
        Distance6 = 0x3006,
        Distance7 = 0x3007,
    }
    public enum LightName : uint
    {
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,
    }
    public enum VertexAttribLType : uint
    {
        Double = 0x140A,
    }
    public enum SizedInternalFormat : uint
    {
        R3G3B2 = 0x2A10,
        Rgb4 = 0x804F,
        Rgb5 = 0x8050,
        Rgb8 = 0x8051,
        Rgb10 = 0x8052,
        Rgb12 = 0x8053,
        Rgb16 = 0x8054,
        Rgba2 = 0x8055,
        Rgba4 = 0x8056,
        Rgb5A1 = 0x8057,
        Rgba8 = 0x8058,
        Rgb10A2 = 0x8059,
        Rgba12 = 0x805A,
        Rgba16 = 0x805B,
        Alpha4 = 0x803B,
        Alpha8 = 0x803C,
        Alpha12 = 0x803D,
        Alpha16 = 0x803E,
        Luminance4 = 0x803F,
        Luminance8 = 0x8040,
        Luminance12 = 0x8041,
        Luminance16 = 0x8042,
        Luminance4Alpha4 = 0x8043,
        Luminance6Alpha2 = 0x8044,
        Luminance8Alpha8 = 0x8045,
        Luminance12Alpha4 = 0x8046,
        Luminance12Alpha12 = 0x8047,
        Luminance16Alpha16 = 0x8048,
        Intensity4 = 0x804A,
        Intensity8 = 0x804B,
        Intensity12 = 0x804C,
        Intensity16 = 0x804D,
        DepthComponent16 = 0x81A5,
        DepthComponent24 = 0x81A6,
        DepthComponent32 = 0x81A7,
        Srgb8 = 0x8C41,
        Srgb8Alpha8 = 0x8C43,
        Rgba32F = 0x8814,
        Rgb32F = 0x8815,
        Rgba16F = 0x881A,
        Rgb16F = 0x881B,
        R11FG11FB10F = 0x8C3A,
        Rgb9E5 = 0x8C3D,
        Rgba32Ui = 0x8D70,
        Rgb32Ui = 0x8D71,
        Rgba16Ui = 0x8D76,
        Rgb16Ui = 0x8D77,
        Rgba8Ui = 0x8D7C,
        Rgb8Ui = 0x8D7D,
        Rgba32I = 0x8D82,
        Rgb32I = 0x8D83,
        Rgba16I = 0x8D88,
        Rgb16I = 0x8D89,
        Rgba8I = 0x8D8E,
        Rgb8I = 0x8D8F,
        DepthComponent32F = 0x8CAC,
        Depth32FStencil8 = 0x8CAD,
        Depth24Stencil8 = 0x88F0,
        StencilIndex1 = 0x8D46,
        StencilIndex4 = 0x8D47,
        StencilIndex8 = 0x8D48,
        StencilIndex16 = 0x8D49,
        CompressedRedRgtc1 = 0x8DBB,
        CompressedSignedRedRgtc1 = 0x8DBC,
        CompressedRgRgtc2 = 0x8DBD,
        CompressedSignedRgRgtc2 = 0x8DBE,
        R8 = 0x8229,
        R16 = 0x822A,
        Rg8 = 0x822B,
        Rg16 = 0x822C,
        R16F = 0x822D,
        R32F = 0x822E,
        Rg16F = 0x822F,
        Rg32F = 0x8230,
        R8I = 0x8231,
        R8Ui = 0x8232,
        R16I = 0x8233,
        R16Ui = 0x8234,
        R32I = 0x8235,
        R32Ui = 0x8236,
        Rg8I = 0x8237,
        Rg8Ui = 0x8238,
        Rg16I = 0x8239,
        Rg16Ui = 0x823A,
        Rg32I = 0x823B,
        Rg32Ui = 0x823C,
        R8Snorm = 0x8F94,
        Rg8Snorm = 0x8F95,
        Rgb8Snorm = 0x8F96,
        Rgba8Snorm = 0x8F97,
        R16Snorm = 0x8F98,
        Rg16Snorm = 0x8F99,
        Rgb16Snorm = 0x8F9A,
        Rgba16Snorm = 0x8F9B,
        Rgb10A2Ui = 0x906F,
        Rgb565 = 0x8D62,
        CompressedRgbaBptcUnorm = 0x8E8C,
        CompressedSrgbAlphaBptcUnorm = 0x8E8D,
        CompressedRgbBptcSignedFloat = 0x8E8E,
        CompressedRgbBptcUnsignedFloat = 0x8E8F,
        CompressedRgb8Etc2 = 0x9274,
        CompressedSrgb8Etc2 = 0x9275,
        CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276,
        CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277,
        CompressedRgba8Etc2Eac = 0x9278,
        CompressedSrgb8Alpha8Etc2Eac = 0x9279,
        CompressedR11Eac = 0x9270,
        CompressedSignedR11Eac = 0x9271,
        CompressedRg11Eac = 0x9272,
        CompressedSignedRg11Eac = 0x9273,
    }
    public enum ClientAttribMask : uint
    {
        PixelStoreBit = 0x1,
        VertexArrayBit = 0x2,
        AllAttribBits = 0xFFFFFFFF,
    }
    public enum GetPointervPName : uint
    {
        VertexArrayPointer = 0x808E,
        NormalArrayPointer = 0x808F,
        ColorArrayPointer = 0x8090,
        IndexArrayPointer = 0x8091,
        TextureCoordArrayPointer = 0x8092,
        EdgeFlagArrayPointer = 0x8093,
        FeedbackBufferPointer = 0xDF0,
        SelectionBufferPointer = 0xDF3,
        DebugCallbackFunction = 0x8244,
        DebugCallbackUserParam = 0x8245,
    }
    public enum InterleavedArrayFormat : uint
    {
        V2F = 0x2A20,
        V3F = 0x2A21,
        C4UbV2F = 0x2A22,
        C4UbV3F = 0x2A23,
        C3FV3F = 0x2A24,
        N3FV3F = 0x2A25,
        C4FN3FV3F = 0x2A26,
        T2FV3F = 0x2A27,
        T4FV4F = 0x2A28,
        T2FC4UbV3F = 0x2A29,
        T2FC3FV3F = 0x2A2A,
        T2FN3FV3F = 0x2A2B,
        T2FC4FN3FV3F = 0x2A2C,
        T4FC4FN3FV4F = 0x2A2D,
    }
    public enum Ungrouped : uint
    {
        TextureDepth = 0x8071,
        RescaleNormal = 0x803A,
        TextureCompressedImageSize = 0x86A0,
        ClientActiveTexture = 0x84E1,
        MaxTextureUnits = 0x84E2,
        TransposeModelviewMatrix = 0x84E3,
        TransposeProjectionMatrix = 0x84E4,
        TransposeTextureMatrix = 0x84E5,
        TransposeColorMatrix = 0x84E6,
        CompressedAlpha = 0x84E9,
        CompressedLuminance = 0x84EA,
        CompressedLuminanceAlpha = 0x84EB,
        CompressedIntensity = 0x84EC,
        Subtract = 0x84E7,
        Dot3Rgb = 0x86AE,
        Dot3Rgba = 0x86AF,
        TextureDepthSize = 0x884A,
        FogCoordinateSource = 0x8450,
        CurrentFogCoordinate = 0x8453,
        FogCoordinateArrayType = 0x8454,
        FogCoordinateArrayStride = 0x8455,
        FogCoordinateArrayPointer = 0x8456,
        FogCoordinateArray = 0x8457,
        ColorSum = 0x8458,
        CurrentSecondaryColor = 0x8459,
        SecondaryColorArraySize = 0x845A,
        SecondaryColorArrayType = 0x845B,
        SecondaryColorArrayStride = 0x845C,
        SecondaryColorArrayPointer = 0x845D,
        SecondaryColorArray = 0x845E,
        DepthTextureMode = 0x884B,
        VertexArrayBufferBinding = 0x8896,
        NormalArrayBufferBinding = 0x8897,
        ColorArrayBufferBinding = 0x8898,
        IndexArrayBufferBinding = 0x8899,
        TextureCoordArrayBufferBinding = 0x889A,
        EdgeFlagArrayBufferBinding = 0x889B,
        SecondaryColorArrayBufferBinding = 0x889C,
        FogCoordinateArrayBufferBinding = 0x889D,
        WeightArrayBufferBinding = 0x889E,
        CurrentFogCoord = 0x8453,
        FogCoordArrayType = 0x8454,
        FogCoordArrayStride = 0x8455,
        FogCoordArrayPointer = 0x8456,
        FogCoordArray = 0x8457,
        FogCoordArrayBufferBinding = 0x889D,
        VertexProgramPointSize = 0x8642,
        DrawBuffer0 = 0x8825,
        DrawBuffer1 = 0x8826,
        DrawBuffer2 = 0x8827,
        DrawBuffer3 = 0x8828,
        DrawBuffer4 = 0x8829,
        DrawBuffer5 = 0x882A,
        DrawBuffer6 = 0x882B,
        DrawBuffer7 = 0x882C,
        DrawBuffer8 = 0x882D,
        DrawBuffer9 = 0x882E,
        DrawBuffer10 = 0x882F,
        DrawBuffer11 = 0x8830,
        DrawBuffer12 = 0x8831,
        DrawBuffer13 = 0x8832,
        DrawBuffer14 = 0x8833,
        DrawBuffer15 = 0x8834,
        PointSpriteCoordOrigin = 0x8CA0,
        VertexProgramTwoSide = 0x8643,
        MaxTextureCoords = 0x8871,
        CurrentRasterSecondaryColor = 0x845F,
        SluminanceAlpha = 0x8C44,
        Sluminance8Alpha8 = 0x8C45,
        Sluminance = 0x8C46,
        Sluminance8 = 0x8C47,
        CompressedSluminance = 0x8C4A,
        CompressedSluminanceAlpha = 0x8C4B,
        TextureSharedSize = 0x8C3F,
        MaxTransformFeedbackSeparateComponents = 0x8C80,
        MaxTransformFeedbackInterleavedComponents = 0x8C8A,
        MaxTransformFeedbackSeparateAttribs = 0x8C8B,
        FramebufferDefault = 0x8218,
        TextureStencilSize = 0x88F1,
        TextureRedType = 0x8C10,
        TextureGreenType = 0x8C11,
        TextureBlueType = 0x8C12,
        TextureAlphaType = 0x8C13,
        TextureDepthType = 0x8C16,
        UnsignedNormalized = 0x8C17,
        FramebufferBinding = 0x8CA6,
        MaxSamples = 0x8D57,
        Index = 0x8222,
        TextureLuminanceType = 0x8C14,
        TextureIntensityType = 0x8C15,
        ClampVertexColor = 0x891A,
        ClampFragmentColor = 0x891B,
        AlphaInteger = 0x8D97,
        TextureBufferDataStoreBinding = 0x8C2D,
        SignedNormalized = 0x8F9C,
        MaxGeometryOutputVertices = 0x8DE0,
        MaxGeometryTotalOutputComponents = 0x8DE1,
        QuadsFollowProvokingVertexConvention = 0x8E4C,
        SyncFence = 0x9116,
        Unsignaled = 0x9118,
        Signaled = 0x9119,
        SampleMaskValue = 0x8E52,
        TextureSamples = 0x9106,
        TextureFixedSampleLocations = 0x9107,
        MinSampleShadingValue = 0x8C37,
        MinProgramTextureGatherOffset = 0x8E5E,
        MaxProgramTextureGatherOffset = 0x8E5F,
        TextureBindingCubeMapArray = 0x900A,
        DrawIndirectBufferBinding = 0x8F43,
        GeometryShaderInvocations = 0x887F,
        MaxGeometryShaderInvocations = 0x8E5A,
        MinFragmentInterpolationOffset = 0x8E5B,
        MaxFragmentInterpolationOffset = 0x8E5C,
        FragmentInterpolationOffsetBits = 0x8E5D,
        MaxVertexStreams = 0x8E71,
        MaxSubroutines = 0x8DE7,
        MaxSubroutineUniformLocations = 0x8DE8,
        TessControlOutputVertices = 0x8E75,
        TessGenMode = 0x8E76,
        TessGenSpacing = 0x8E77,
        TessGenVertexOrder = 0x8E78,
        TessGenPointMode = 0x8E79,
        Isolines = 0x8E7A,
        FractionalOdd = 0x8E7B,
        FractionalEven = 0x8E7C,
        MaxPatchVertices = 0x8E7D,
        MaxTessGenLevel = 0x8E7E,
        MaxTessControlUniformComponents = 0x8E7F,
        MaxTessEvaluationUniformComponents = 0x8E80,
        MaxTessControlTextureImageUnits = 0x8E81,
        MaxTessEvaluationTextureImageUnits = 0x8E82,
        MaxTessControlOutputComponents = 0x8E83,
        MaxTessPatchComponents = 0x8E84,
        MaxTessControlTotalOutputComponents = 0x8E85,
        MaxTessEvaluationOutputComponents = 0x8E86,
        MaxTessControlInputComponents = 0x886C,
        MaxTessEvaluationInputComponents = 0x886D,
        MaxCombinedTessControlUniformComponents = 0x8E1E,
        MaxCombinedTessEvaluationUniformComponents = 0x8E1F,
        TransformFeedbackBufferPaused = 0x8E23,
        TransformFeedbackBufferActive = 0x8E24,
        TransformFeedbackBinding = 0x8E25,
        MaxTransformFeedbackBuffers = 0x8E70,
        UndefinedVertex = 0x8260,
        CopyReadBufferBinding = 0x8F36,
        CopyWriteBufferBinding = 0x8F37,
        UnpackCompressedBlockWidth = 0x9127,
        UnpackCompressedBlockHeight = 0x9128,
        UnpackCompressedBlockDepth = 0x9129,
        UnpackCompressedBlockSize = 0x912A,
        PackCompressedBlockWidth = 0x912B,
        PackCompressedBlockHeight = 0x912C,
        PackCompressedBlockDepth = 0x912D,
        PackCompressedBlockSize = 0x912E,
        AtomicCounterBufferStart = 0x92C2,
        AtomicCounterBufferSize = 0x92C3,
        MaxVertexAtomicCounterBuffers = 0x92CC,
        MaxTessControlAtomicCounterBuffers = 0x92CD,
        MaxTessEvaluationAtomicCounterBuffers = 0x92CE,
        MaxGeometryAtomicCounterBuffers = 0x92CF,
        MaxFragmentAtomicCounterBuffers = 0x92D0,
        MaxCombinedAtomicCounterBuffers = 0x92D1,
        MaxAtomicCounterBufferSize = 0x92D8,
        MaxAtomicCounterBufferBindings = 0x92DC,
        UnsignedIntAtomicCounter = 0x92DB,
        MaxImageUnits = 0x8F38,
        MaxCombinedImageUnitsAndFragmentOutputs = 0x8F39,
        ImageBindingName = 0x8F3A,
        ImageBindingLevel = 0x8F3B,
        ImageBindingLayered = 0x8F3C,
        ImageBindingLayer = 0x8F3D,
        ImageBindingAccess = 0x8F3E,
        MaxImageSamples = 0x906D,
        ImageBindingFormat = 0x906E,
        ImageFormatCompatibilityBySize = 0x90C8,
        ImageFormatCompatibilityByClass = 0x90C9,
        MaxVertexImageUniforms = 0x90CA,
        MaxTessControlImageUniforms = 0x90CB,
        MaxTessEvaluationImageUniforms = 0x90CC,
        MaxGeometryImageUniforms = 0x90CD,
        MaxFragmentImageUniforms = 0x90CE,
        MaxCombinedImageUniforms = 0x90CF,
        TextureImmutableFormat = 0x912F,
        NumShadingLanguageVersions = 0x82E9,
        MaxComputeImageUniforms = 0x91BD,
        MaxComputeSharedMemorySize = 0x8262,
        DebugNextLoggedMessageLength = 0x8243,
        MaxDebugMessageLength = 0x9143,
        MaxDebugLoggedMessages = 0x9144,
        DebugLoggedMessages = 0x9145,
        MaxCombinedDimensions = 0x8282,
        DepthComponents = 0x8284,
        StencilComponents = 0x8285,
        ManualGenerateMipmap = 0x8294,
        FullSupport = 0x82B7,
        CaveatSupport = 0x82B8,
        ImageClass4X32 = 0x82B9,
        ImageClass2X32 = 0x82BA,
        ImageClass1X32 = 0x82BB,
        ImageClass4X16 = 0x82BC,
        ImageClass2X16 = 0x82BD,
        ImageClass1X16 = 0x82BE,
        ImageClass4X8 = 0x82BF,
        ImageClass2X8 = 0x82C0,
        ImageClass1X8 = 0x82C1,
        ImageClass111110 = 0x82C2,
        ImageClass1010102 = 0x82C3,
        ViewClass128Bits = 0x82C4,
        ViewClass96Bits = 0x82C5,
        ViewClass64Bits = 0x82C6,
        ViewClass48Bits = 0x82C7,
        ViewClass32Bits = 0x82C8,
        ViewClass24Bits = 0x82C9,
        ViewClass16Bits = 0x82CA,
        ViewClass8Bits = 0x82CB,
        ViewClassS3TcDxt1Rgb = 0x82CC,
        ViewClassS3TcDxt1Rgba = 0x82CD,
        ViewClassS3TcDxt3Rgba = 0x82CE,
        ViewClassS3TcDxt5Rgba = 0x82CF,
        ViewClassRgtc1Red = 0x82D0,
        ViewClassRgtc2Rg = 0x82D1,
        ViewClassBptcUnorm = 0x82D2,
        ViewClassBptcFloat = 0x82D3,
        MaxShaderStorageBlockSize = 0x90DE,
        MaxCombinedShaderOutputResources = 0x8F39,
        TextureBufferOffset = 0x919D,
        TextureBufferSize = 0x919E,
        TextureViewMinLevel = 0x82DB,
        TextureViewNumLevels = 0x82DC,
        TextureViewMinLayer = 0x82DD,
        TextureViewNumLayers = 0x82DE,
        TextureImmutableLevels = 0x82DF,
        VertexBindingBuffer = 0x8F4F,
        DisplayList = 0x82E7,
        MaxVertexAttribStride = 0x82E5,
        PrimitiveRestartForPatchesSupported = 0x8221,
        TextureBufferBinding = 0x8C2A,
        QueryBufferBinding = 0x9193,
        MirrorClampToEdge = 0x8743,
        ContextLost = 0x507,
        ClipOrigin = 0x935C,
        ClipDepthMode = 0x935D,
        MaxCullDistances = 0x82F9,
        MaxCombinedClipAndCullDistances = 0x82FA,
        TextureTarget = 0x1006,
        ResetNotificationStrategy = 0x8256,
        LoseContextOnReset = 0x8252,
        NoResetNotification = 0x8261,
        ContextReleaseBehavior = 0x82FB,
        ContextReleaseBehaviorFlush = 0x82FC,
        SpirVBinary = 0x9552,
        ParameterBufferBinding = 0x80EF,
        TessControlShaderPatches = 0x82F1,
        TessEvaluationShaderInvocations = 0x82F2,
        GeometryShaderPrimitivesEmitted = 0x82F3,
        FragmentShaderInvocations = 0x82F4,
        ComputeShaderInvocations = 0x82F5,
        ClippingInputPrimitives = 0x82F6,
        ClippingOutputPrimitives = 0x82F7,
        PolygonOffsetClamp = 0x8E1B,
        SpirVExtensions = 0x9553,
        NumSpirVExtensions = 0x9554,
        MaxTextureMaxAnisotropy = 0x84FF,
        TransformFeedbackStreamOverflow = 0x82ED,
    }
    public enum LightModelColorControl : uint
    {
        SingleColor = 0x81F9,
        SeparateSpecularColor = 0x81FA,
    }
    public enum TextureUnit : uint
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }
    public enum FragmentShaderTextureSourceATI : uint
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }
    public enum InternalFormatPName : uint
    {
        Samples = 0x80A9,
        TextureCompressed = 0x86A1,
        GenerateMipmap = 0x8191,
        NumSampleCounts = 0x9380,
        ImageFormatCompatibilityType = 0x90C7,
        InternalformatSupported = 0x826F,
        InternalformatPreferred = 0x8270,
        InternalformatRedSize = 0x8271,
        InternalformatGreenSize = 0x8272,
        InternalformatBlueSize = 0x8273,
        InternalformatAlphaSize = 0x8274,
        InternalformatDepthSize = 0x8275,
        InternalformatStencilSize = 0x8276,
        InternalformatSharedSize = 0x8277,
        InternalformatRedType = 0x8278,
        InternalformatGreenType = 0x8279,
        InternalformatBlueType = 0x827A,
        InternalformatAlphaType = 0x827B,
        InternalformatDepthType = 0x827C,
        InternalformatStencilType = 0x827D,
        MaxWidth = 0x827E,
        MaxHeight = 0x827F,
        MaxDepth = 0x8280,
        MaxLayers = 0x8281,
        ColorComponents = 0x8283,
        ColorRenderable = 0x8286,
        DepthRenderable = 0x8287,
        StencilRenderable = 0x8288,
        FramebufferRenderable = 0x8289,
        FramebufferRenderableLayered = 0x828A,
        FramebufferBlend = 0x828B,
        ReadPixels = 0x828C,
        ReadPixelsFormat = 0x828D,
        ReadPixelsType = 0x828E,
        TextureImageFormat = 0x828F,
        TextureImageType = 0x8290,
        GetTextureImageFormat = 0x8291,
        GetTextureImageType = 0x8292,
        Mipmap = 0x8293,
        AutoGenerateMipmap = 0x8295,
        ColorEncoding = 0x8296,
        SrgbRead = 0x8297,
        SrgbWrite = 0x8298,
        Filter = 0x829A,
        VertexTexture = 0x829B,
        TessControlTexture = 0x829C,
        TessEvaluationTexture = 0x829D,
        GeometryTexture = 0x829E,
        FragmentTexture = 0x829F,
        ComputeTexture = 0x82A0,
        TextureShadow = 0x82A1,
        TextureGather = 0x82A2,
        TextureGatherShadow = 0x82A3,
        ShaderImageLoad = 0x82A4,
        ShaderImageStore = 0x82A5,
        ShaderImageAtomic = 0x82A6,
        ImageTexelSize = 0x82A7,
        ImageCompatibilityClass = 0x82A8,
        ImagePixelFormat = 0x82A9,
        ImagePixelType = 0x82AA,
        SimultaneousTextureAndDepthTest = 0x82AC,
        SimultaneousTextureAndStencilTest = 0x82AD,
        SimultaneousTextureAndDepthWrite = 0x82AE,
        SimultaneousTextureAndStencilWrite = 0x82AF,
        TextureCompressedBlockWidth = 0x82B1,
        TextureCompressedBlockHeight = 0x82B2,
        TextureCompressedBlockSize = 0x82B3,
        ClearBuffer = 0x82B4,
        TextureView = 0x82B5,
        ViewCompatibilityClass = 0x82B6,
        ClearTexture = 0x9365,
    }
    public enum PathColor : uint
    {
        Primary = 0x8577,
    }
    public enum PointParameterNameARB : uint
    {
        FadeThresholdSize = 0x8128,
        SizeMin = 0x8126,
        SizeMax = 0x8127,
        DistanceAttenuation = 0x8129,
    }
    public enum FogCoordSrc : uint
    {
        FogCoordinate = 0x8451,
        FragmentDepth = 0x8452,
        FogCoord = 0x8451,
    }
    public enum LightTextureModeEXT : uint
    {
        FragmentDepth = 0x8452,
    }
    public enum BlendEquationModeEXT : uint
    {
        FuncAdd = 0x8006,
        FuncReverseSubtract = 0x800B,
        FuncSubtract = 0x800A,
        Min = 0x8007,
        Max = 0x8008,
    }
    public enum BufferPNameARB : uint
    {
        Size = 0x8764,
        Usage = 0x8765,
        Access = 0x88BB,
        Mapped = 0x88BC,
        AccessFlags = 0x911F,
        MapLength = 0x9120,
        MapOffset = 0x9121,
        ImmutableStorage = 0x821F,
        StorageFlags = 0x8220,
    }
    public enum QueryParameterName : uint
    {
        QueryCounterBits = 0x8864,
        CurrentQuery = 0x8865,
    }
    public enum QueryObjectParameterName : uint
    {
        Result = 0x8866,
        ResultAvailable = 0x8867,
        ResultNoWait = 0x9194,
        Target = 0x82EA,
    }
    public enum BufferTargetARB : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,
        TransformFeedbackBuffer = 0x8C8E,
        TextureBuffer = 0x8C2A,
        CopyReadBuffer = 0x8F36,
        CopyWriteBuffer = 0x8F37,
        UniformBuffer = 0x8A11,
        DrawIndirectBuffer = 0x8F3F,
        AtomicCounterBuffer = 0x92C0,
        DispatchIndirectBuffer = 0x90EE,
        ShaderStorageBuffer = 0x90D2,
        QueryBuffer = 0x9192,
        ParameterBuffer = 0x80EE,
    }
    public enum CopyBufferSubDataTarget : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,
        TransformFeedbackBuffer = 0x8C8E,
        TextureBuffer = 0x8C2A,
        CopyReadBuffer = 0x8F36,
        CopyWriteBuffer = 0x8F37,
        UniformBuffer = 0x8A11,
        DrawIndirectBuffer = 0x8F3F,
        AtomicCounterBuffer = 0x92C0,
        DispatchIndirectBuffer = 0x90EE,
        ShaderStorageBuffer = 0x90D2,
        QueryBuffer = 0x9192,
    }
    public enum BufferStorageTarget : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,
        TransformFeedbackBuffer = 0x8C8E,
        TextureBuffer = 0x8C2A,
        CopyReadBuffer = 0x8F36,
        CopyWriteBuffer = 0x8F37,
        UniformBuffer = 0x8A11,
        DrawIndirectBuffer = 0x8F3F,
        AtomicCounterBuffer = 0x92C0,
        DispatchIndirectBuffer = 0x90EE,
        ShaderStorageBuffer = 0x90D2,
        QueryBuffer = 0x9192,
    }
    public enum VertexAttribPropertyARB : uint
    {
        VertexAttribArrayBufferBinding = 0x889F,
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        CurrentVertexAttrib = 0x8626,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayInteger = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
        VertexAttribArrayLong = 0x874E,
        VertexAttribBinding = 0x82D4,
        VertexAttribRelativeOffset = 0x82D5,
    }
    public enum VertexAttribEnum : uint
    {
        VertexAttribArrayBufferBinding = 0x889F,
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        CurrentVertexAttrib = 0x8626,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayInteger = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
    }
    public enum BufferAccessARB : uint
    {
        ReadOnly = 0x88B8,
        WriteOnly = 0x88B9,
        ReadWrite = 0x88BA,
    }
    public enum BufferPointerNameARB : uint
    {
        MapPointer = 0x88BD,
    }
    public enum VertexBufferObjectUsage : uint
    {
        StreamDraw = 0x88E0,
        StreamRead = 0x88E1,
        StreamCopy = 0x88E2,
        StaticDraw = 0x88E4,
        StaticRead = 0x88E5,
        StaticCopy = 0x88E6,
        DynamicDraw = 0x88E8,
        DynamicRead = 0x88E9,
        DynamicCopy = 0x88EA,
    }
    public enum BufferUsageARB : uint
    {
        StreamDraw = 0x88E0,
        StreamRead = 0x88E1,
        StreamCopy = 0x88E2,
        StaticDraw = 0x88E4,
        StaticRead = 0x88E5,
        StaticCopy = 0x88E6,
        DynamicDraw = 0x88E8,
        DynamicRead = 0x88E9,
        DynamicCopy = 0x88EA,
    }
    public enum QueryTarget : uint
    {
        SamplesPassed = 0x8914,
        PrimitivesGenerated = 0x8C87,
        TransformFeedbackPrimitivesWritten = 0x8C88,
        AnySamplesPassed = 0x8C2F,
        TimeElapsed = 0x88BF,
        AnySamplesPassedConservative = 0x8D6A,
        VerticesSubmitted = 0x82EE,
        PrimitivesSubmitted = 0x82EF,
        VertexShaderInvocations = 0x82F0,
        TransformFeedbackOverflow = 0x82EC,
    }
    public enum VertexArrayPName : uint
    {
        ArrayEnabled = 0x8622,
        ArraySize = 0x8623,
        ArrayStride = 0x8624,
        ArrayType = 0x8625,
        ArrayNormalized = 0x886A,
        ArrayInteger = 0x88FD,
        ArrayDivisor = 0x88FE,
        ArrayLong = 0x874E,
        RelativeOffset = 0x82D5,
    }
    public enum VertexAttribPointerPropertyARB : uint
    {
        ArrayPointer = 0x8645,
    }
    public enum PipelineParameterName : uint
    {
        FragmentShader = 0x8B30,
        VertexShader = 0x8B31,
        InfoLogLength = 0x8B84,
        GeometryShader = 0x8DD9,
        TessEvaluationShader = 0x8E87,
        TessControlShader = 0x8E88,
        ActiveProgram = 0x8259,
    }
    public enum ShaderType : uint
    {
        FragmentShader = 0x8B30,
        VertexShader = 0x8B31,
        GeometryShader = 0x8DD9,
        TessEvaluationShader = 0x8E87,
        TessControlShader = 0x8E88,
        ComputeShader = 0x91B9,
    }
    public enum ShaderParameterName : uint
    {
        ShaderType = 0x8B4F,
        DeleteStatus = 0x8B80,
        CompileStatus = 0x8B81,
        InfoLogLength = 0x8B84,
        ShaderSourceLength = 0x8B88,
    }
    public enum ProgramPropertyARB : uint
    {
        DeleteStatus = 0x8B80,
        LinkStatus = 0x8B82,
        ValidateStatus = 0x8B83,
        InfoLogLength = 0x8B84,
        AttachedShaders = 0x8B85,
        ActiveUniforms = 0x8B86,
        ActiveUniformMaxLength = 0x8B87,
        ActiveAttributes = 0x8B89,
        ActiveAttributeMaxLength = 0x8B8A,
        TransformFeedbackVaryingMaxLength = 0x8C76,
        TransformFeedbackBufferMode = 0x8C7F,
        TransformFeedbackVaryings = 0x8C83,
        ActiveUniformBlockMaxNameLength = 0x8A35,
        ActiveUniformBlocks = 0x8A36,
        GeometryVerticesOut = 0x8916,
        GeometryInputType = 0x8917,
        GeometryOutputType = 0x8918,
        ProgramBinaryLength = 0x8741,
        ActiveAtomicCounterBuffers = 0x92D9,
        ComputeWorkGroupSize = 0x8267,
    }
    public enum ClipControlOrigin : uint
    {
        LowerLeft = 0x8CA1,
        UpperLeft = 0x8CA2,
    }
    public enum ContextFlagMask : uint
    {
        ForwardCompatible = 0x1,
        Debug = 0x2,
        RobustAccess = 0x4,
        NoError = 0x8,
    }
    public enum ClampColorTargetARB : uint
    {
        ReadColor = 0x891C,
    }
    public enum TransformFeedbackPName : uint
    {
        BufferStart = 0x8C84,
        BufferSize = 0x8C85,
        BufferBinding = 0x8C8F,
        Active = 0x8E24,
        Paused = 0x8E23,
    }
    public enum TransformFeedbackBufferMode : uint
    {
        InterleavedAttribs = 0x8C8C,
        SeparateAttribs = 0x8C8D,
    }
    public enum ProgramInterface : uint
    {
        TransformFeedbackBuffer = 0x8C8E,
        Uniform = 0x92E1,
        UniformBlock = 0x92E2,
        ProgramInput = 0x92E3,
        ProgramOutput = 0x92E4,
        BufferVariable = 0x92E5,
        ShaderStorageBlock = 0x92E6,
        VertexSubroutine = 0x92E8,
        TessControlSubroutine = 0x92E9,
        TessEvaluationSubroutine = 0x92EA,
        GeometrySubroutine = 0x92EB,
        FragmentSubroutine = 0x92EC,
        ComputeSubroutine = 0x92ED,
        VertexSubroutineUniform = 0x92EE,
        TessControlSubroutineUniform = 0x92EF,
        TessEvaluationSubroutineUniform = 0x92F0,
        GeometrySubroutineUniform = 0x92F1,
        FragmentSubroutineUniform = 0x92F2,
        ComputeSubroutineUniform = 0x92F3,
        TransformFeedbackVarying = 0x92F4,
    }
    public enum ConditionalRenderMode : uint
    {
        Wait = 0x8E13,
        NoWait = 0x8E14,
        ByRegionWait = 0x8E15,
        ByRegionNoWait = 0x8E16,
        WaitInverted = 0x8E17,
        NoWaitInverted = 0x8E18,
        ByRegionWaitInverted = 0x8E19,
        ByRegionNoWaitInverted = 0x8E1A,
    }
    public enum FramebufferAttachmentParameterName : uint
    {
        ColorEncoding = 0x8210,
        ComponentType = 0x8211,
        RedSize = 0x8212,
        GreenSize = 0x8213,
        BlueSize = 0x8214,
        AlphaSize = 0x8215,
        DepthSize = 0x8216,
        StencilSize = 0x8217,
        ObjectType = 0x8CD0,
        ObjectName = 0x8CD1,
        TextureLevel = 0x8CD2,
        TextureCubeMapFace = 0x8CD3,
        TextureLayer = 0x8CD4,
        Layered = 0x8DA7,
    }
    public enum FramebufferStatus : uint
    {
        Undefined = 0x8219,
        Complete = 0x8CD5,
        IncompleteAttachment = 0x8CD6,
        IncompleteMissingAttachment = 0x8CD7,
        IncompleteDrawBuffer = 0x8CDB,
        IncompleteReadBuffer = 0x8CDC,
        Unsupported = 0x8CDD,
        IncompleteMultisample = 0x8D56,
        IncompleteLayerTargets = 0x8DA8,
    }
    public enum FramebufferAttachment : uint
    {
        DepthStencilAttachment = 0x821A,
        ColorAttachment0 = 0x8CE0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
        DepthAttachment = 0x8D00,
        StencilAttachment = 0x8D20,
    }
    public enum FramebufferTarget : uint
    {
        ReadFramebuffer = 0x8CA8,
        DrawFramebuffer = 0x8CA9,
        Framebuffer = 0x8D40,
    }
    public enum RenderbufferParameterName : uint
    {
        Samples = 0x8CAB,
        Width = 0x8D42,
        Height = 0x8D43,
        InternalFormat = 0x8D44,
        RedSize = 0x8D50,
        GreenSize = 0x8D51,
        BlueSize = 0x8D52,
        AlphaSize = 0x8D53,
        DepthSize = 0x8D54,
        StencilSize = 0x8D55,
    }
    public enum RenderbufferTarget : uint
    {
        Renderbuffer = 0x8D41,
    }
    public enum BufferStorageMask : uint
    {
        MapReadBit = 0x1,
        MapWriteBit = 0x2,
        MapPersistentBit = 0x40,
        MapCoherentBit = 0x80,
        DynamicStorageBit = 0x100,
        ClientStorageBit = 0x200,
    }
    public enum MapBufferAccessMask : uint
    {
        Read = 0x1,
        Write = 0x2,
        InvalidateRange = 0x4,
        InvalidateBuffer = 0x8,
        FlushExplicit = 0x10,
        Unsynchronized = 0x20,
        Persistent = 0x40,
        Coherent = 0x80,
    }
    public enum UniformPName : uint
    {
        Type = 0x8A37,
        Size = 0x8A38,
        NameLength = 0x8A39,
        BlockIndex = 0x8A3A,
        Offset = 0x8A3B,
        ArrayStride = 0x8A3C,
        MatrixStride = 0x8A3D,
        IsRowMajor = 0x8A3E,
        AtomicCounterBufferIndex = 0x92DA,
    }
    public enum SubroutineParameterName : uint
    {
        UniformSize = 0x8A38,
        UniformNameLength = 0x8A39,
        NumCompatibleSubroutines = 0x8E4A,
        CompatibleSubroutines = 0x8E4B,
    }
    public enum UniformBlockPName : uint
    {
        Binding = 0x8A3F,
        DataSize = 0x8A40,
        NameLength = 0x8A41,
        ActiveUniforms = 0x8A42,
        ActiveUniformIndices = 0x8A43,
        ReferencedByVertexShader = 0x8A44,
        ReferencedByGeometryShader = 0x8A45,
        ReferencedByFragmentShader = 0x8A46,
        ReferencedByTessControlShader = 0x84F0,
        ReferencedByTessEvaluationShader = 0x84F1,
        ReferencedByComputeShader = 0x90EC,
    }
    public enum ContextProfileMask : uint
    {
        CoreProfileBit = 0x1,
        CompatibilityProfileBit = 0x2,
    }
    public enum VertexProvokingMode : uint
    {
        FirstVertexConvention = 0x8E4D,
        LastVertexConvention = 0x8E4E,
    }
    public enum SyncParameterName : uint
    {
        ObjectType = 0x9112,
        SyncCondition = 0x9113,
        SyncStatus = 0x9114,
        SyncFlags = 0x9115,
    }
    public enum SyncCondition : uint
    {
        GpuCommandsComplete = 0x9117,
    }
    public enum SyncStatus : uint
    {
        AlreadySignaled = 0x911A,
        TimeoutExpired = 0x911B,
        ConditionSatisfied = 0x911C,
        WaitFailed = 0x911D,
    }
    public enum SyncObjectMask : uint
    {
        FlushCommandsBit = 0x1,
    }
    public enum GetMultisamplePNameNV : uint
    {
        SamplePosition = 0x8E50,
    }
    public enum QueryCounterTarget : uint
    {
        Timestamp = 0x8E28,
    }
    public enum ProgramStagePName : uint
    {
        Subroutines = 0x8DE5,
        SubroutineUniforms = 0x8DE6,
        SubroutineUniformLocations = 0x8E47,
        SubroutineMaxLength = 0x8E48,
        SubroutineUniformMaxLength = 0x8E49,
    }
    public enum ProgramResourceProperty : uint
    {
        NumCompatibleSubroutines = 0x8E4A,
        CompatibleSubroutines = 0x8E4B,
        Uniform = 0x92E1,
        NameLength = 0x92F9,
        Type = 0x92FA,
        ArraySize = 0x92FB,
        Offset = 0x92FC,
        BlockIndex = 0x92FD,
        ArrayStride = 0x92FE,
        MatrixStride = 0x92FF,
        IsRowMajor = 0x9300,
        AtomicCounterBufferIndex = 0x9301,
        BufferBinding = 0x9302,
        BufferDataSize = 0x9303,
        NumActiveVariables = 0x9304,
        ActiveVariables = 0x9305,
        ReferencedByVertexShader = 0x9306,
        ReferencedByTessControlShader = 0x9307,
        ReferencedByTessEvaluationShader = 0x9308,
        ReferencedByGeometryShader = 0x9309,
        ReferencedByFragmentShader = 0x930A,
        ReferencedByComputeShader = 0x930B,
        TopLevelArraySize = 0x930C,
        TopLevelArrayStride = 0x930D,
        Location = 0x930E,
        LocationIndex = 0x930F,
        IsPerPatch = 0x92E7,
        LocationComponent = 0x934A,
        TransformFeedbackBufferIndex = 0x934B,
        TransformFeedbackBufferStride = 0x934C,
    }
    public enum PatchParameterName : uint
    {
        Vertices = 0x8E72,
        DefaultInnerLevel = 0x8E73,
        DefaultOuterLevel = 0x8E74,
    }
    public enum BindTransformFeedbackTarget : uint
    {
        TransformFeedback = 0x8E22,
    }
    public enum PrecisionType : uint
    {
        LowFloat = 0x8DF0,
        MediumFloat = 0x8DF1,
        HighFloat = 0x8DF2,
        LowInt = 0x8DF3,
        MediumInt = 0x8DF4,
        HighInt = 0x8DF5,
    }
    public enum ProgramParameterPName : uint
    {
        BinaryRetrievableHint = 0x8257,
        Separable = 0x8258,
    }
    public enum UseProgramStageMask : uint
    {
        VertexShaderBit = 0x1,
        FragmentShaderBit = 0x2,
        GeometryShaderBit = 0x4,
        TessControlShaderBit = 0x8,
        TessEvaluationShaderBit = 0x10,
        AllShaderBits = 0xFFFFFFFF,
        ComputeShaderBit = 0x20,
    }
    public enum AtomicCounterBufferPName : uint
    {
        Binding = 0x92C1,
        DataSize = 0x92C4,
        ActiveAtomicCounters = 0x92C5,
        ActiveAtomicCounterIndices = 0x92C6,
        ReferencedByVertexShader = 0x92C7,
        ReferencedByTessControlShader = 0x92C8,
        ReferencedByTessEvaluationShader = 0x92C9,
        ReferencedByGeometryShader = 0x92CA,
        ReferencedByFragmentShader = 0x92CB,
        ReferencedByComputeShader = 0x90ED,
    }
    public enum MemoryBarrierMask : uint
    {
        VertexAttribArrayBarrierBit = 0x1,
        ElementArrayBarrierBit = 0x2,
        UniformBarrierBit = 0x4,
        TextureFetchBarrierBit = 0x8,
        ShaderImageAccessBarrierBit = 0x20,
        CommandBarrierBit = 0x40,
        PixelBufferBarrierBit = 0x80,
        TextureUpdateBarrierBit = 0x100,
        BufferUpdateBarrierBit = 0x200,
        FramebufferBarrierBit = 0x400,
        TransformFeedbackBarrierBit = 0x800,
        AtomicCounterBarrierBit = 0x1000,
        AllBarrierBits = 0xFFFFFFFF,
        ShaderStorageBarrierBit = 0x2000,
        ClientMappedBufferBarrierBit = 0x4000,
        QueryBufferBarrierBit = 0x8000,
    }
    public enum FramebufferParameterName : uint
    {
        Width = 0x9310,
        Height = 0x9311,
        Layers = 0x9312,
        Samples = 0x9313,
        FixedSampleLocations = 0x9314,
    }
    public enum ProgramInterfacePName : uint
    {
        ActiveResources = 0x92F5,
        MaxNameLength = 0x92F6,
        MaxNumActiveVariables = 0x92F7,
        MaxNumCompatibleSubroutines = 0x92F8,
    }
    public enum ClipControlDepth : uint
    {
        NegativeOneToOne = 0x935E,
        ZeroToOne = 0x935F,
    }
    public enum ColorTableTargetSGI : uint
    {
        ColorTable = 0x80D0,
        PostConvolutionColorTable = 0x80D1,
        PostColorMatrixColorTable = 0x80D2,
        ProxyColorTable = 0x80D3,
        ProxyPostConvolutionColorTable = 0x80D4,
        ProxyPostColorMatrixColorTable = 0x80D5,
    }
    public enum ColorTableTarget : uint
    {
        ColorTable = 0x80D0,
        PostConvolutionColorTable = 0x80D1,
        PostColorMatrixColorTable = 0x80D2,
        ProxyColorTable = 0x80D3,
        ProxyPostConvolutionColorTable = 0x80D4,
        ProxyPostColorMatrixColorTable = 0x80D5,
    }
    public enum ConvolutionTarget : uint
    {
        N1D = 0x8010,
        N2D = 0x8011,
    }
    public enum ConvolutionTargetEXT : uint
    {
        N1D = 0x8010,
        N2D = 0x8011,
    }
    public enum SeparableTarget : uint
    {
        N2D = 0x8012,
    }
    public enum SeparableTargetEXT : uint
    {
        N2D = 0x8012,
    }
    public enum HistogramTarget : uint
    {
        Histogram = 0x8024,
        ProxyHistogram = 0x8025,
    }
    public enum HistogramTargetEXT : uint
    {
        Histogram = 0x8024,
        ProxyHistogram = 0x8025,
    }
    public enum MinmaxTarget : uint
    {
        Minmax = 0x802E,
    }
    public enum MinmaxTargetEXT : uint
    {
        Minmax = 0x802E,
    }
    public enum ShaderBinaryFormat : uint
    {
        SpirV = 0x9551,
    }
}
