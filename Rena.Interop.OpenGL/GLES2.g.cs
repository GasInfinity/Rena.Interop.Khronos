// <auto-generated/> 
// CLI args: --spec GL --apis GLES2 3.2 --output Rena.Interop.OpenGL/GLES2.g.cs --class-name GLES2 --namespace Rena.Interop.OpenGL

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Buffers;
using System.Buffers.Text;
using unsafe GLenum = uint;
using unsafe GLboolean = byte;
using unsafe GLbitfield = uint;
using unsafe GLvoid = byte;
using unsafe GLbyte = sbyte;
using unsafe GLubyte = byte;
using unsafe GLshort = short;
using unsafe GLushort = ushort;
using unsafe GLint = int;
using unsafe GLuint = uint;
using unsafe GLclampx = int;
using unsafe GLsizei = int;
using unsafe GLfloat = float;
using unsafe GLclampf = float;
using unsafe GLdouble = double;
using unsafe GLclampd = double;
using unsafe GLeglClientBufferEXT = void*;
using unsafe GLeglImageOES = void*;
using unsafe GLchar = byte;
using unsafe GLcharARB = byte;
using unsafe GLhalf = ushort;
using unsafe GLhalfARB = ushort;
using unsafe GLfixed = int;
using unsafe GLintptr = nint;
using unsafe GLintptrARB = nint;
using unsafe GLsizeiptr = nint;
using unsafe GLsizeiptrARB = nint;
using unsafe GLint64 = long;
using unsafe GLint64EXT = long;
using unsafe GLuint64 = ulong;
using unsafe GLuint64EXT = ulong;
using unsafe GLsync = global::Rena.Interop.OpenGL.GLES2.__GLsync*;
using unsafe GLDEBUGPROC = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCARB = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCKHR = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCAMD = delegate* unmanaged<uint,uint,uint,int,byte*,void*,void>;
using unsafe GLhalfNV = ushort;
using unsafe GLvdpauSurfaceNV = nint;
using unsafe GLVULKANPROCNV = delegate* unmanaged<void>;

namespace Rena.Interop.OpenGL;

public static class GLES2
{
    public unsafe sealed class Commands
    {
        public readonly ushort Major;
        public readonly ushort Minor;
        public readonly bool IsEmbedded;

        public readonly bool Version20;
        public readonly bool Version30;
        public readonly bool Version31;
        public readonly bool Version32;

        public Commands(delegate* unmanaged<byte*, void*> loader)
        {
            fixed(byte* name = GetStringUtf8) GetString = (delegate* unmanaged<StringName, GLubyte*>)loader(name); 
            if(GetString == null) return;

            var version = GetString(StringName.Version);
            if(version is null) return;
            if(!TryParseVersion(MemoryMarshal.CreateReadOnlySpanFromNullTerminated(version), out Major, out Minor, out IsEmbedded)) return;

            Version20 = Major > 2 || (Major == 2 && Minor >= 0);
            Version30 = Major > 3 || (Major == 3 && Minor >= 0);
            Version31 = Major > 3 || (Major == 3 && Minor >= 1);
            Version32 = Major > 3 || (Major == 3 && Minor >= 2);

            if(IsEmbedded && Version20)
            {
                fixed(byte* name = ActiveTextureUtf8) this.ActiveTexture = (delegate* unmanaged<TextureUnit, void>)loader(name);
                fixed(byte* name = AttachShaderUtf8) this.AttachShader = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = BindAttribLocationUtf8) this.BindAttribLocation = (delegate* unmanaged<uint, uint, GLchar*, void>)loader(name);
                fixed(byte* name = BindBufferUtf8) this.BindBuffer = (delegate* unmanaged<BufferTargetARB, uint, void>)loader(name);
                fixed(byte* name = BindFramebufferUtf8) this.BindFramebuffer = (delegate* unmanaged<FramebufferTarget, uint, void>)loader(name);
                fixed(byte* name = BindRenderbufferUtf8) this.BindRenderbuffer = (delegate* unmanaged<RenderbufferTarget, uint, void>)loader(name);
                fixed(byte* name = BindTextureUtf8) this.BindTexture = (delegate* unmanaged<TextureTarget, uint, void>)loader(name);
                fixed(byte* name = BlendColorUtf8) this.BlendColor = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = BlendEquationUtf8) this.BlendEquation = (delegate* unmanaged<BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = BlendEquationSeparateUtf8) this.BlendEquationSeparate = (delegate* unmanaged<BlendEquationModeEXT, BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = BlendFuncUtf8) this.BlendFunc = (delegate* unmanaged<BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = BlendFuncSeparateUtf8) this.BlendFuncSeparate = (delegate* unmanaged<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = BufferDataUtf8) this.BufferData = (delegate* unmanaged<BufferTargetARB, GLsizeiptr, void*, BufferUsageARB, void>)loader(name);
                fixed(byte* name = BufferSubDataUtf8) this.BufferSubData = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void>)loader(name);
                fixed(byte* name = CheckFramebufferStatusUtf8) this.CheckFramebufferStatus = (delegate* unmanaged<FramebufferTarget, FramebufferStatus>)loader(name);
                fixed(byte* name = ClearUtf8) this.Clear = (delegate* unmanaged<ClearBufferMask, void>)loader(name);
                fixed(byte* name = ClearColorUtf8) this.ClearColor = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = ClearDepthfUtf8) this.ClearDepthf = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = ClearStencilUtf8) this.ClearStencil = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = ColorMaskUtf8) this.ColorMask = (delegate* unmanaged<byte, byte, byte, byte, void>)loader(name);
                fixed(byte* name = CompileShaderUtf8) this.CompileShader = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = CompressedTexImage2DUtf8) this.CompressedTexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexSubImage2DUtf8) this.CompressedTexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CopyTexImage2DUtf8) this.CopyTexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTexSubImage2DUtf8) this.CopyTexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CreateProgramUtf8) this.CreateProgram = (delegate* unmanaged<uint>)loader(name);
                fixed(byte* name = CreateShaderUtf8) this.CreateShader = (delegate* unmanaged<ShaderType, uint>)loader(name);
                fixed(byte* name = CullFaceUtf8) this.CullFace = (delegate* unmanaged<TriangleFace, void>)loader(name);
                fixed(byte* name = DeleteBuffersUtf8) this.DeleteBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteFramebuffersUtf8) this.DeleteFramebuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteProgramUtf8) this.DeleteProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteRenderbuffersUtf8) this.DeleteRenderbuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteShaderUtf8) this.DeleteShader = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteTexturesUtf8) this.DeleteTextures = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DepthFuncUtf8) this.DepthFunc = (delegate* unmanaged<DepthFunction, void>)loader(name);
                fixed(byte* name = DepthMaskUtf8) this.DepthMask = (delegate* unmanaged<byte, void>)loader(name);
                fixed(byte* name = DepthRangefUtf8) this.DepthRangef = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = DetachShaderUtf8) this.DetachShader = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = DisableUtf8) this.Disable = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = DisableVertexAttribArrayUtf8) this.DisableVertexAttribArray = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DrawArraysUtf8) this.DrawArrays = (delegate* unmanaged<PrimitiveType, int, int, void>)loader(name);
                fixed(byte* name = DrawElementsUtf8) this.DrawElements = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = EnableUtf8) this.Enable = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = EnableVertexAttribArrayUtf8) this.EnableVertexAttribArray = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = FinishUtf8) this.Finish = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = FlushUtf8) this.Flush = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = FramebufferRenderbufferUtf8) this.FramebufferRenderbuffer = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void>)loader(name);
                fixed(byte* name = FramebufferTexture2DUtf8) this.FramebufferTexture2D = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void>)loader(name);
                fixed(byte* name = FrontFaceUtf8) this.FrontFace = (delegate* unmanaged<FrontFaceDirection, void>)loader(name);
                fixed(byte* name = GenBuffersUtf8) this.GenBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenerateMipmapUtf8) this.GenerateMipmap = (delegate* unmanaged<TextureTarget, void>)loader(name);
                fixed(byte* name = GenFramebuffersUtf8) this.GenFramebuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenRenderbuffersUtf8) this.GenRenderbuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenTexturesUtf8) this.GenTextures = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GetActiveAttribUtf8) this.GetActiveAttrib = (delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void>)loader(name);
                fixed(byte* name = GetActiveUniformUtf8) this.GetActiveUniform = (delegate* unmanaged<uint, uint, int, int*, int*, UniformType*, GLchar*, void>)loader(name);
                fixed(byte* name = GetAttachedShadersUtf8) this.GetAttachedShaders = (delegate* unmanaged<uint, int, int*, uint*, void>)loader(name);
                fixed(byte* name = GetAttribLocationUtf8) this.GetAttribLocation = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = GetBooleanvUtf8) this.GetBooleanv = (delegate* unmanaged<GetPName, byte*, void>)loader(name);
                fixed(byte* name = GetBufferParameterivUtf8) this.GetBufferParameteriv = (delegate* unmanaged<BufferTargetARB, BufferPNameARB, int*, void>)loader(name);
                fixed(byte* name = GetErrorUtf8) this.GetError = (delegate* unmanaged<ErrorCode>)loader(name);
                fixed(byte* name = GetFloatvUtf8) this.GetFloatv = (delegate* unmanaged<GetPName, float*, void>)loader(name);
                fixed(byte* name = GetFramebufferAttachmentParameterivUtf8) this.GetFramebufferAttachmentParameteriv = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*, void>)loader(name);
                fixed(byte* name = GetIntegervUtf8) this.GetIntegerv = (delegate* unmanaged<GetPName, int*, void>)loader(name);
                fixed(byte* name = GetProgramivUtf8) this.GetProgramiv = (delegate* unmanaged<uint, ProgramPropertyARB, int*, void>)loader(name);
                fixed(byte* name = GetProgramInfoLogUtf8) this.GetProgramInfoLog = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetRenderbufferParameterivUtf8) this.GetRenderbufferParameteriv = (delegate* unmanaged<RenderbufferTarget, RenderbufferParameterName, int*, void>)loader(name);
                fixed(byte* name = GetShaderivUtf8) this.GetShaderiv = (delegate* unmanaged<uint, ShaderParameterName, int*, void>)loader(name);
                fixed(byte* name = GetShaderInfoLogUtf8) this.GetShaderInfoLog = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetShaderPrecisionFormatUtf8) this.GetShaderPrecisionFormat = (delegate* unmanaged<ShaderType, PrecisionType, int*, int*, void>)loader(name);
                fixed(byte* name = GetShaderSourceUtf8) this.GetShaderSource = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetStringUtf8) this.GetString = (delegate* unmanaged<StringName, GLubyte*>)loader(name);
                fixed(byte* name = GetTexParameterfvUtf8) this.GetTexParameterfv = (delegate* unmanaged<TextureTarget, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexParameterivUtf8) this.GetTexParameteriv = (delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetUniformfvUtf8) this.GetUniformfv = (delegate* unmanaged<uint, int, float*, void>)loader(name);
                fixed(byte* name = GetUniformivUtf8) this.GetUniformiv = (delegate* unmanaged<uint, int, int*, void>)loader(name);
                fixed(byte* name = GetUniformLocationUtf8) this.GetUniformLocation = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = GetVertexAttribfvUtf8) this.GetVertexAttribfv = (delegate* unmanaged<uint, VertexAttribPropertyARB, float*, void>)loader(name);
                fixed(byte* name = GetVertexAttribivUtf8) this.GetVertexAttribiv = (delegate* unmanaged<uint, VertexAttribPropertyARB, int*, void>)loader(name);
                fixed(byte* name = GetVertexAttribPointervUtf8) this.GetVertexAttribPointerv = (delegate* unmanaged<uint, VertexAttribPointerPropertyARB, void**, void>)loader(name);
                fixed(byte* name = HintUtf8) this.Hint = (delegate* unmanaged<HintTarget, HintMode, void>)loader(name);
                fixed(byte* name = IsBufferUtf8) this.IsBuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsEnabledUtf8) this.IsEnabled = (delegate* unmanaged<EnableCap, byte>)loader(name);
                fixed(byte* name = IsFramebufferUtf8) this.IsFramebuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsProgramUtf8) this.IsProgram = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsRenderbufferUtf8) this.IsRenderbuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsShaderUtf8) this.IsShader = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsTextureUtf8) this.IsTexture = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = LineWidthUtf8) this.LineWidth = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = LinkProgramUtf8) this.LinkProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = PixelStoreiUtf8) this.PixelStorei = (delegate* unmanaged<PixelStoreParameter, int, void>)loader(name);
                fixed(byte* name = PolygonOffsetUtf8) this.PolygonOffset = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = ReadPixelsUtf8) this.ReadPixels = (delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = ReleaseShaderCompilerUtf8) this.ReleaseShaderCompiler = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = RenderbufferStorageUtf8) this.RenderbufferStorage = (delegate* unmanaged<RenderbufferTarget, InternalFormat, int, int, void>)loader(name);
                fixed(byte* name = SampleCoverageUtf8) this.SampleCoverage = (delegate* unmanaged<float, byte, void>)loader(name);
                fixed(byte* name = ScissorUtf8) this.Scissor = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = ShaderBinaryUtf8) this.ShaderBinary = (delegate* unmanaged<int, uint*, ShaderBinaryFormat, void*, int, void>)loader(name);
                fixed(byte* name = ShaderSourceUtf8) this.ShaderSource = (delegate* unmanaged<uint, int, GLchar**, int*, void>)loader(name);
                fixed(byte* name = StencilFuncUtf8) this.StencilFunc = (delegate* unmanaged<StencilFunction, int, uint, void>)loader(name);
                fixed(byte* name = StencilFuncSeparateUtf8) this.StencilFuncSeparate = (delegate* unmanaged<TriangleFace, StencilFunction, int, uint, void>)loader(name);
                fixed(byte* name = StencilMaskUtf8) this.StencilMask = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = StencilMaskSeparateUtf8) this.StencilMaskSeparate = (delegate* unmanaged<TriangleFace, uint, void>)loader(name);
                fixed(byte* name = StencilOpUtf8) this.StencilOp = (delegate* unmanaged<StencilOp, StencilOp, StencilOp, void>)loader(name);
                fixed(byte* name = StencilOpSeparateUtf8) this.StencilOpSeparate = (delegate* unmanaged<TriangleFace, StencilOp, StencilOp, StencilOp, void>)loader(name);
                fixed(byte* name = TexImage2DUtf8) this.TexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TexParameterfUtf8) this.TexParameterf = (delegate* unmanaged<TextureTarget, TextureParameterName, float, void>)loader(name);
                fixed(byte* name = TexParameterfvUtf8) this.TexParameterfv = (delegate* unmanaged<TextureTarget, TextureParameterName, float*, void>)loader(name);
                fixed(byte* name = TexParameteriUtf8) this.TexParameteri = (delegate* unmanaged<TextureTarget, TextureParameterName, int, void>)loader(name);
                fixed(byte* name = TexParameterivUtf8) this.TexParameteriv = (delegate* unmanaged<TextureTarget, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = TexSubImage2DUtf8) this.TexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = Uniform1fUtf8) this.Uniform1f = (delegate* unmanaged<int, float, void>)loader(name);
                fixed(byte* name = Uniform1fvUtf8) this.Uniform1fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform1iUtf8) this.Uniform1i = (delegate* unmanaged<int, int, void>)loader(name);
                fixed(byte* name = Uniform1ivUtf8) this.Uniform1iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = Uniform2fUtf8) this.Uniform2f = (delegate* unmanaged<int, float, float, void>)loader(name);
                fixed(byte* name = Uniform2fvUtf8) this.Uniform2fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform2iUtf8) this.Uniform2i = (delegate* unmanaged<int, int, int, void>)loader(name);
                fixed(byte* name = Uniform2ivUtf8) this.Uniform2iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = Uniform3fUtf8) this.Uniform3f = (delegate* unmanaged<int, float, float, float, void>)loader(name);
                fixed(byte* name = Uniform3fvUtf8) this.Uniform3fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform3iUtf8) this.Uniform3i = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = Uniform3ivUtf8) this.Uniform3iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = Uniform4fUtf8) this.Uniform4f = (delegate* unmanaged<int, float, float, float, float, void>)loader(name);
                fixed(byte* name = Uniform4fvUtf8) this.Uniform4fv = (delegate* unmanaged<int, int, float*, void>)loader(name);
                fixed(byte* name = Uniform4iUtf8) this.Uniform4i = (delegate* unmanaged<int, int, int, int, int, void>)loader(name);
                fixed(byte* name = Uniform4ivUtf8) this.Uniform4iv = (delegate* unmanaged<int, int, int*, void>)loader(name);
                fixed(byte* name = UniformMatrix2fvUtf8) this.UniformMatrix2fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix3fvUtf8) this.UniformMatrix3fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix4fvUtf8) this.UniformMatrix4fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UseProgramUtf8) this.UseProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = ValidateProgramUtf8) this.ValidateProgram = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = VertexAttrib1fUtf8) this.VertexAttrib1f = (delegate* unmanaged<uint, float, void>)loader(name);
                fixed(byte* name = VertexAttrib1fvUtf8) this.VertexAttrib1fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib2fUtf8) this.VertexAttrib2f = (delegate* unmanaged<uint, float, float, void>)loader(name);
                fixed(byte* name = VertexAttrib2fvUtf8) this.VertexAttrib2fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib3fUtf8) this.VertexAttrib3f = (delegate* unmanaged<uint, float, float, float, void>)loader(name);
                fixed(byte* name = VertexAttrib3fvUtf8) this.VertexAttrib3fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttrib4fUtf8) this.VertexAttrib4f = (delegate* unmanaged<uint, float, float, float, float, void>)loader(name);
                fixed(byte* name = VertexAttrib4fvUtf8) this.VertexAttrib4fv = (delegate* unmanaged<uint, float*, void>)loader(name);
                fixed(byte* name = VertexAttribPointerUtf8) this.VertexAttribPointer = (delegate* unmanaged<uint, int, VertexAttribPointerType, byte, int, void*, void>)loader(name);
                fixed(byte* name = ViewportUtf8) this.Viewport = (delegate* unmanaged<int, int, int, int, void>)loader(name);
            }

            if(IsEmbedded && Version30)
            {
                fixed(byte* name = ReadBufferUtf8) this.ReadBuffer = (delegate* unmanaged<ReadBufferMode, void>)loader(name);
                fixed(byte* name = DrawRangeElementsUtf8) this.DrawRangeElements = (delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = TexImage3DUtf8) this.TexImage3D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TexSubImage3DUtf8) this.TexSubImage3D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = CopyTexSubImage3DUtf8) this.CopyTexSubImage3D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CompressedTexImage3DUtf8) this.CompressedTexImage3D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexSubImage3DUtf8) this.CompressedTexSubImage3D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = GenQueriesUtf8) this.GenQueries = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteQueriesUtf8) this.DeleteQueries = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsQueryUtf8) this.IsQuery = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BeginQueryUtf8) this.BeginQuery = (delegate* unmanaged<QueryTarget, uint, void>)loader(name);
                fixed(byte* name = EndQueryUtf8) this.EndQuery = (delegate* unmanaged<QueryTarget, void>)loader(name);
                fixed(byte* name = GetQueryivUtf8) this.GetQueryiv = (delegate* unmanaged<QueryTarget, QueryParameterName, int*, void>)loader(name);
                fixed(byte* name = GetQueryObjectuivUtf8) this.GetQueryObjectuiv = (delegate* unmanaged<uint, QueryObjectParameterName, uint*, void>)loader(name);
                fixed(byte* name = UnmapBufferUtf8) this.UnmapBuffer = (delegate* unmanaged<BufferTargetARB, byte>)loader(name);
                fixed(byte* name = GetBufferPointervUtf8) this.GetBufferPointerv = (delegate* unmanaged<BufferTargetARB, BufferPointerNameARB, void**, void>)loader(name);
                fixed(byte* name = DrawBuffersUtf8) this.DrawBuffers = (delegate* unmanaged<int, DrawBufferMode*, void>)loader(name);
                fixed(byte* name = UniformMatrix2x3fvUtf8) this.UniformMatrix2x3fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix3x2fvUtf8) this.UniformMatrix3x2fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix2x4fvUtf8) this.UniformMatrix2x4fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix4x2fvUtf8) this.UniformMatrix4x2fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix3x4fvUtf8) this.UniformMatrix3x4fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = UniformMatrix4x3fvUtf8) this.UniformMatrix4x3fv = (delegate* unmanaged<int, int, byte, float*, void>)loader(name);
                fixed(byte* name = BlitFramebufferUtf8) this.BlitFramebuffer = (delegate* unmanaged<int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void>)loader(name);
                fixed(byte* name = RenderbufferStorageMultisampleUtf8) this.RenderbufferStorageMultisample = (delegate* unmanaged<RenderbufferTarget, int, InternalFormat, int, int, void>)loader(name);
                fixed(byte* name = FramebufferTextureLayerUtf8) this.FramebufferTextureLayer = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, int, void>)loader(name);
                fixed(byte* name = MapBufferRangeUtf8) this.MapBufferRange = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, MapBufferAccessMask, void*>)loader(name);
                fixed(byte* name = FlushMappedBufferRangeUtf8) this.FlushMappedBufferRange = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = BindVertexArrayUtf8) this.BindVertexArray = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteVertexArraysUtf8) this.DeleteVertexArrays = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenVertexArraysUtf8) this.GenVertexArrays = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsVertexArrayUtf8) this.IsVertexArray = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = GetIntegeri_vUtf8) this.GetIntegeri_v = (delegate* unmanaged<GetPName, uint, int*, void>)loader(name);
                fixed(byte* name = BeginTransformFeedbackUtf8) this.BeginTransformFeedback = (delegate* unmanaged<PrimitiveType, void>)loader(name);
                fixed(byte* name = EndTransformFeedbackUtf8) this.EndTransformFeedback = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = BindBufferRangeUtf8) this.BindBufferRange = (delegate* unmanaged<BufferTargetARB, uint, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = BindBufferBaseUtf8) this.BindBufferBase = (delegate* unmanaged<BufferTargetARB, uint, uint, void>)loader(name);
                fixed(byte* name = TransformFeedbackVaryingsUtf8) this.TransformFeedbackVaryings = (delegate* unmanaged<uint, int, GLchar**, TransformFeedbackBufferMode, void>)loader(name);
                fixed(byte* name = GetTransformFeedbackVaryingUtf8) this.GetTransformFeedbackVarying = (delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void>)loader(name);
                fixed(byte* name = VertexAttribIPointerUtf8) this.VertexAttribIPointer = (delegate* unmanaged<uint, int, VertexAttribIType, int, void*, void>)loader(name);
                fixed(byte* name = GetVertexAttribIivUtf8) this.GetVertexAttribIiv = (delegate* unmanaged<uint, VertexAttribEnum, int*, void>)loader(name);
                fixed(byte* name = GetVertexAttribIuivUtf8) this.GetVertexAttribIuiv = (delegate* unmanaged<uint, VertexAttribEnum, uint*, void>)loader(name);
                fixed(byte* name = VertexAttribI4iUtf8) this.VertexAttribI4i = (delegate* unmanaged<uint, int, int, int, int, void>)loader(name);
                fixed(byte* name = VertexAttribI4uiUtf8) this.VertexAttribI4ui = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = VertexAttribI4ivUtf8) this.VertexAttribI4iv = (delegate* unmanaged<uint, int*, void>)loader(name);
                fixed(byte* name = VertexAttribI4uivUtf8) this.VertexAttribI4uiv = (delegate* unmanaged<uint, uint*, void>)loader(name);
                fixed(byte* name = GetUniformuivUtf8) this.GetUniformuiv = (delegate* unmanaged<uint, int, uint*, void>)loader(name);
                fixed(byte* name = GetFragDataLocationUtf8) this.GetFragDataLocation = (delegate* unmanaged<uint, GLchar*, int>)loader(name);
                fixed(byte* name = Uniform1uiUtf8) this.Uniform1ui = (delegate* unmanaged<int, uint, void>)loader(name);
                fixed(byte* name = Uniform2uiUtf8) this.Uniform2ui = (delegate* unmanaged<int, uint, uint, void>)loader(name);
                fixed(byte* name = Uniform3uiUtf8) this.Uniform3ui = (delegate* unmanaged<int, uint, uint, uint, void>)loader(name);
                fixed(byte* name = Uniform4uiUtf8) this.Uniform4ui = (delegate* unmanaged<int, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = Uniform1uivUtf8) this.Uniform1uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = Uniform2uivUtf8) this.Uniform2uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = Uniform3uivUtf8) this.Uniform3uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = Uniform4uivUtf8) this.Uniform4uiv = (delegate* unmanaged<int, int, uint*, void>)loader(name);
                fixed(byte* name = ClearBufferivUtf8) this.ClearBufferiv = (delegate* unmanaged<Buffer, int, int*, void>)loader(name);
                fixed(byte* name = ClearBufferuivUtf8) this.ClearBufferuiv = (delegate* unmanaged<Buffer, int, uint*, void>)loader(name);
                fixed(byte* name = ClearBufferfvUtf8) this.ClearBufferfv = (delegate* unmanaged<Buffer, int, float*, void>)loader(name);
                fixed(byte* name = ClearBufferfiUtf8) this.ClearBufferfi = (delegate* unmanaged<Buffer, int, float, int, void>)loader(name);
                fixed(byte* name = GetStringiUtf8) this.GetStringi = (delegate* unmanaged<StringName, uint, GLubyte*>)loader(name);
                fixed(byte* name = CopyBufferSubDataUtf8) this.CopyBufferSubData = (delegate* unmanaged<CopyBufferSubDataTarget, CopyBufferSubDataTarget, GLintptr, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = GetUniformIndicesUtf8) this.GetUniformIndices = (delegate* unmanaged<uint, int, GLchar**, uint*, void>)loader(name);
                fixed(byte* name = GetActiveUniformsivUtf8) this.GetActiveUniformsiv = (delegate* unmanaged<uint, int, uint*, UniformPName, int*, void>)loader(name);
                fixed(byte* name = GetUniformBlockIndexUtf8) this.GetUniformBlockIndex = (delegate* unmanaged<uint, GLchar*, uint>)loader(name);
                fixed(byte* name = GetActiveUniformBlockivUtf8) this.GetActiveUniformBlockiv = (delegate* unmanaged<uint, uint, UniformBlockPName, int*, void>)loader(name);
                fixed(byte* name = GetActiveUniformBlockNameUtf8) this.GetActiveUniformBlockName = (delegate* unmanaged<uint, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = UniformBlockBindingUtf8) this.UniformBlockBinding = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = DrawArraysInstancedUtf8) this.DrawArraysInstanced = (delegate* unmanaged<PrimitiveType, int, int, int, void>)loader(name);
                fixed(byte* name = DrawElementsInstancedUtf8) this.DrawElementsInstanced = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void>)loader(name);
                fixed(byte* name = FenceSyncUtf8) this.FenceSync = (delegate* unmanaged<SyncCondition, SyncBehaviorFlags, GLsync>)loader(name);
                fixed(byte* name = IsSyncUtf8) this.IsSync = (delegate* unmanaged<GLsync, byte>)loader(name);
                fixed(byte* name = DeleteSyncUtf8) this.DeleteSync = (delegate* unmanaged<GLsync, void>)loader(name);
                fixed(byte* name = ClientWaitSyncUtf8) this.ClientWaitSync = (delegate* unmanaged<GLsync, SyncObjectMask, GLuint64, SyncStatus>)loader(name);
                fixed(byte* name = WaitSyncUtf8) this.WaitSync = (delegate* unmanaged<GLsync, SyncBehaviorFlags, GLuint64, void>)loader(name);
                fixed(byte* name = GetInteger64vUtf8) this.GetInteger64v = (delegate* unmanaged<GetPName, GLint64*, void>)loader(name);
                fixed(byte* name = GetSyncivUtf8) this.GetSynciv = (delegate* unmanaged<GLsync, SyncParameterName, int, int*, int*, void>)loader(name);
                fixed(byte* name = GetInteger64i_vUtf8) this.GetInteger64i_v = (delegate* unmanaged<GetPName, uint, GLint64*, void>)loader(name);
                fixed(byte* name = GetBufferParameteri64vUtf8) this.GetBufferParameteri64v = (delegate* unmanaged<BufferTargetARB, BufferPNameARB, GLint64*, void>)loader(name);
                fixed(byte* name = GenSamplersUtf8) this.GenSamplers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteSamplersUtf8) this.DeleteSamplers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsSamplerUtf8) this.IsSampler = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = BindSamplerUtf8) this.BindSampler = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = SamplerParameteriUtf8) this.SamplerParameteri = (delegate* unmanaged<uint, SamplerParameterI, int, void>)loader(name);
                fixed(byte* name = SamplerParameterivUtf8) this.SamplerParameteriv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = SamplerParameterfUtf8) this.SamplerParameterf = (delegate* unmanaged<uint, SamplerParameterF, float, void>)loader(name);
                fixed(byte* name = SamplerParameterfvUtf8) this.SamplerParameterfv = (delegate* unmanaged<uint, SamplerParameterF, float*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterivUtf8) this.GetSamplerParameteriv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterfvUtf8) this.GetSamplerParameterfv = (delegate* unmanaged<uint, SamplerParameterF, float*, void>)loader(name);
                fixed(byte* name = VertexAttribDivisorUtf8) this.VertexAttribDivisor = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = BindTransformFeedbackUtf8) this.BindTransformFeedback = (delegate* unmanaged<BindTransformFeedbackTarget, uint, void>)loader(name);
                fixed(byte* name = DeleteTransformFeedbacksUtf8) this.DeleteTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenTransformFeedbacksUtf8) this.GenTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsTransformFeedbackUtf8) this.IsTransformFeedback = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = PauseTransformFeedbackUtf8) this.PauseTransformFeedback = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = ResumeTransformFeedbackUtf8) this.ResumeTransformFeedback = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = GetProgramBinaryUtf8) this.GetProgramBinary = (delegate* unmanaged<uint, int, int*, uint*, void*, void>)loader(name);
                fixed(byte* name = ProgramBinaryUtf8) this.ProgramBinary = (delegate* unmanaged<uint, uint, void*, int, void>)loader(name);
                fixed(byte* name = ProgramParameteriUtf8) this.ProgramParameteri = (delegate* unmanaged<uint, ProgramParameterPName, int, void>)loader(name);
                fixed(byte* name = InvalidateFramebufferUtf8) this.InvalidateFramebuffer = (delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, void>)loader(name);
                fixed(byte* name = InvalidateSubFramebufferUtf8) this.InvalidateSubFramebuffer = (delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int, void>)loader(name);
                fixed(byte* name = TexStorage2DUtf8) this.TexStorage2D = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, void>)loader(name);
                fixed(byte* name = TexStorage3DUtf8) this.TexStorage3D = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, void>)loader(name);
                fixed(byte* name = GetInternalformativUtf8) this.GetInternalformativ = (delegate* unmanaged<TextureTarget, InternalFormat, InternalFormatPName, int, int*, void>)loader(name);
            }

            if(IsEmbedded && Version31)
            {
                fixed(byte* name = DispatchComputeUtf8) this.DispatchCompute = (delegate* unmanaged<uint, uint, uint, void>)loader(name);
                fixed(byte* name = DispatchComputeIndirectUtf8) this.DispatchComputeIndirect = (delegate* unmanaged<GLintptr, void>)loader(name);
                fixed(byte* name = DrawArraysIndirectUtf8) this.DrawArraysIndirect = (delegate* unmanaged<PrimitiveType, void*, void>)loader(name);
                fixed(byte* name = DrawElementsIndirectUtf8) this.DrawElementsIndirect = (delegate* unmanaged<PrimitiveType, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = FramebufferParameteriUtf8) this.FramebufferParameteri = (delegate* unmanaged<FramebufferTarget, FramebufferParameterName, int, void>)loader(name);
                fixed(byte* name = GetFramebufferParameterivUtf8) this.GetFramebufferParameteriv = (delegate* unmanaged<FramebufferTarget, FramebufferAttachmentParameterName, int*, void>)loader(name);
                fixed(byte* name = GetProgramInterfaceivUtf8) this.GetProgramInterfaceiv = (delegate* unmanaged<uint, ProgramInterface, ProgramInterfacePName, int*, void>)loader(name);
                fixed(byte* name = GetProgramResourceIndexUtf8) this.GetProgramResourceIndex = (delegate* unmanaged<uint, ProgramInterface, GLchar*, uint>)loader(name);
                fixed(byte* name = GetProgramResourceNameUtf8) this.GetProgramResourceName = (delegate* unmanaged<uint, ProgramInterface, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetProgramResourceivUtf8) this.GetProgramResourceiv = (delegate* unmanaged<uint, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*, void>)loader(name);
                fixed(byte* name = GetProgramResourceLocationUtf8) this.GetProgramResourceLocation = (delegate* unmanaged<uint, ProgramInterface, GLchar*, int>)loader(name);
                fixed(byte* name = UseProgramStagesUtf8) this.UseProgramStages = (delegate* unmanaged<uint, UseProgramStageMask, uint, void>)loader(name);
                fixed(byte* name = ActiveShaderProgramUtf8) this.ActiveShaderProgram = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = CreateShaderProgramvUtf8) this.CreateShaderProgramv = (delegate* unmanaged<ShaderType, int, GLchar**, uint>)loader(name);
                fixed(byte* name = BindProgramPipelineUtf8) this.BindProgramPipeline = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = DeleteProgramPipelinesUtf8) this.DeleteProgramPipelines = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenProgramPipelinesUtf8) this.GenProgramPipelines = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = IsProgramPipelineUtf8) this.IsProgramPipeline = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = GetProgramPipelineivUtf8) this.GetProgramPipelineiv = (delegate* unmanaged<uint, PipelineParameterName, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform1iUtf8) this.ProgramUniform1i = (delegate* unmanaged<uint, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform2iUtf8) this.ProgramUniform2i = (delegate* unmanaged<uint, int, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform3iUtf8) this.ProgramUniform3i = (delegate* unmanaged<uint, int, int, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform4iUtf8) this.ProgramUniform4i = (delegate* unmanaged<uint, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = ProgramUniform1uiUtf8) this.ProgramUniform1ui = (delegate* unmanaged<uint, int, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform2uiUtf8) this.ProgramUniform2ui = (delegate* unmanaged<uint, int, uint, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform3uiUtf8) this.ProgramUniform3ui = (delegate* unmanaged<uint, int, uint, uint, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform4uiUtf8) this.ProgramUniform4ui = (delegate* unmanaged<uint, int, uint, uint, uint, uint, void>)loader(name);
                fixed(byte* name = ProgramUniform1fUtf8) this.ProgramUniform1f = (delegate* unmanaged<uint, int, float, void>)loader(name);
                fixed(byte* name = ProgramUniform2fUtf8) this.ProgramUniform2f = (delegate* unmanaged<uint, int, float, float, void>)loader(name);
                fixed(byte* name = ProgramUniform3fUtf8) this.ProgramUniform3f = (delegate* unmanaged<uint, int, float, float, float, void>)loader(name);
                fixed(byte* name = ProgramUniform4fUtf8) this.ProgramUniform4f = (delegate* unmanaged<uint, int, float, float, float, float, void>)loader(name);
                fixed(byte* name = ProgramUniform1ivUtf8) this.ProgramUniform1iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform2ivUtf8) this.ProgramUniform2iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform3ivUtf8) this.ProgramUniform3iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform4ivUtf8) this.ProgramUniform4iv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = ProgramUniform1uivUtf8) this.ProgramUniform1uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform2uivUtf8) this.ProgramUniform2uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform3uivUtf8) this.ProgramUniform3uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform4uivUtf8) this.ProgramUniform4uiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = ProgramUniform1fvUtf8) this.ProgramUniform1fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform2fvUtf8) this.ProgramUniform2fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform3fvUtf8) this.ProgramUniform3fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniform4fvUtf8) this.ProgramUniform4fv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2fvUtf8) this.ProgramUniformMatrix2fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3fvUtf8) this.ProgramUniformMatrix3fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4fvUtf8) this.ProgramUniformMatrix4fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2x3fvUtf8) this.ProgramUniformMatrix2x3fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3x2fvUtf8) this.ProgramUniformMatrix3x2fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix2x4fvUtf8) this.ProgramUniformMatrix2x4fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4x2fvUtf8) this.ProgramUniformMatrix4x2fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix3x4fvUtf8) this.ProgramUniformMatrix3x4fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ProgramUniformMatrix4x3fvUtf8) this.ProgramUniformMatrix4x3fv = (delegate* unmanaged<uint, int, int, byte, float*, void>)loader(name);
                fixed(byte* name = ValidateProgramPipelineUtf8) this.ValidateProgramPipeline = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = GetProgramPipelineInfoLogUtf8) this.GetProgramPipelineInfoLog = (delegate* unmanaged<uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = BindImageTextureUtf8) this.BindImageTexture = (delegate* unmanaged<uint, uint, int, byte, int, BufferAccessARB, InternalFormat, void>)loader(name);
                fixed(byte* name = GetBooleani_vUtf8) this.GetBooleani_v = (delegate* unmanaged<BufferTargetARB, uint, byte*, void>)loader(name);
                fixed(byte* name = MemoryBarrierUtf8) this.MemoryBarrier = (delegate* unmanaged<MemoryBarrierMask, void>)loader(name);
                fixed(byte* name = MemoryBarrierByRegionUtf8) this.MemoryBarrierByRegion = (delegate* unmanaged<MemoryBarrierMask, void>)loader(name);
                fixed(byte* name = TexStorage2DMultisampleUtf8) this.TexStorage2DMultisample = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, byte, void>)loader(name);
                fixed(byte* name = GetMultisamplefvUtf8) this.GetMultisamplefv = (delegate* unmanaged<GetMultisamplePNameNV, uint, float*, void>)loader(name);
                fixed(byte* name = SampleMaskiUtf8) this.SampleMaski = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = GetTexLevelParameterivUtf8) this.GetTexLevelParameteriv = (delegate* unmanaged<TextureTarget, int, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexLevelParameterfvUtf8) this.GetTexLevelParameterfv = (delegate* unmanaged<TextureTarget, int, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = BindVertexBufferUtf8) this.BindVertexBuffer = (delegate* unmanaged<uint, uint, GLintptr, int, void>)loader(name);
                fixed(byte* name = VertexAttribFormatUtf8) this.VertexAttribFormat = (delegate* unmanaged<uint, int, VertexAttribType, byte, uint, void>)loader(name);
                fixed(byte* name = VertexAttribIFormatUtf8) this.VertexAttribIFormat = (delegate* unmanaged<uint, int, VertexAttribIType, uint, void>)loader(name);
                fixed(byte* name = VertexAttribBindingUtf8) this.VertexAttribBinding = (delegate* unmanaged<uint, uint, void>)loader(name);
                fixed(byte* name = VertexBindingDivisorUtf8) this.VertexBindingDivisor = (delegate* unmanaged<uint, uint, void>)loader(name);
            }

            if(IsEmbedded && Version32)
            {
                fixed(byte* name = BlendBarrierUtf8) this.BlendBarrier = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = CopyImageSubDataUtf8) this.CopyImageSubData = (delegate* unmanaged<uint, CopyImageSubDataTarget, int, int, int, int, uint, CopyImageSubDataTarget, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = DebugMessageControlUtf8) this.DebugMessageControl = (delegate* unmanaged<DebugSource, DebugType, DebugSeverity, int, uint*, byte, void>)loader(name);
                fixed(byte* name = DebugMessageInsertUtf8) this.DebugMessageInsert = (delegate* unmanaged<DebugSource, DebugType, uint, DebugSeverity, int, GLchar*, void>)loader(name);
                fixed(byte* name = DebugMessageCallbackUtf8) this.DebugMessageCallback = (delegate* unmanaged<GLDEBUGPROC, void*, void>)loader(name);
                fixed(byte* name = GetDebugMessageLogUtf8) this.GetDebugMessageLog = (delegate* unmanaged<uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, GLchar*, uint>)loader(name);
                fixed(byte* name = PushDebugGroupUtf8) this.PushDebugGroup = (delegate* unmanaged<DebugSource, uint, int, GLchar*, void>)loader(name);
                fixed(byte* name = PopDebugGroupUtf8) this.PopDebugGroup = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = ObjectLabelUtf8) this.ObjectLabel = (delegate* unmanaged<ObjectIdentifier, uint, int, GLchar*, void>)loader(name);
                fixed(byte* name = GetObjectLabelUtf8) this.GetObjectLabel = (delegate* unmanaged<ObjectIdentifier, uint, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = ObjectPtrLabelUtf8) this.ObjectPtrLabel = (delegate* unmanaged<void*, int, GLchar*, void>)loader(name);
                fixed(byte* name = GetObjectPtrLabelUtf8) this.GetObjectPtrLabel = (delegate* unmanaged<void*, int, int*, GLchar*, void>)loader(name);
                fixed(byte* name = GetPointervUtf8) this.GetPointerv = (delegate* unmanaged<GetPointervPName, void**, void>)loader(name);
                fixed(byte* name = EnableiUtf8) this.Enablei = (delegate* unmanaged<EnableCap, uint, void>)loader(name);
                fixed(byte* name = DisableiUtf8) this.Disablei = (delegate* unmanaged<EnableCap, uint, void>)loader(name);
                fixed(byte* name = BlendEquationiUtf8) this.BlendEquationi = (delegate* unmanaged<uint, BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = BlendEquationSeparateiUtf8) this.BlendEquationSeparatei = (delegate* unmanaged<uint, BlendEquationModeEXT, BlendEquationModeEXT, void>)loader(name);
                fixed(byte* name = BlendFunciUtf8) this.BlendFunci = (delegate* unmanaged<uint, BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = BlendFuncSeparateiUtf8) this.BlendFuncSeparatei = (delegate* unmanaged<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = ColorMaskiUtf8) this.ColorMaski = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)loader(name);
                fixed(byte* name = IsEnablediUtf8) this.IsEnabledi = (delegate* unmanaged<EnableCap, uint, byte>)loader(name);
                fixed(byte* name = DrawElementsBaseVertexUtf8) this.DrawElementsBaseVertex = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void>)loader(name);
                fixed(byte* name = DrawRangeElementsBaseVertexUtf8) this.DrawRangeElementsBaseVertex = (delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, int, void>)loader(name);
                fixed(byte* name = DrawElementsInstancedBaseVertexUtf8) this.DrawElementsInstancedBaseVertex = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, int, void>)loader(name);
                fixed(byte* name = FramebufferTextureUtf8) this.FramebufferTexture = (delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, void>)loader(name);
                fixed(byte* name = PrimitiveBoundingBoxUtf8) this.PrimitiveBoundingBox = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)loader(name);
                fixed(byte* name = GetGraphicsResetStatusUtf8) this.GetGraphicsResetStatus = (delegate* unmanaged<GraphicsResetStatus>)loader(name);
                fixed(byte* name = ReadnPixelsUtf8) this.ReadnPixels = (delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, int, void*, void>)loader(name);
                fixed(byte* name = GetnUniformfvUtf8) this.GetnUniformfv = (delegate* unmanaged<uint, int, int, float*, void>)loader(name);
                fixed(byte* name = GetnUniformivUtf8) this.GetnUniformiv = (delegate* unmanaged<uint, int, int, int*, void>)loader(name);
                fixed(byte* name = GetnUniformuivUtf8) this.GetnUniformuiv = (delegate* unmanaged<uint, int, int, uint*, void>)loader(name);
                fixed(byte* name = MinSampleShadingUtf8) this.MinSampleShading = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = PatchParameteriUtf8) this.PatchParameteri = (delegate* unmanaged<PatchParameterName, int, void>)loader(name);
                fixed(byte* name = TexParameterIivUtf8) this.TexParameterIiv = (delegate* unmanaged<TextureTarget, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = TexParameterIuivUtf8) this.TexParameterIuiv = (delegate* unmanaged<TextureTarget, TextureParameterName, uint*, void>)loader(name);
                fixed(byte* name = GetTexParameterIivUtf8) this.GetTexParameterIiv = (delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexParameterIuivUtf8) this.GetTexParameterIuiv = (delegate* unmanaged<TextureTarget, GetTextureParameter, uint*, void>)loader(name);
                fixed(byte* name = SamplerParameterIivUtf8) this.SamplerParameterIiv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = SamplerParameterIuivUtf8) this.SamplerParameterIuiv = (delegate* unmanaged<uint, SamplerParameterI, uint*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterIivUtf8) this.GetSamplerParameterIiv = (delegate* unmanaged<uint, SamplerParameterI, int*, void>)loader(name);
                fixed(byte* name = GetSamplerParameterIuivUtf8) this.GetSamplerParameterIuiv = (delegate* unmanaged<uint, SamplerParameterI, uint*, void>)loader(name);
                fixed(byte* name = TexBufferUtf8) this.TexBuffer = (delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, void>)loader(name);
                fixed(byte* name = TexBufferRangeUtf8) this.TexBufferRange = (delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, GLintptr, GLsizeiptr, void>)loader(name);
                fixed(byte* name = TexStorage3DMultisampleUtf8) this.TexStorage3DMultisample = (delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void>)loader(name);
            }

        }

        public readonly delegate* unmanaged<TextureUnit, void> ActiveTexture;
        public readonly delegate* unmanaged<uint, uint, void> AttachShader;
        public readonly delegate* unmanaged<uint, uint, GLchar*, void> BindAttribLocation;
        public readonly delegate* unmanaged<BufferTargetARB, uint, void> BindBuffer;
        public readonly delegate* unmanaged<FramebufferTarget, uint, void> BindFramebuffer;
        public readonly delegate* unmanaged<RenderbufferTarget, uint, void> BindRenderbuffer;
        public readonly delegate* unmanaged<TextureTarget, uint, void> BindTexture;
        public readonly delegate* unmanaged<float, float, float, float, void> BlendColor;
        public readonly delegate* unmanaged<BlendEquationModeEXT, void> BlendEquation;
        public readonly delegate* unmanaged<BlendEquationModeEXT, BlendEquationModeEXT, void> BlendEquationSeparate;
        public readonly delegate* unmanaged<BlendingFactor, BlendingFactor, void> BlendFunc;
        public readonly delegate* unmanaged<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> BlendFuncSeparate;
        public readonly delegate* unmanaged<BufferTargetARB, GLsizeiptr, void*, BufferUsageARB, void> BufferData;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void> BufferSubData;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferStatus> CheckFramebufferStatus;
        public readonly delegate* unmanaged<ClearBufferMask, void> Clear;
        public readonly delegate* unmanaged<float, float, float, float, void> ClearColor;
        public readonly delegate* unmanaged<float, void> ClearDepthf;
        public readonly delegate* unmanaged<int, void> ClearStencil;
        public readonly delegate* unmanaged<byte, byte, byte, byte, void> ColorMask;
        public readonly delegate* unmanaged<uint, void> CompileShader;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void*, void> CompressedTexImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTexSubImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void> CopyTexImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, void> CopyTexSubImage2D;
        public readonly delegate* unmanaged<uint> CreateProgram;
        public readonly delegate* unmanaged<ShaderType, uint> CreateShader;
        public readonly delegate* unmanaged<TriangleFace, void> CullFace;
        public readonly delegate* unmanaged<int, uint*, void> DeleteBuffers;
        public readonly delegate* unmanaged<int, uint*, void> DeleteFramebuffers;
        public readonly delegate* unmanaged<uint, void> DeleteProgram;
        public readonly delegate* unmanaged<int, uint*, void> DeleteRenderbuffers;
        public readonly delegate* unmanaged<uint, void> DeleteShader;
        public readonly delegate* unmanaged<int, uint*, void> DeleteTextures;
        public readonly delegate* unmanaged<DepthFunction, void> DepthFunc;
        public readonly delegate* unmanaged<byte, void> DepthMask;
        public readonly delegate* unmanaged<float, float, void> DepthRangef;
        public readonly delegate* unmanaged<uint, uint, void> DetachShader;
        public readonly delegate* unmanaged<EnableCap, void> Disable;
        public readonly delegate* unmanaged<uint, void> DisableVertexAttribArray;
        public readonly delegate* unmanaged<PrimitiveType, int, int, void> DrawArrays;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, void> DrawElements;
        public readonly delegate* unmanaged<EnableCap, void> Enable;
        public readonly delegate* unmanaged<uint, void> EnableVertexAttribArray;
        public readonly delegate* unmanaged<void> Finish;
        public readonly delegate* unmanaged<void> Flush;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void> FramebufferRenderbuffer;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> FramebufferTexture2D;
        public readonly delegate* unmanaged<FrontFaceDirection, void> FrontFace;
        public readonly delegate* unmanaged<int, uint*, void> GenBuffers;
        public readonly delegate* unmanaged<TextureTarget, void> GenerateMipmap;
        public readonly delegate* unmanaged<int, uint*, void> GenFramebuffers;
        public readonly delegate* unmanaged<int, uint*, void> GenRenderbuffers;
        public readonly delegate* unmanaged<int, uint*, void> GenTextures;
        public readonly delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void> GetActiveAttrib;
        public readonly delegate* unmanaged<uint, uint, int, int*, int*, UniformType*, GLchar*, void> GetActiveUniform;
        public readonly delegate* unmanaged<uint, int, int*, uint*, void> GetAttachedShaders;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetAttribLocation;
        public readonly delegate* unmanaged<GetPName, byte*, void> GetBooleanv;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPNameARB, int*, void> GetBufferParameteriv;
        public readonly delegate* unmanaged<ErrorCode> GetError;
        public readonly delegate* unmanaged<GetPName, float*, void> GetFloatv;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*, void> GetFramebufferAttachmentParameteriv;
        public readonly delegate* unmanaged<GetPName, int*, void> GetIntegerv;
        public readonly delegate* unmanaged<uint, ProgramPropertyARB, int*, void> GetProgramiv;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetProgramInfoLog;
        public readonly delegate* unmanaged<RenderbufferTarget, RenderbufferParameterName, int*, void> GetRenderbufferParameteriv;
        public readonly delegate* unmanaged<uint, ShaderParameterName, int*, void> GetShaderiv;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetShaderInfoLog;
        public readonly delegate* unmanaged<ShaderType, PrecisionType, int*, int*, void> GetShaderPrecisionFormat;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetShaderSource;
        public readonly delegate* unmanaged<StringName, GLubyte*> GetString;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, float*, void> GetTexParameterfv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void> GetTexParameteriv;
        public readonly delegate* unmanaged<uint, int, float*, void> GetUniformfv;
        public readonly delegate* unmanaged<uint, int, int*, void> GetUniformiv;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetUniformLocation;
        public readonly delegate* unmanaged<uint, VertexAttribPropertyARB, float*, void> GetVertexAttribfv;
        public readonly delegate* unmanaged<uint, VertexAttribPropertyARB, int*, void> GetVertexAttribiv;
        public readonly delegate* unmanaged<uint, VertexAttribPointerPropertyARB, void**, void> GetVertexAttribPointerv;
        public readonly delegate* unmanaged<HintTarget, HintMode, void> Hint;
        public readonly delegate* unmanaged<uint, byte> IsBuffer;
        public readonly delegate* unmanaged<EnableCap, byte> IsEnabled;
        public readonly delegate* unmanaged<uint, byte> IsFramebuffer;
        public readonly delegate* unmanaged<uint, byte> IsProgram;
        public readonly delegate* unmanaged<uint, byte> IsRenderbuffer;
        public readonly delegate* unmanaged<uint, byte> IsShader;
        public readonly delegate* unmanaged<uint, byte> IsTexture;
        public readonly delegate* unmanaged<float, void> LineWidth;
        public readonly delegate* unmanaged<uint, void> LinkProgram;
        public readonly delegate* unmanaged<PixelStoreParameter, int, void> PixelStorei;
        public readonly delegate* unmanaged<float, float, void> PolygonOffset;
        public readonly delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, void*, void> ReadPixels;
        public readonly delegate* unmanaged<void> ReleaseShaderCompiler;
        public readonly delegate* unmanaged<RenderbufferTarget, InternalFormat, int, int, void> RenderbufferStorage;
        public readonly delegate* unmanaged<float, byte, void> SampleCoverage;
        public readonly delegate* unmanaged<int, int, int, int, void> Scissor;
        public readonly delegate* unmanaged<int, uint*, ShaderBinaryFormat, void*, int, void> ShaderBinary;
        public readonly delegate* unmanaged<uint, int, GLchar**, int*, void> ShaderSource;
        public readonly delegate* unmanaged<StencilFunction, int, uint, void> StencilFunc;
        public readonly delegate* unmanaged<TriangleFace, StencilFunction, int, uint, void> StencilFuncSeparate;
        public readonly delegate* unmanaged<uint, void> StencilMask;
        public readonly delegate* unmanaged<TriangleFace, uint, void> StencilMaskSeparate;
        public readonly delegate* unmanaged<StencilOp, StencilOp, StencilOp, void> StencilOp;
        public readonly delegate* unmanaged<TriangleFace, StencilOp, StencilOp, StencilOp, void> StencilOpSeparate;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*, void> TexImage2D;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, float, void> TexParameterf;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, float*, void> TexParameterfv;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int, void> TexParameteri;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int*, void> TexParameteriv;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*, void> TexSubImage2D;
        public readonly delegate* unmanaged<int, float, void> Uniform1f;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform1fv;
        public readonly delegate* unmanaged<int, int, void> Uniform1i;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform1iv;
        public readonly delegate* unmanaged<int, float, float, void> Uniform2f;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform2fv;
        public readonly delegate* unmanaged<int, int, int, void> Uniform2i;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform2iv;
        public readonly delegate* unmanaged<int, float, float, float, void> Uniform3f;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform3fv;
        public readonly delegate* unmanaged<int, int, int, int, void> Uniform3i;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform3iv;
        public readonly delegate* unmanaged<int, float, float, float, float, void> Uniform4f;
        public readonly delegate* unmanaged<int, int, float*, void> Uniform4fv;
        public readonly delegate* unmanaged<int, int, int, int, int, void> Uniform4i;
        public readonly delegate* unmanaged<int, int, int*, void> Uniform4iv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix2fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix3fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix4fv;
        public readonly delegate* unmanaged<uint, void> UseProgram;
        public readonly delegate* unmanaged<uint, void> ValidateProgram;
        public readonly delegate* unmanaged<uint, float, void> VertexAttrib1f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib1fv;
        public readonly delegate* unmanaged<uint, float, float, void> VertexAttrib2f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib2fv;
        public readonly delegate* unmanaged<uint, float, float, float, void> VertexAttrib3f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib3fv;
        public readonly delegate* unmanaged<uint, float, float, float, float, void> VertexAttrib4f;
        public readonly delegate* unmanaged<uint, float*, void> VertexAttrib4fv;
        public readonly delegate* unmanaged<uint, int, VertexAttribPointerType, byte, int, void*, void> VertexAttribPointer;
        public readonly delegate* unmanaged<int, int, int, int, void> Viewport;
        public readonly delegate* unmanaged<ReadBufferMode, void> ReadBuffer;
        public readonly delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, void> DrawRangeElements;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*, void> TexImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*, void> TexSubImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, int, void> CopyTexSubImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void*, void> CompressedTexImage3D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTexSubImage3D;
        public readonly delegate* unmanaged<int, uint*, void> GenQueries;
        public readonly delegate* unmanaged<int, uint*, void> DeleteQueries;
        public readonly delegate* unmanaged<uint, byte> IsQuery;
        public readonly delegate* unmanaged<QueryTarget, uint, void> BeginQuery;
        public readonly delegate* unmanaged<QueryTarget, void> EndQuery;
        public readonly delegate* unmanaged<QueryTarget, QueryParameterName, int*, void> GetQueryiv;
        public readonly delegate* unmanaged<uint, QueryObjectParameterName, uint*, void> GetQueryObjectuiv;
        public readonly delegate* unmanaged<BufferTargetARB, byte> UnmapBuffer;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPointerNameARB, void**, void> GetBufferPointerv;
        public readonly delegate* unmanaged<int, DrawBufferMode*, void> DrawBuffers;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix2x3fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix3x2fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix2x4fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix4x2fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix3x4fv;
        public readonly delegate* unmanaged<int, int, byte, float*, void> UniformMatrix4x3fv;
        public readonly delegate* unmanaged<int, int, int, int, int, int, int, int, ClearBufferMask, BlitFramebufferFilter, void> BlitFramebuffer;
        public readonly delegate* unmanaged<RenderbufferTarget, int, InternalFormat, int, int, void> RenderbufferStorageMultisample;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, int, void> FramebufferTextureLayer;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, MapBufferAccessMask, void*> MapBufferRange;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void> FlushMappedBufferRange;
        public readonly delegate* unmanaged<uint, void> BindVertexArray;
        public readonly delegate* unmanaged<int, uint*, void> DeleteVertexArrays;
        public readonly delegate* unmanaged<int, uint*, void> GenVertexArrays;
        public readonly delegate* unmanaged<uint, byte> IsVertexArray;
        public readonly delegate* unmanaged<GetPName, uint, int*, void> GetIntegeri_v;
        public readonly delegate* unmanaged<PrimitiveType, void> BeginTransformFeedback;
        public readonly delegate* unmanaged<void> EndTransformFeedback;
        public readonly delegate* unmanaged<BufferTargetARB, uint, uint, GLintptr, GLsizeiptr, void> BindBufferRange;
        public readonly delegate* unmanaged<BufferTargetARB, uint, uint, void> BindBufferBase;
        public readonly delegate* unmanaged<uint, int, GLchar**, TransformFeedbackBufferMode, void> TransformFeedbackVaryings;
        public readonly delegate* unmanaged<uint, uint, int, int*, int*, AttributeType*, GLchar*, void> GetTransformFeedbackVarying;
        public readonly delegate* unmanaged<uint, int, VertexAttribIType, int, void*, void> VertexAttribIPointer;
        public readonly delegate* unmanaged<uint, VertexAttribEnum, int*, void> GetVertexAttribIiv;
        public readonly delegate* unmanaged<uint, VertexAttribEnum, uint*, void> GetVertexAttribIuiv;
        public readonly delegate* unmanaged<uint, int, int, int, int, void> VertexAttribI4i;
        public readonly delegate* unmanaged<uint, uint, uint, uint, uint, void> VertexAttribI4ui;
        public readonly delegate* unmanaged<uint, int*, void> VertexAttribI4iv;
        public readonly delegate* unmanaged<uint, uint*, void> VertexAttribI4uiv;
        public readonly delegate* unmanaged<uint, int, uint*, void> GetUniformuiv;
        public readonly delegate* unmanaged<uint, GLchar*, int> GetFragDataLocation;
        public readonly delegate* unmanaged<int, uint, void> Uniform1ui;
        public readonly delegate* unmanaged<int, uint, uint, void> Uniform2ui;
        public readonly delegate* unmanaged<int, uint, uint, uint, void> Uniform3ui;
        public readonly delegate* unmanaged<int, uint, uint, uint, uint, void> Uniform4ui;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform1uiv;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform2uiv;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform3uiv;
        public readonly delegate* unmanaged<int, int, uint*, void> Uniform4uiv;
        public readonly delegate* unmanaged<Buffer, int, int*, void> ClearBufferiv;
        public readonly delegate* unmanaged<Buffer, int, uint*, void> ClearBufferuiv;
        public readonly delegate* unmanaged<Buffer, int, float*, void> ClearBufferfv;
        public readonly delegate* unmanaged<Buffer, int, float, int, void> ClearBufferfi;
        public readonly delegate* unmanaged<StringName, uint, GLubyte*> GetStringi;
        public readonly delegate* unmanaged<CopyBufferSubDataTarget, CopyBufferSubDataTarget, GLintptr, GLintptr, GLsizeiptr, void> CopyBufferSubData;
        public readonly delegate* unmanaged<uint, int, GLchar**, uint*, void> GetUniformIndices;
        public readonly delegate* unmanaged<uint, int, uint*, UniformPName, int*, void> GetActiveUniformsiv;
        public readonly delegate* unmanaged<uint, GLchar*, uint> GetUniformBlockIndex;
        public readonly delegate* unmanaged<uint, uint, UniformBlockPName, int*, void> GetActiveUniformBlockiv;
        public readonly delegate* unmanaged<uint, uint, int, int*, GLchar*, void> GetActiveUniformBlockName;
        public readonly delegate* unmanaged<uint, uint, uint, void> UniformBlockBinding;
        public readonly delegate* unmanaged<PrimitiveType, int, int, int, void> DrawArraysInstanced;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void> DrawElementsInstanced;
        public readonly delegate* unmanaged<SyncCondition, SyncBehaviorFlags, GLsync> FenceSync;
        public readonly delegate* unmanaged<GLsync, byte> IsSync;
        public readonly delegate* unmanaged<GLsync, void> DeleteSync;
        public readonly delegate* unmanaged<GLsync, SyncObjectMask, GLuint64, SyncStatus> ClientWaitSync;
        public readonly delegate* unmanaged<GLsync, SyncBehaviorFlags, GLuint64, void> WaitSync;
        public readonly delegate* unmanaged<GetPName, GLint64*, void> GetInteger64v;
        public readonly delegate* unmanaged<GLsync, SyncParameterName, int, int*, int*, void> GetSynciv;
        public readonly delegate* unmanaged<GetPName, uint, GLint64*, void> GetInteger64i_v;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPNameARB, GLint64*, void> GetBufferParameteri64v;
        public readonly delegate* unmanaged<int, uint*, void> GenSamplers;
        public readonly delegate* unmanaged<int, uint*, void> DeleteSamplers;
        public readonly delegate* unmanaged<uint, byte> IsSampler;
        public readonly delegate* unmanaged<uint, uint, void> BindSampler;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int, void> SamplerParameteri;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> SamplerParameteriv;
        public readonly delegate* unmanaged<uint, SamplerParameterF, float, void> SamplerParameterf;
        public readonly delegate* unmanaged<uint, SamplerParameterF, float*, void> SamplerParameterfv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> GetSamplerParameteriv;
        public readonly delegate* unmanaged<uint, SamplerParameterF, float*, void> GetSamplerParameterfv;
        public readonly delegate* unmanaged<uint, uint, void> VertexAttribDivisor;
        public readonly delegate* unmanaged<BindTransformFeedbackTarget, uint, void> BindTransformFeedback;
        public readonly delegate* unmanaged<int, uint*, void> DeleteTransformFeedbacks;
        public readonly delegate* unmanaged<int, uint*, void> GenTransformFeedbacks;
        public readonly delegate* unmanaged<uint, byte> IsTransformFeedback;
        public readonly delegate* unmanaged<void> PauseTransformFeedback;
        public readonly delegate* unmanaged<void> ResumeTransformFeedback;
        public readonly delegate* unmanaged<uint, int, int*, uint*, void*, void> GetProgramBinary;
        public readonly delegate* unmanaged<uint, uint, void*, int, void> ProgramBinary;
        public readonly delegate* unmanaged<uint, ProgramParameterPName, int, void> ProgramParameteri;
        public readonly delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, void> InvalidateFramebuffer;
        public readonly delegate* unmanaged<FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int, void> InvalidateSubFramebuffer;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, void> TexStorage2D;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, void> TexStorage3D;
        public readonly delegate* unmanaged<TextureTarget, InternalFormat, InternalFormatPName, int, int*, void> GetInternalformativ;
        public readonly delegate* unmanaged<uint, uint, uint, void> DispatchCompute;
        public readonly delegate* unmanaged<GLintptr, void> DispatchComputeIndirect;
        public readonly delegate* unmanaged<PrimitiveType, void*, void> DrawArraysIndirect;
        public readonly delegate* unmanaged<PrimitiveType, DrawElementsType, void*, void> DrawElementsIndirect;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferParameterName, int, void> FramebufferParameteri;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachmentParameterName, int*, void> GetFramebufferParameteriv;
        public readonly delegate* unmanaged<uint, ProgramInterface, ProgramInterfacePName, int*, void> GetProgramInterfaceiv;
        public readonly delegate* unmanaged<uint, ProgramInterface, GLchar*, uint> GetProgramResourceIndex;
        public readonly delegate* unmanaged<uint, ProgramInterface, uint, int, int*, GLchar*, void> GetProgramResourceName;
        public readonly delegate* unmanaged<uint, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*, void> GetProgramResourceiv;
        public readonly delegate* unmanaged<uint, ProgramInterface, GLchar*, int> GetProgramResourceLocation;
        public readonly delegate* unmanaged<uint, UseProgramStageMask, uint, void> UseProgramStages;
        public readonly delegate* unmanaged<uint, uint, void> ActiveShaderProgram;
        public readonly delegate* unmanaged<ShaderType, int, GLchar**, uint> CreateShaderProgramv;
        public readonly delegate* unmanaged<uint, void> BindProgramPipeline;
        public readonly delegate* unmanaged<int, uint*, void> DeleteProgramPipelines;
        public readonly delegate* unmanaged<int, uint*, void> GenProgramPipelines;
        public readonly delegate* unmanaged<uint, byte> IsProgramPipeline;
        public readonly delegate* unmanaged<uint, PipelineParameterName, int*, void> GetProgramPipelineiv;
        public readonly delegate* unmanaged<uint, int, int, void> ProgramUniform1i;
        public readonly delegate* unmanaged<uint, int, int, int, void> ProgramUniform2i;
        public readonly delegate* unmanaged<uint, int, int, int, int, void> ProgramUniform3i;
        public readonly delegate* unmanaged<uint, int, int, int, int, int, void> ProgramUniform4i;
        public readonly delegate* unmanaged<uint, int, uint, void> ProgramUniform1ui;
        public readonly delegate* unmanaged<uint, int, uint, uint, void> ProgramUniform2ui;
        public readonly delegate* unmanaged<uint, int, uint, uint, uint, void> ProgramUniform3ui;
        public readonly delegate* unmanaged<uint, int, uint, uint, uint, uint, void> ProgramUniform4ui;
        public readonly delegate* unmanaged<uint, int, float, void> ProgramUniform1f;
        public readonly delegate* unmanaged<uint, int, float, float, void> ProgramUniform2f;
        public readonly delegate* unmanaged<uint, int, float, float, float, void> ProgramUniform3f;
        public readonly delegate* unmanaged<uint, int, float, float, float, float, void> ProgramUniform4f;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform1iv;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform2iv;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform3iv;
        public readonly delegate* unmanaged<uint, int, int, int*, void> ProgramUniform4iv;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform1uiv;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform2uiv;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform3uiv;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> ProgramUniform4uiv;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform1fv;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform2fv;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform3fv;
        public readonly delegate* unmanaged<uint, int, int, float*, void> ProgramUniform4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix2fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix3fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix2x3fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix3x2fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix2x4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix4x2fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix3x4fv;
        public readonly delegate* unmanaged<uint, int, int, byte, float*, void> ProgramUniformMatrix4x3fv;
        public readonly delegate* unmanaged<uint, void> ValidateProgramPipeline;
        public readonly delegate* unmanaged<uint, int, int*, GLchar*, void> GetProgramPipelineInfoLog;
        public readonly delegate* unmanaged<uint, uint, int, byte, int, BufferAccessARB, InternalFormat, void> BindImageTexture;
        public readonly delegate* unmanaged<BufferTargetARB, uint, byte*, void> GetBooleani_v;
        public readonly delegate* unmanaged<MemoryBarrierMask, void> MemoryBarrier;
        public readonly delegate* unmanaged<MemoryBarrierMask, void> MemoryBarrierByRegion;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, byte, void> TexStorage2DMultisample;
        public readonly delegate* unmanaged<GetMultisamplePNameNV, uint, float*, void> GetMultisamplefv;
        public readonly delegate* unmanaged<uint, uint, void> SampleMaski;
        public readonly delegate* unmanaged<TextureTarget, int, GetTextureParameter, int*, void> GetTexLevelParameteriv;
        public readonly delegate* unmanaged<TextureTarget, int, GetTextureParameter, float*, void> GetTexLevelParameterfv;
        public readonly delegate* unmanaged<uint, uint, GLintptr, int, void> BindVertexBuffer;
        public readonly delegate* unmanaged<uint, int, VertexAttribType, byte, uint, void> VertexAttribFormat;
        public readonly delegate* unmanaged<uint, int, VertexAttribIType, uint, void> VertexAttribIFormat;
        public readonly delegate* unmanaged<uint, uint, void> VertexAttribBinding;
        public readonly delegate* unmanaged<uint, uint, void> VertexBindingDivisor;
        public readonly delegate* unmanaged<void> BlendBarrier;
        public readonly delegate* unmanaged<uint, CopyImageSubDataTarget, int, int, int, int, uint, CopyImageSubDataTarget, int, int, int, int, int, int, int, void> CopyImageSubData;
        public readonly delegate* unmanaged<DebugSource, DebugType, DebugSeverity, int, uint*, byte, void> DebugMessageControl;
        public readonly delegate* unmanaged<DebugSource, DebugType, uint, DebugSeverity, int, GLchar*, void> DebugMessageInsert;
        public readonly delegate* unmanaged<GLDEBUGPROC, void*, void> DebugMessageCallback;
        public readonly delegate* unmanaged<uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, GLchar*, uint> GetDebugMessageLog;
        public readonly delegate* unmanaged<DebugSource, uint, int, GLchar*, void> PushDebugGroup;
        public readonly delegate* unmanaged<void> PopDebugGroup;
        public readonly delegate* unmanaged<ObjectIdentifier, uint, int, GLchar*, void> ObjectLabel;
        public readonly delegate* unmanaged<ObjectIdentifier, uint, int, int*, GLchar*, void> GetObjectLabel;
        public readonly delegate* unmanaged<void*, int, GLchar*, void> ObjectPtrLabel;
        public readonly delegate* unmanaged<void*, int, int*, GLchar*, void> GetObjectPtrLabel;
        public readonly delegate* unmanaged<GetPointervPName, void**, void> GetPointerv;
        public readonly delegate* unmanaged<EnableCap, uint, void> Enablei;
        public readonly delegate* unmanaged<EnableCap, uint, void> Disablei;
        public readonly delegate* unmanaged<uint, BlendEquationModeEXT, void> BlendEquationi;
        public readonly delegate* unmanaged<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> BlendEquationSeparatei;
        public readonly delegate* unmanaged<uint, BlendingFactor, BlendingFactor, void> BlendFunci;
        public readonly delegate* unmanaged<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> BlendFuncSeparatei;
        public readonly delegate* unmanaged<uint, byte, byte, byte, byte, void> ColorMaski;
        public readonly delegate* unmanaged<EnableCap, uint, byte> IsEnabledi;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, void> DrawElementsBaseVertex;
        public readonly delegate* unmanaged<PrimitiveType, uint, uint, int, DrawElementsType, void*, int, void> DrawRangeElementsBaseVertex;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, int, int, void> DrawElementsInstancedBaseVertex;
        public readonly delegate* unmanaged<FramebufferTarget, FramebufferAttachment, uint, int, void> FramebufferTexture;
        public readonly delegate* unmanaged<float, float, float, float, float, float, float, float, void> PrimitiveBoundingBox;
        public readonly delegate* unmanaged<GraphicsResetStatus> GetGraphicsResetStatus;
        public readonly delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, int, void*, void> ReadnPixels;
        public readonly delegate* unmanaged<uint, int, int, float*, void> GetnUniformfv;
        public readonly delegate* unmanaged<uint, int, int, int*, void> GetnUniformiv;
        public readonly delegate* unmanaged<uint, int, int, uint*, void> GetnUniformuiv;
        public readonly delegate* unmanaged<float, void> MinSampleShading;
        public readonly delegate* unmanaged<PatchParameterName, int, void> PatchParameteri;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int*, void> TexParameterIiv;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, uint*, void> TexParameterIuiv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void> GetTexParameterIiv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, uint*, void> GetTexParameterIuiv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> SamplerParameterIiv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, uint*, void> SamplerParameterIuiv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, int*, void> GetSamplerParameterIiv;
        public readonly delegate* unmanaged<uint, SamplerParameterI, uint*, void> GetSamplerParameterIuiv;
        public readonly delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, void> TexBuffer;
        public readonly delegate* unmanaged<TextureTarget, SizedInternalFormat, uint, GLintptr, GLsizeiptr, void> TexBufferRange;
        public readonly delegate* unmanaged<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void> TexStorage3DMultisample;

        public static ReadOnlySpan<byte> ActiveTextureUtf8 => "glActiveTexture"u8;
        public static ReadOnlySpan<byte> AttachShaderUtf8 => "glAttachShader"u8;
        public static ReadOnlySpan<byte> BindAttribLocationUtf8 => "glBindAttribLocation"u8;
        public static ReadOnlySpan<byte> BindBufferUtf8 => "glBindBuffer"u8;
        public static ReadOnlySpan<byte> BindFramebufferUtf8 => "glBindFramebuffer"u8;
        public static ReadOnlySpan<byte> BindRenderbufferUtf8 => "glBindRenderbuffer"u8;
        public static ReadOnlySpan<byte> BindTextureUtf8 => "glBindTexture"u8;
        public static ReadOnlySpan<byte> BlendColorUtf8 => "glBlendColor"u8;
        public static ReadOnlySpan<byte> BlendEquationUtf8 => "glBlendEquation"u8;
        public static ReadOnlySpan<byte> BlendEquationSeparateUtf8 => "glBlendEquationSeparate"u8;
        public static ReadOnlySpan<byte> BlendFuncUtf8 => "glBlendFunc"u8;
        public static ReadOnlySpan<byte> BlendFuncSeparateUtf8 => "glBlendFuncSeparate"u8;
        public static ReadOnlySpan<byte> BufferDataUtf8 => "glBufferData"u8;
        public static ReadOnlySpan<byte> BufferSubDataUtf8 => "glBufferSubData"u8;
        public static ReadOnlySpan<byte> CheckFramebufferStatusUtf8 => "glCheckFramebufferStatus"u8;
        public static ReadOnlySpan<byte> ClearUtf8 => "glClear"u8;
        public static ReadOnlySpan<byte> ClearColorUtf8 => "glClearColor"u8;
        public static ReadOnlySpan<byte> ClearDepthfUtf8 => "glClearDepthf"u8;
        public static ReadOnlySpan<byte> ClearStencilUtf8 => "glClearStencil"u8;
        public static ReadOnlySpan<byte> ColorMaskUtf8 => "glColorMask"u8;
        public static ReadOnlySpan<byte> CompileShaderUtf8 => "glCompileShader"u8;
        public static ReadOnlySpan<byte> CompressedTexImage2DUtf8 => "glCompressedTexImage2D"u8;
        public static ReadOnlySpan<byte> CompressedTexSubImage2DUtf8 => "glCompressedTexSubImage2D"u8;
        public static ReadOnlySpan<byte> CopyTexImage2DUtf8 => "glCopyTexImage2D"u8;
        public static ReadOnlySpan<byte> CopyTexSubImage2DUtf8 => "glCopyTexSubImage2D"u8;
        public static ReadOnlySpan<byte> CreateProgramUtf8 => "glCreateProgram"u8;
        public static ReadOnlySpan<byte> CreateShaderUtf8 => "glCreateShader"u8;
        public static ReadOnlySpan<byte> CullFaceUtf8 => "glCullFace"u8;
        public static ReadOnlySpan<byte> DeleteBuffersUtf8 => "glDeleteBuffers"u8;
        public static ReadOnlySpan<byte> DeleteFramebuffersUtf8 => "glDeleteFramebuffers"u8;
        public static ReadOnlySpan<byte> DeleteProgramUtf8 => "glDeleteProgram"u8;
        public static ReadOnlySpan<byte> DeleteRenderbuffersUtf8 => "glDeleteRenderbuffers"u8;
        public static ReadOnlySpan<byte> DeleteShaderUtf8 => "glDeleteShader"u8;
        public static ReadOnlySpan<byte> DeleteTexturesUtf8 => "glDeleteTextures"u8;
        public static ReadOnlySpan<byte> DepthFuncUtf8 => "glDepthFunc"u8;
        public static ReadOnlySpan<byte> DepthMaskUtf8 => "glDepthMask"u8;
        public static ReadOnlySpan<byte> DepthRangefUtf8 => "glDepthRangef"u8;
        public static ReadOnlySpan<byte> DetachShaderUtf8 => "glDetachShader"u8;
        public static ReadOnlySpan<byte> DisableUtf8 => "glDisable"u8;
        public static ReadOnlySpan<byte> DisableVertexAttribArrayUtf8 => "glDisableVertexAttribArray"u8;
        public static ReadOnlySpan<byte> DrawArraysUtf8 => "glDrawArrays"u8;
        public static ReadOnlySpan<byte> DrawElementsUtf8 => "glDrawElements"u8;
        public static ReadOnlySpan<byte> EnableUtf8 => "glEnable"u8;
        public static ReadOnlySpan<byte> EnableVertexAttribArrayUtf8 => "glEnableVertexAttribArray"u8;
        public static ReadOnlySpan<byte> FinishUtf8 => "glFinish"u8;
        public static ReadOnlySpan<byte> FlushUtf8 => "glFlush"u8;
        public static ReadOnlySpan<byte> FramebufferRenderbufferUtf8 => "glFramebufferRenderbuffer"u8;
        public static ReadOnlySpan<byte> FramebufferTexture2DUtf8 => "glFramebufferTexture2D"u8;
        public static ReadOnlySpan<byte> FrontFaceUtf8 => "glFrontFace"u8;
        public static ReadOnlySpan<byte> GenBuffersUtf8 => "glGenBuffers"u8;
        public static ReadOnlySpan<byte> GenerateMipmapUtf8 => "glGenerateMipmap"u8;
        public static ReadOnlySpan<byte> GenFramebuffersUtf8 => "glGenFramebuffers"u8;
        public static ReadOnlySpan<byte> GenRenderbuffersUtf8 => "glGenRenderbuffers"u8;
        public static ReadOnlySpan<byte> GenTexturesUtf8 => "glGenTextures"u8;
        public static ReadOnlySpan<byte> GetActiveAttribUtf8 => "glGetActiveAttrib"u8;
        public static ReadOnlySpan<byte> GetActiveUniformUtf8 => "glGetActiveUniform"u8;
        public static ReadOnlySpan<byte> GetAttachedShadersUtf8 => "glGetAttachedShaders"u8;
        public static ReadOnlySpan<byte> GetAttribLocationUtf8 => "glGetAttribLocation"u8;
        public static ReadOnlySpan<byte> GetBooleanvUtf8 => "glGetBooleanv"u8;
        public static ReadOnlySpan<byte> GetBufferParameterivUtf8 => "glGetBufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetErrorUtf8 => "glGetError"u8;
        public static ReadOnlySpan<byte> GetFloatvUtf8 => "glGetFloatv"u8;
        public static ReadOnlySpan<byte> GetFramebufferAttachmentParameterivUtf8 => "glGetFramebufferAttachmentParameteriv"u8;
        public static ReadOnlySpan<byte> GetIntegervUtf8 => "glGetIntegerv"u8;
        public static ReadOnlySpan<byte> GetProgramivUtf8 => "glGetProgramiv"u8;
        public static ReadOnlySpan<byte> GetProgramInfoLogUtf8 => "glGetProgramInfoLog"u8;
        public static ReadOnlySpan<byte> GetRenderbufferParameterivUtf8 => "glGetRenderbufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetShaderivUtf8 => "glGetShaderiv"u8;
        public static ReadOnlySpan<byte> GetShaderInfoLogUtf8 => "glGetShaderInfoLog"u8;
        public static ReadOnlySpan<byte> GetShaderPrecisionFormatUtf8 => "glGetShaderPrecisionFormat"u8;
        public static ReadOnlySpan<byte> GetShaderSourceUtf8 => "glGetShaderSource"u8;
        public static ReadOnlySpan<byte> GetStringUtf8 => "glGetString"u8;
        public static ReadOnlySpan<byte> GetTexParameterfvUtf8 => "glGetTexParameterfv"u8;
        public static ReadOnlySpan<byte> GetTexParameterivUtf8 => "glGetTexParameteriv"u8;
        public static ReadOnlySpan<byte> GetUniformfvUtf8 => "glGetUniformfv"u8;
        public static ReadOnlySpan<byte> GetUniformivUtf8 => "glGetUniformiv"u8;
        public static ReadOnlySpan<byte> GetUniformLocationUtf8 => "glGetUniformLocation"u8;
        public static ReadOnlySpan<byte> GetVertexAttribfvUtf8 => "glGetVertexAttribfv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribivUtf8 => "glGetVertexAttribiv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribPointervUtf8 => "glGetVertexAttribPointerv"u8;
        public static ReadOnlySpan<byte> HintUtf8 => "glHint"u8;
        public static ReadOnlySpan<byte> IsBufferUtf8 => "glIsBuffer"u8;
        public static ReadOnlySpan<byte> IsEnabledUtf8 => "glIsEnabled"u8;
        public static ReadOnlySpan<byte> IsFramebufferUtf8 => "glIsFramebuffer"u8;
        public static ReadOnlySpan<byte> IsProgramUtf8 => "glIsProgram"u8;
        public static ReadOnlySpan<byte> IsRenderbufferUtf8 => "glIsRenderbuffer"u8;
        public static ReadOnlySpan<byte> IsShaderUtf8 => "glIsShader"u8;
        public static ReadOnlySpan<byte> IsTextureUtf8 => "glIsTexture"u8;
        public static ReadOnlySpan<byte> LineWidthUtf8 => "glLineWidth"u8;
        public static ReadOnlySpan<byte> LinkProgramUtf8 => "glLinkProgram"u8;
        public static ReadOnlySpan<byte> PixelStoreiUtf8 => "glPixelStorei"u8;
        public static ReadOnlySpan<byte> PolygonOffsetUtf8 => "glPolygonOffset"u8;
        public static ReadOnlySpan<byte> ReadPixelsUtf8 => "glReadPixels"u8;
        public static ReadOnlySpan<byte> ReleaseShaderCompilerUtf8 => "glReleaseShaderCompiler"u8;
        public static ReadOnlySpan<byte> RenderbufferStorageUtf8 => "glRenderbufferStorage"u8;
        public static ReadOnlySpan<byte> SampleCoverageUtf8 => "glSampleCoverage"u8;
        public static ReadOnlySpan<byte> ScissorUtf8 => "glScissor"u8;
        public static ReadOnlySpan<byte> ShaderBinaryUtf8 => "glShaderBinary"u8;
        public static ReadOnlySpan<byte> ShaderSourceUtf8 => "glShaderSource"u8;
        public static ReadOnlySpan<byte> StencilFuncUtf8 => "glStencilFunc"u8;
        public static ReadOnlySpan<byte> StencilFuncSeparateUtf8 => "glStencilFuncSeparate"u8;
        public static ReadOnlySpan<byte> StencilMaskUtf8 => "glStencilMask"u8;
        public static ReadOnlySpan<byte> StencilMaskSeparateUtf8 => "glStencilMaskSeparate"u8;
        public static ReadOnlySpan<byte> StencilOpUtf8 => "glStencilOp"u8;
        public static ReadOnlySpan<byte> StencilOpSeparateUtf8 => "glStencilOpSeparate"u8;
        public static ReadOnlySpan<byte> TexImage2DUtf8 => "glTexImage2D"u8;
        public static ReadOnlySpan<byte> TexParameterfUtf8 => "glTexParameterf"u8;
        public static ReadOnlySpan<byte> TexParameterfvUtf8 => "glTexParameterfv"u8;
        public static ReadOnlySpan<byte> TexParameteriUtf8 => "glTexParameteri"u8;
        public static ReadOnlySpan<byte> TexParameterivUtf8 => "glTexParameteriv"u8;
        public static ReadOnlySpan<byte> TexSubImage2DUtf8 => "glTexSubImage2D"u8;
        public static ReadOnlySpan<byte> Uniform1fUtf8 => "glUniform1f"u8;
        public static ReadOnlySpan<byte> Uniform1fvUtf8 => "glUniform1fv"u8;
        public static ReadOnlySpan<byte> Uniform1iUtf8 => "glUniform1i"u8;
        public static ReadOnlySpan<byte> Uniform1ivUtf8 => "glUniform1iv"u8;
        public static ReadOnlySpan<byte> Uniform2fUtf8 => "glUniform2f"u8;
        public static ReadOnlySpan<byte> Uniform2fvUtf8 => "glUniform2fv"u8;
        public static ReadOnlySpan<byte> Uniform2iUtf8 => "glUniform2i"u8;
        public static ReadOnlySpan<byte> Uniform2ivUtf8 => "glUniform2iv"u8;
        public static ReadOnlySpan<byte> Uniform3fUtf8 => "glUniform3f"u8;
        public static ReadOnlySpan<byte> Uniform3fvUtf8 => "glUniform3fv"u8;
        public static ReadOnlySpan<byte> Uniform3iUtf8 => "glUniform3i"u8;
        public static ReadOnlySpan<byte> Uniform3ivUtf8 => "glUniform3iv"u8;
        public static ReadOnlySpan<byte> Uniform4fUtf8 => "glUniform4f"u8;
        public static ReadOnlySpan<byte> Uniform4fvUtf8 => "glUniform4fv"u8;
        public static ReadOnlySpan<byte> Uniform4iUtf8 => "glUniform4i"u8;
        public static ReadOnlySpan<byte> Uniform4ivUtf8 => "glUniform4iv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2fvUtf8 => "glUniformMatrix2fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3fvUtf8 => "glUniformMatrix3fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4fvUtf8 => "glUniformMatrix4fv"u8;
        public static ReadOnlySpan<byte> UseProgramUtf8 => "glUseProgram"u8;
        public static ReadOnlySpan<byte> ValidateProgramUtf8 => "glValidateProgram"u8;
        public static ReadOnlySpan<byte> VertexAttrib1fUtf8 => "glVertexAttrib1f"u8;
        public static ReadOnlySpan<byte> VertexAttrib1fvUtf8 => "glVertexAttrib1fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib2fUtf8 => "glVertexAttrib2f"u8;
        public static ReadOnlySpan<byte> VertexAttrib2fvUtf8 => "glVertexAttrib2fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib3fUtf8 => "glVertexAttrib3f"u8;
        public static ReadOnlySpan<byte> VertexAttrib3fvUtf8 => "glVertexAttrib3fv"u8;
        public static ReadOnlySpan<byte> VertexAttrib4fUtf8 => "glVertexAttrib4f"u8;
        public static ReadOnlySpan<byte> VertexAttrib4fvUtf8 => "glVertexAttrib4fv"u8;
        public static ReadOnlySpan<byte> VertexAttribPointerUtf8 => "glVertexAttribPointer"u8;
        public static ReadOnlySpan<byte> ViewportUtf8 => "glViewport"u8;
        public static ReadOnlySpan<byte> ReadBufferUtf8 => "glReadBuffer"u8;
        public static ReadOnlySpan<byte> DrawRangeElementsUtf8 => "glDrawRangeElements"u8;
        public static ReadOnlySpan<byte> TexImage3DUtf8 => "glTexImage3D"u8;
        public static ReadOnlySpan<byte> TexSubImage3DUtf8 => "glTexSubImage3D"u8;
        public static ReadOnlySpan<byte> CopyTexSubImage3DUtf8 => "glCopyTexSubImage3D"u8;
        public static ReadOnlySpan<byte> CompressedTexImage3DUtf8 => "glCompressedTexImage3D"u8;
        public static ReadOnlySpan<byte> CompressedTexSubImage3DUtf8 => "glCompressedTexSubImage3D"u8;
        public static ReadOnlySpan<byte> GenQueriesUtf8 => "glGenQueries"u8;
        public static ReadOnlySpan<byte> DeleteQueriesUtf8 => "glDeleteQueries"u8;
        public static ReadOnlySpan<byte> IsQueryUtf8 => "glIsQuery"u8;
        public static ReadOnlySpan<byte> BeginQueryUtf8 => "glBeginQuery"u8;
        public static ReadOnlySpan<byte> EndQueryUtf8 => "glEndQuery"u8;
        public static ReadOnlySpan<byte> GetQueryivUtf8 => "glGetQueryiv"u8;
        public static ReadOnlySpan<byte> GetQueryObjectuivUtf8 => "glGetQueryObjectuiv"u8;
        public static ReadOnlySpan<byte> UnmapBufferUtf8 => "glUnmapBuffer"u8;
        public static ReadOnlySpan<byte> GetBufferPointervUtf8 => "glGetBufferPointerv"u8;
        public static ReadOnlySpan<byte> DrawBuffersUtf8 => "glDrawBuffers"u8;
        public static ReadOnlySpan<byte> UniformMatrix2x3fvUtf8 => "glUniformMatrix2x3fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3x2fvUtf8 => "glUniformMatrix3x2fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix2x4fvUtf8 => "glUniformMatrix2x4fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4x2fvUtf8 => "glUniformMatrix4x2fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix3x4fvUtf8 => "glUniformMatrix3x4fv"u8;
        public static ReadOnlySpan<byte> UniformMatrix4x3fvUtf8 => "glUniformMatrix4x3fv"u8;
        public static ReadOnlySpan<byte> BlitFramebufferUtf8 => "glBlitFramebuffer"u8;
        public static ReadOnlySpan<byte> RenderbufferStorageMultisampleUtf8 => "glRenderbufferStorageMultisample"u8;
        public static ReadOnlySpan<byte> FramebufferTextureLayerUtf8 => "glFramebufferTextureLayer"u8;
        public static ReadOnlySpan<byte> MapBufferRangeUtf8 => "glMapBufferRange"u8;
        public static ReadOnlySpan<byte> FlushMappedBufferRangeUtf8 => "glFlushMappedBufferRange"u8;
        public static ReadOnlySpan<byte> BindVertexArrayUtf8 => "glBindVertexArray"u8;
        public static ReadOnlySpan<byte> DeleteVertexArraysUtf8 => "glDeleteVertexArrays"u8;
        public static ReadOnlySpan<byte> GenVertexArraysUtf8 => "glGenVertexArrays"u8;
        public static ReadOnlySpan<byte> IsVertexArrayUtf8 => "glIsVertexArray"u8;
        public static ReadOnlySpan<byte> GetIntegeri_vUtf8 => "glGetIntegeri_v"u8;
        public static ReadOnlySpan<byte> BeginTransformFeedbackUtf8 => "glBeginTransformFeedback"u8;
        public static ReadOnlySpan<byte> EndTransformFeedbackUtf8 => "glEndTransformFeedback"u8;
        public static ReadOnlySpan<byte> BindBufferRangeUtf8 => "glBindBufferRange"u8;
        public static ReadOnlySpan<byte> BindBufferBaseUtf8 => "glBindBufferBase"u8;
        public static ReadOnlySpan<byte> TransformFeedbackVaryingsUtf8 => "glTransformFeedbackVaryings"u8;
        public static ReadOnlySpan<byte> GetTransformFeedbackVaryingUtf8 => "glGetTransformFeedbackVarying"u8;
        public static ReadOnlySpan<byte> VertexAttribIPointerUtf8 => "glVertexAttribIPointer"u8;
        public static ReadOnlySpan<byte> GetVertexAttribIivUtf8 => "glGetVertexAttribIiv"u8;
        public static ReadOnlySpan<byte> GetVertexAttribIuivUtf8 => "glGetVertexAttribIuiv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4iUtf8 => "glVertexAttribI4i"u8;
        public static ReadOnlySpan<byte> VertexAttribI4uiUtf8 => "glVertexAttribI4ui"u8;
        public static ReadOnlySpan<byte> VertexAttribI4ivUtf8 => "glVertexAttribI4iv"u8;
        public static ReadOnlySpan<byte> VertexAttribI4uivUtf8 => "glVertexAttribI4uiv"u8;
        public static ReadOnlySpan<byte> GetUniformuivUtf8 => "glGetUniformuiv"u8;
        public static ReadOnlySpan<byte> GetFragDataLocationUtf8 => "glGetFragDataLocation"u8;
        public static ReadOnlySpan<byte> Uniform1uiUtf8 => "glUniform1ui"u8;
        public static ReadOnlySpan<byte> Uniform2uiUtf8 => "glUniform2ui"u8;
        public static ReadOnlySpan<byte> Uniform3uiUtf8 => "glUniform3ui"u8;
        public static ReadOnlySpan<byte> Uniform4uiUtf8 => "glUniform4ui"u8;
        public static ReadOnlySpan<byte> Uniform1uivUtf8 => "glUniform1uiv"u8;
        public static ReadOnlySpan<byte> Uniform2uivUtf8 => "glUniform2uiv"u8;
        public static ReadOnlySpan<byte> Uniform3uivUtf8 => "glUniform3uiv"u8;
        public static ReadOnlySpan<byte> Uniform4uivUtf8 => "glUniform4uiv"u8;
        public static ReadOnlySpan<byte> ClearBufferivUtf8 => "glClearBufferiv"u8;
        public static ReadOnlySpan<byte> ClearBufferuivUtf8 => "glClearBufferuiv"u8;
        public static ReadOnlySpan<byte> ClearBufferfvUtf8 => "glClearBufferfv"u8;
        public static ReadOnlySpan<byte> ClearBufferfiUtf8 => "glClearBufferfi"u8;
        public static ReadOnlySpan<byte> GetStringiUtf8 => "glGetStringi"u8;
        public static ReadOnlySpan<byte> CopyBufferSubDataUtf8 => "glCopyBufferSubData"u8;
        public static ReadOnlySpan<byte> GetUniformIndicesUtf8 => "glGetUniformIndices"u8;
        public static ReadOnlySpan<byte> GetActiveUniformsivUtf8 => "glGetActiveUniformsiv"u8;
        public static ReadOnlySpan<byte> GetUniformBlockIndexUtf8 => "glGetUniformBlockIndex"u8;
        public static ReadOnlySpan<byte> GetActiveUniformBlockivUtf8 => "glGetActiveUniformBlockiv"u8;
        public static ReadOnlySpan<byte> GetActiveUniformBlockNameUtf8 => "glGetActiveUniformBlockName"u8;
        public static ReadOnlySpan<byte> UniformBlockBindingUtf8 => "glUniformBlockBinding"u8;
        public static ReadOnlySpan<byte> DrawArraysInstancedUtf8 => "glDrawArraysInstanced"u8;
        public static ReadOnlySpan<byte> DrawElementsInstancedUtf8 => "glDrawElementsInstanced"u8;
        public static ReadOnlySpan<byte> FenceSyncUtf8 => "glFenceSync"u8;
        public static ReadOnlySpan<byte> IsSyncUtf8 => "glIsSync"u8;
        public static ReadOnlySpan<byte> DeleteSyncUtf8 => "glDeleteSync"u8;
        public static ReadOnlySpan<byte> ClientWaitSyncUtf8 => "glClientWaitSync"u8;
        public static ReadOnlySpan<byte> WaitSyncUtf8 => "glWaitSync"u8;
        public static ReadOnlySpan<byte> GetInteger64vUtf8 => "glGetInteger64v"u8;
        public static ReadOnlySpan<byte> GetSyncivUtf8 => "glGetSynciv"u8;
        public static ReadOnlySpan<byte> GetInteger64i_vUtf8 => "glGetInteger64i_v"u8;
        public static ReadOnlySpan<byte> GetBufferParameteri64vUtf8 => "glGetBufferParameteri64v"u8;
        public static ReadOnlySpan<byte> GenSamplersUtf8 => "glGenSamplers"u8;
        public static ReadOnlySpan<byte> DeleteSamplersUtf8 => "glDeleteSamplers"u8;
        public static ReadOnlySpan<byte> IsSamplerUtf8 => "glIsSampler"u8;
        public static ReadOnlySpan<byte> BindSamplerUtf8 => "glBindSampler"u8;
        public static ReadOnlySpan<byte> SamplerParameteriUtf8 => "glSamplerParameteri"u8;
        public static ReadOnlySpan<byte> SamplerParameterivUtf8 => "glSamplerParameteriv"u8;
        public static ReadOnlySpan<byte> SamplerParameterfUtf8 => "glSamplerParameterf"u8;
        public static ReadOnlySpan<byte> SamplerParameterfvUtf8 => "glSamplerParameterfv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterivUtf8 => "glGetSamplerParameteriv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterfvUtf8 => "glGetSamplerParameterfv"u8;
        public static ReadOnlySpan<byte> VertexAttribDivisorUtf8 => "glVertexAttribDivisor"u8;
        public static ReadOnlySpan<byte> BindTransformFeedbackUtf8 => "glBindTransformFeedback"u8;
        public static ReadOnlySpan<byte> DeleteTransformFeedbacksUtf8 => "glDeleteTransformFeedbacks"u8;
        public static ReadOnlySpan<byte> GenTransformFeedbacksUtf8 => "glGenTransformFeedbacks"u8;
        public static ReadOnlySpan<byte> IsTransformFeedbackUtf8 => "glIsTransformFeedback"u8;
        public static ReadOnlySpan<byte> PauseTransformFeedbackUtf8 => "glPauseTransformFeedback"u8;
        public static ReadOnlySpan<byte> ResumeTransformFeedbackUtf8 => "glResumeTransformFeedback"u8;
        public static ReadOnlySpan<byte> GetProgramBinaryUtf8 => "glGetProgramBinary"u8;
        public static ReadOnlySpan<byte> ProgramBinaryUtf8 => "glProgramBinary"u8;
        public static ReadOnlySpan<byte> ProgramParameteriUtf8 => "glProgramParameteri"u8;
        public static ReadOnlySpan<byte> InvalidateFramebufferUtf8 => "glInvalidateFramebuffer"u8;
        public static ReadOnlySpan<byte> InvalidateSubFramebufferUtf8 => "glInvalidateSubFramebuffer"u8;
        public static ReadOnlySpan<byte> TexStorage2DUtf8 => "glTexStorage2D"u8;
        public static ReadOnlySpan<byte> TexStorage3DUtf8 => "glTexStorage3D"u8;
        public static ReadOnlySpan<byte> GetInternalformativUtf8 => "glGetInternalformativ"u8;
        public static ReadOnlySpan<byte> DispatchComputeUtf8 => "glDispatchCompute"u8;
        public static ReadOnlySpan<byte> DispatchComputeIndirectUtf8 => "glDispatchComputeIndirect"u8;
        public static ReadOnlySpan<byte> DrawArraysIndirectUtf8 => "glDrawArraysIndirect"u8;
        public static ReadOnlySpan<byte> DrawElementsIndirectUtf8 => "glDrawElementsIndirect"u8;
        public static ReadOnlySpan<byte> FramebufferParameteriUtf8 => "glFramebufferParameteri"u8;
        public static ReadOnlySpan<byte> GetFramebufferParameterivUtf8 => "glGetFramebufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetProgramInterfaceivUtf8 => "glGetProgramInterfaceiv"u8;
        public static ReadOnlySpan<byte> GetProgramResourceIndexUtf8 => "glGetProgramResourceIndex"u8;
        public static ReadOnlySpan<byte> GetProgramResourceNameUtf8 => "glGetProgramResourceName"u8;
        public static ReadOnlySpan<byte> GetProgramResourceivUtf8 => "glGetProgramResourceiv"u8;
        public static ReadOnlySpan<byte> GetProgramResourceLocationUtf8 => "glGetProgramResourceLocation"u8;
        public static ReadOnlySpan<byte> UseProgramStagesUtf8 => "glUseProgramStages"u8;
        public static ReadOnlySpan<byte> ActiveShaderProgramUtf8 => "glActiveShaderProgram"u8;
        public static ReadOnlySpan<byte> CreateShaderProgramvUtf8 => "glCreateShaderProgramv"u8;
        public static ReadOnlySpan<byte> BindProgramPipelineUtf8 => "glBindProgramPipeline"u8;
        public static ReadOnlySpan<byte> DeleteProgramPipelinesUtf8 => "glDeleteProgramPipelines"u8;
        public static ReadOnlySpan<byte> GenProgramPipelinesUtf8 => "glGenProgramPipelines"u8;
        public static ReadOnlySpan<byte> IsProgramPipelineUtf8 => "glIsProgramPipeline"u8;
        public static ReadOnlySpan<byte> GetProgramPipelineivUtf8 => "glGetProgramPipelineiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1iUtf8 => "glProgramUniform1i"u8;
        public static ReadOnlySpan<byte> ProgramUniform2iUtf8 => "glProgramUniform2i"u8;
        public static ReadOnlySpan<byte> ProgramUniform3iUtf8 => "glProgramUniform3i"u8;
        public static ReadOnlySpan<byte> ProgramUniform4iUtf8 => "glProgramUniform4i"u8;
        public static ReadOnlySpan<byte> ProgramUniform1uiUtf8 => "glProgramUniform1ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform2uiUtf8 => "glProgramUniform2ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform3uiUtf8 => "glProgramUniform3ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform4uiUtf8 => "glProgramUniform4ui"u8;
        public static ReadOnlySpan<byte> ProgramUniform1fUtf8 => "glProgramUniform1f"u8;
        public static ReadOnlySpan<byte> ProgramUniform2fUtf8 => "glProgramUniform2f"u8;
        public static ReadOnlySpan<byte> ProgramUniform3fUtf8 => "glProgramUniform3f"u8;
        public static ReadOnlySpan<byte> ProgramUniform4fUtf8 => "glProgramUniform4f"u8;
        public static ReadOnlySpan<byte> ProgramUniform1ivUtf8 => "glProgramUniform1iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2ivUtf8 => "glProgramUniform2iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3ivUtf8 => "glProgramUniform3iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4ivUtf8 => "glProgramUniform4iv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1uivUtf8 => "glProgramUniform1uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2uivUtf8 => "glProgramUniform2uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3uivUtf8 => "glProgramUniform3uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4uivUtf8 => "glProgramUniform4uiv"u8;
        public static ReadOnlySpan<byte> ProgramUniform1fvUtf8 => "glProgramUniform1fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform2fvUtf8 => "glProgramUniform2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform3fvUtf8 => "glProgramUniform3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniform4fvUtf8 => "glProgramUniform4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2fvUtf8 => "glProgramUniformMatrix2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3fvUtf8 => "glProgramUniformMatrix3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4fvUtf8 => "glProgramUniformMatrix4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2x3fvUtf8 => "glProgramUniformMatrix2x3fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3x2fvUtf8 => "glProgramUniformMatrix3x2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix2x4fvUtf8 => "glProgramUniformMatrix2x4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4x2fvUtf8 => "glProgramUniformMatrix4x2fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix3x4fvUtf8 => "glProgramUniformMatrix3x4fv"u8;
        public static ReadOnlySpan<byte> ProgramUniformMatrix4x3fvUtf8 => "glProgramUniformMatrix4x3fv"u8;
        public static ReadOnlySpan<byte> ValidateProgramPipelineUtf8 => "glValidateProgramPipeline"u8;
        public static ReadOnlySpan<byte> GetProgramPipelineInfoLogUtf8 => "glGetProgramPipelineInfoLog"u8;
        public static ReadOnlySpan<byte> BindImageTextureUtf8 => "glBindImageTexture"u8;
        public static ReadOnlySpan<byte> GetBooleani_vUtf8 => "glGetBooleani_v"u8;
        public static ReadOnlySpan<byte> MemoryBarrierUtf8 => "glMemoryBarrier"u8;
        public static ReadOnlySpan<byte> MemoryBarrierByRegionUtf8 => "glMemoryBarrierByRegion"u8;
        public static ReadOnlySpan<byte> TexStorage2DMultisampleUtf8 => "glTexStorage2DMultisample"u8;
        public static ReadOnlySpan<byte> GetMultisamplefvUtf8 => "glGetMultisamplefv"u8;
        public static ReadOnlySpan<byte> SampleMaskiUtf8 => "glSampleMaski"u8;
        public static ReadOnlySpan<byte> GetTexLevelParameterivUtf8 => "glGetTexLevelParameteriv"u8;
        public static ReadOnlySpan<byte> GetTexLevelParameterfvUtf8 => "glGetTexLevelParameterfv"u8;
        public static ReadOnlySpan<byte> BindVertexBufferUtf8 => "glBindVertexBuffer"u8;
        public static ReadOnlySpan<byte> VertexAttribFormatUtf8 => "glVertexAttribFormat"u8;
        public static ReadOnlySpan<byte> VertexAttribIFormatUtf8 => "glVertexAttribIFormat"u8;
        public static ReadOnlySpan<byte> VertexAttribBindingUtf8 => "glVertexAttribBinding"u8;
        public static ReadOnlySpan<byte> VertexBindingDivisorUtf8 => "glVertexBindingDivisor"u8;
        public static ReadOnlySpan<byte> BlendBarrierUtf8 => "glBlendBarrier"u8;
        public static ReadOnlySpan<byte> CopyImageSubDataUtf8 => "glCopyImageSubData"u8;
        public static ReadOnlySpan<byte> DebugMessageControlUtf8 => "glDebugMessageControl"u8;
        public static ReadOnlySpan<byte> DebugMessageInsertUtf8 => "glDebugMessageInsert"u8;
        public static ReadOnlySpan<byte> DebugMessageCallbackUtf8 => "glDebugMessageCallback"u8;
        public static ReadOnlySpan<byte> GetDebugMessageLogUtf8 => "glGetDebugMessageLog"u8;
        public static ReadOnlySpan<byte> PushDebugGroupUtf8 => "glPushDebugGroup"u8;
        public static ReadOnlySpan<byte> PopDebugGroupUtf8 => "glPopDebugGroup"u8;
        public static ReadOnlySpan<byte> ObjectLabelUtf8 => "glObjectLabel"u8;
        public static ReadOnlySpan<byte> GetObjectLabelUtf8 => "glGetObjectLabel"u8;
        public static ReadOnlySpan<byte> ObjectPtrLabelUtf8 => "glObjectPtrLabel"u8;
        public static ReadOnlySpan<byte> GetObjectPtrLabelUtf8 => "glGetObjectPtrLabel"u8;
        public static ReadOnlySpan<byte> GetPointervUtf8 => "glGetPointerv"u8;
        public static ReadOnlySpan<byte> EnableiUtf8 => "glEnablei"u8;
        public static ReadOnlySpan<byte> DisableiUtf8 => "glDisablei"u8;
        public static ReadOnlySpan<byte> BlendEquationiUtf8 => "glBlendEquationi"u8;
        public static ReadOnlySpan<byte> BlendEquationSeparateiUtf8 => "glBlendEquationSeparatei"u8;
        public static ReadOnlySpan<byte> BlendFunciUtf8 => "glBlendFunci"u8;
        public static ReadOnlySpan<byte> BlendFuncSeparateiUtf8 => "glBlendFuncSeparatei"u8;
        public static ReadOnlySpan<byte> ColorMaskiUtf8 => "glColorMaski"u8;
        public static ReadOnlySpan<byte> IsEnablediUtf8 => "glIsEnabledi"u8;
        public static ReadOnlySpan<byte> DrawElementsBaseVertexUtf8 => "glDrawElementsBaseVertex"u8;
        public static ReadOnlySpan<byte> DrawRangeElementsBaseVertexUtf8 => "glDrawRangeElementsBaseVertex"u8;
        public static ReadOnlySpan<byte> DrawElementsInstancedBaseVertexUtf8 => "glDrawElementsInstancedBaseVertex"u8;
        public static ReadOnlySpan<byte> FramebufferTextureUtf8 => "glFramebufferTexture"u8;
        public static ReadOnlySpan<byte> PrimitiveBoundingBoxUtf8 => "glPrimitiveBoundingBox"u8;
        public static ReadOnlySpan<byte> GetGraphicsResetStatusUtf8 => "glGetGraphicsResetStatus"u8;
        public static ReadOnlySpan<byte> ReadnPixelsUtf8 => "glReadnPixels"u8;
        public static ReadOnlySpan<byte> GetnUniformfvUtf8 => "glGetnUniformfv"u8;
        public static ReadOnlySpan<byte> GetnUniformivUtf8 => "glGetnUniformiv"u8;
        public static ReadOnlySpan<byte> GetnUniformuivUtf8 => "glGetnUniformuiv"u8;
        public static ReadOnlySpan<byte> MinSampleShadingUtf8 => "glMinSampleShading"u8;
        public static ReadOnlySpan<byte> PatchParameteriUtf8 => "glPatchParameteri"u8;
        public static ReadOnlySpan<byte> TexParameterIivUtf8 => "glTexParameterIiv"u8;
        public static ReadOnlySpan<byte> TexParameterIuivUtf8 => "glTexParameterIuiv"u8;
        public static ReadOnlySpan<byte> GetTexParameterIivUtf8 => "glGetTexParameterIiv"u8;
        public static ReadOnlySpan<byte> GetTexParameterIuivUtf8 => "glGetTexParameterIuiv"u8;
        public static ReadOnlySpan<byte> SamplerParameterIivUtf8 => "glSamplerParameterIiv"u8;
        public static ReadOnlySpan<byte> SamplerParameterIuivUtf8 => "glSamplerParameterIuiv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterIivUtf8 => "glGetSamplerParameterIiv"u8;
        public static ReadOnlySpan<byte> GetSamplerParameterIuivUtf8 => "glGetSamplerParameterIuiv"u8;
        public static ReadOnlySpan<byte> TexBufferUtf8 => "glTexBuffer"u8;
        public static ReadOnlySpan<byte> TexBufferRangeUtf8 => "glTexBufferRange"u8;
        public static ReadOnlySpan<byte> TexStorage3DMultisampleUtf8 => "glTexStorage3DMultisample"u8;

        private static ReadOnlySpan<byte> OpenGLESCMPrefix => "OpenGL ES-CM"u8;
        private static ReadOnlySpan<byte> OpenGLESCXPrefix => "OpenGL ES-CX"u8;
        private static ReadOnlySpan<byte> OpenGLESPrefix => "OpenGL ES"u8;
        private static ReadOnlySpan<byte> OpenGLSCPrefix => "OpenGL SC"u8;

        private static bool TryParseVersion(ReadOnlySpan<byte> value, out ushort major, out ushort minor, out bool isEmbedded)
        {
            if(value.StartsWith(OpenGLESCMPrefix))
            {
                value = value[(OpenGLESCMPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLESCXPrefix))
            {
                value = value[(OpenGLESCXPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLESPrefix))
            {
                value = value[(OpenGLESPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLSCPrefix))
            {
                value = value[(OpenGLSCPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else
            {
                isEmbedded = false;
            }

            return TryParseVersion(value, out major, out minor);
        }

        private static bool TryParseVersion(ReadOnlySpan<byte> value, out ushort major, out ushort minor)
        {
            var dotIndex = value.IndexOf((byte)'.');
            var spaceIndex = value.IndexOf((byte)' ');

            if(dotIndex == -1)
            {
                (major, minor) = (default, default);
                return false;
            }

            var fromFirstDot = value[(dotIndex + 1)..];
            var nextDot = fromFirstDot.IndexOf((byte)'.');
            var lastIndex = nextDot != -1 ? nextDot : (spaceIndex != -1 ? spaceIndex : fromFirstDot.Length);

            if(Utf8Parser.TryParse(value[..dotIndex], out major, out _) && Utf8Parser.TryParse(fromFirstDot[..lastIndex], out minor, out _))
                return true;

            major = minor = 0;
            return false;
        }
    }

    public readonly struct __GLsync;
    public readonly struct _cl_context;
    public readonly struct _cl_event;
    public enum AttribMask : uint
    {
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
        ColorBufferBit = 0x4000,
    }
    public enum ClearBufferMask : uint
    {
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
        ColorBufferBit = 0x4000,
    }
    public enum SpecialNumbers : uint
    {
        False = 0x0,
        True = 0x1,
        Zero = 0x0,
        One = 0x1,
        NoError = 0x0,
        None = 0x0,
        InvalidIndex = 0xFFFFFFFF,
        TimeoutIgnored = 0xFFFFFFFF,
    }
    public enum Boolean : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum VertexShaderWriteMaskEXT : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum ClampColorModeARB : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum PrimitiveType : uint
    {
        Points = 0x0,
        Lines = 0x1,
        LineLoop = 0x2,
        LineStrip = 0x3,
        Triangles = 0x4,
        TriangleStrip = 0x5,
        TriangleFan = 0x6,
        LinesAdjacency = 0xA,
        LineStripAdjacency = 0xB,
        TrianglesAdjacency = 0xC,
        TriangleStripAdjacency = 0xD,
        Patches = 0xE,
        Quads = 0x7,
    }
    public enum TextureSwizzle : uint
    {
        Zero = 0x0,
        One = 0x1,
        Alpha = 0x1906,
        Red = 0x1903,
        Green = 0x1904,
        Blue = 0x1905,
    }
    public enum StencilOp : uint
    {
        Zero = 0x0,
        Keep = 0x1E00,
        Replace = 0x1E01,
        Incr = 0x1E02,
        Decr = 0x1E03,
        Invert = 0x150A,
        IncrWrap = 0x8507,
        DecrWrap = 0x8508,
    }
    public enum BlendingFactor : uint
    {
        Zero = 0x0,
        One = 0x1,
        SrcColor = 0x300,
        OneMinusSrcColor = 0x301,
        SrcAlpha = 0x302,
        OneMinusSrcAlpha = 0x303,
        DstAlpha = 0x304,
        OneMinusDstAlpha = 0x305,
        DstColor = 0x306,
        OneMinusDstColor = 0x307,
        SrcAlphaSaturate = 0x308,
        ConstantColor = 0x8001,
        OneMinusConstantColor = 0x8002,
        ConstantAlpha = 0x8003,
        OneMinusConstantAlpha = 0x8004,
    }
    public enum FragmentShaderGenericSourceATI : uint
    {
        Zero = 0x0,
        One = 0x1,
    }
    public enum BlendEquationModeEXT : uint
    {
        FuncAdd = 0x8006,
        FuncSubtract = 0x800A,
        FuncReverseSubtract = 0x800B,
        Min = 0x8007,
        Max = 0x8008,
    }
    public enum GetPName : uint
    {
        BlendEquation = 0x8009,
        BlendEquationRgb = 0x8009,
        BlendEquationAlpha = 0x883D,
        BlendDstRgb = 0x80C8,
        BlendSrcRgb = 0x80C9,
        BlendDstAlpha = 0x80CA,
        BlendSrcAlpha = 0x80CB,
        BlendColor = 0x8005,
        ArrayBufferBinding = 0x8894,
        ElementArrayBufferBinding = 0x8895,
        Texture2D = 0xDE1,
        CullFace = 0xB44,
        Blend = 0xBE2,
        Dither = 0xBD0,
        StencilTest = 0xB90,
        DepthTest = 0xB71,
        ScissorTest = 0xC11,
        PolygonOffsetFill = 0x8037,
        LineWidth = 0xB21,
        AliasedPointSizeRange = 0x846D,
        AliasedLineWidthRange = 0x846E,
        CullFaceMode = 0xB45,
        FrontFace = 0xB46,
        DepthRange = 0xB70,
        DepthWritemask = 0xB72,
        DepthClearValue = 0xB73,
        DepthFunc = 0xB74,
        StencilClearValue = 0xB91,
        StencilFunc = 0xB92,
        StencilFail = 0xB94,
        StencilPassDepthFail = 0xB95,
        StencilPassDepthPass = 0xB96,
        StencilRef = 0xB97,
        StencilValueMask = 0xB93,
        StencilWritemask = 0xB98,
        StencilBackFunc = 0x8800,
        StencilBackFail = 0x8801,
        StencilBackPassDepthFail = 0x8802,
        StencilBackPassDepthPass = 0x8803,
        StencilBackRef = 0x8CA3,
        StencilBackValueMask = 0x8CA4,
        StencilBackWritemask = 0x8CA5,
        Viewport = 0xBA2,
        ScissorBox = 0xC10,
        ColorClearValue = 0xC22,
        ColorWritemask = 0xC23,
        UnpackAlignment = 0xCF5,
        PackAlignment = 0xD05,
        MaxTextureSize = 0xD33,
        MaxViewportDims = 0xD3A,
        SubpixelBits = 0xD50,
        RedBits = 0xD52,
        GreenBits = 0xD53,
        BlueBits = 0xD54,
        AlphaBits = 0xD55,
        DepthBits = 0xD56,
        StencilBits = 0xD57,
        PolygonOffsetUnits = 0x2A00,
        PolygonOffsetFactor = 0x8038,
        TextureBinding2D = 0x8069,
        SampleBuffers = 0x80A8,
        Samples = 0x80A9,
        SampleCoverageValue = 0x80AA,
        SampleCoverageInvert = 0x80AB,
        NumCompressedTextureFormats = 0x86A2,
        CompressedTextureFormats = 0x86A3,
        MaxVertexAttribs = 0x8869,
        MaxVertexUniformVectors = 0x8DFB,
        MaxVaryingVectors = 0x8DFC,
        MaxCombinedTextureImageUnits = 0x8B4D,
        MaxVertexTextureImageUnits = 0x8B4C,
        MaxTextureImageUnits = 0x8872,
        MaxFragmentUniformVectors = 0x8DFD,
        CurrentProgram = 0x8B8D,
        TextureBindingCubeMap = 0x8514,
        MaxCubeMapTextureSize = 0x851C,
        ActiveTexture = 0x84E0,
        ImplementationColorReadType = 0x8B9A,
        ImplementationColorReadFormat = 0x8B9B,
        ShaderCompiler = 0x8DFA,
        ShaderBinaryFormats = 0x8DF8,
        NumShaderBinaryFormats = 0x8DF9,
        RenderbufferBinding = 0x8CA7,
        MaxRenderbufferSize = 0x84E8,
        ReadBuffer = 0xC02,
        UnpackRowLength = 0xCF2,
        UnpackSkipRows = 0xCF3,
        UnpackSkipPixels = 0xCF4,
        PackRowLength = 0xD02,
        PackSkipRows = 0xD03,
        PackSkipPixels = 0xD04,
        TextureBinding3D = 0x806A,
        UnpackSkipImages = 0x806D,
        UnpackImageHeight = 0x806E,
        Max3DTextureSize = 0x8073,
        MaxElementsVertices = 0x80E8,
        MaxElementsIndices = 0x80E9,
        MaxTextureLodBias = 0x84FD,
        MaxDrawBuffers = 0x8824,
        MaxFragmentUniformComponents = 0x8B49,
        MaxVertexUniformComponents = 0x8B4A,
        FragmentShaderDerivativeHint = 0x8B8B,
        PixelPackBufferBinding = 0x88ED,
        PixelUnpackBufferBinding = 0x88EF,
        MajorVersion = 0x821B,
        MinorVersion = 0x821C,
        NumExtensions = 0x821D,
        MaxArrayTextureLayers = 0x88FF,
        MinProgramTexelOffset = 0x8904,
        MaxProgramTexelOffset = 0x8905,
        MaxVaryingComponents = 0x8B4B,
        TextureBinding2DArray = 0x8C1D,
        TransformFeedbackBufferStart = 0x8C84,
        TransformFeedbackBufferSize = 0x8C85,
        TransformFeedbackBufferBinding = 0x8C8F,
        DrawFramebufferBinding = 0x8CA6,
        ReadFramebufferBinding = 0x8CAA,
        MaxColorAttachments = 0x8CDF,
        VertexArrayBinding = 0x85B5,
        UniformBufferBinding = 0x8A28,
        UniformBufferStart = 0x8A29,
        UniformBufferSize = 0x8A2A,
        MaxVertexUniformBlocks = 0x8A2B,
        MaxFragmentUniformBlocks = 0x8A2D,
        MaxCombinedUniformBlocks = 0x8A2E,
        MaxUniformBufferBindings = 0x8A2F,
        MaxUniformBlockSize = 0x8A30,
        MaxCombinedVertexUniformComponents = 0x8A31,
        MaxCombinedFragmentUniformComponents = 0x8A33,
        UniformBufferOffsetAlignment = 0x8A34,
        MaxVertexOutputComponents = 0x9122,
        MaxFragmentInputComponents = 0x9125,
        MaxServerWaitTimeout = 0x9111,
        SamplerBinding = 0x8919,
        NumProgramBinaryFormats = 0x87FE,
        ProgramBinaryFormats = 0x87FF,
        MaxElementIndex = 0x8D6B,
        MaxComputeUniformBlocks = 0x91BB,
        MaxComputeTextureImageUnits = 0x91BC,
        MaxComputeUniformComponents = 0x8263,
        MaxComputeAtomicCounterBuffers = 0x8264,
        MaxComputeAtomicCounters = 0x8265,
        MaxCombinedComputeUniformComponents = 0x8266,
        MaxComputeWorkGroupInvocations = 0x90EB,
        MaxComputeWorkGroupCount = 0x91BE,
        MaxComputeWorkGroupSize = 0x91BF,
        DispatchIndirectBufferBinding = 0x90EF,
        MaxUniformLocations = 0x826E,
        MaxFramebufferWidth = 0x9315,
        MaxFramebufferHeight = 0x9316,
        MaxFramebufferSamples = 0x9318,
        ProgramPipelineBinding = 0x825A,
        MaxVertexAtomicCounters = 0x92D2,
        MaxFragmentAtomicCounters = 0x92D6,
        MaxCombinedAtomicCounters = 0x92D7,
        ShaderStorageBufferBinding = 0x90D3,
        ShaderStorageBufferStart = 0x90D4,
        ShaderStorageBufferSize = 0x90D5,
        MaxVertexShaderStorageBlocks = 0x90D6,
        MaxFragmentShaderStorageBlocks = 0x90DA,
        MaxComputeShaderStorageBlocks = 0x90DB,
        MaxCombinedShaderStorageBlocks = 0x90DC,
        MaxShaderStorageBufferBindings = 0x90DD,
        ShaderStorageBufferOffsetAlignment = 0x90DF,
        MaxSampleMaskWords = 0x8E59,
        MaxColorTextureSamples = 0x910E,
        MaxDepthTextureSamples = 0x910F,
        MaxIntegerSamples = 0x9110,
        TextureBinding2DMultisample = 0x9104,
        VertexBindingDivisor = 0x82D6,
        VertexBindingOffset = 0x82D7,
        VertexBindingStride = 0x82D8,
        MaxVertexAttribRelativeOffset = 0x82D9,
        MaxVertexAttribBindings = 0x82DA,
        MaxDebugGroupStackDepth = 0x826C,
        DebugGroupStackDepth = 0x826D,
        VertexArray = 0x8074,
        MaxLabelLength = 0x82E8,
        LayerProvokingVertex = 0x825E,
        MaxGeometryUniformComponents = 0x8DDF,
        MaxGeometryUniformBlocks = 0x8A2C,
        MaxCombinedGeometryUniformComponents = 0x8A32,
        MaxGeometryInputComponents = 0x9123,
        MaxGeometryOutputComponents = 0x9124,
        MaxGeometryTextureImageUnits = 0x8C29,
        MaxGeometryAtomicCounters = 0x92D5,
        MaxGeometryShaderStorageBlocks = 0x90D7,
        MaxFramebufferLayers = 0x9317,
        ContextFlags = 0x821E,
        MaxTessControlUniformBlocks = 0x8E89,
        MaxTessEvaluationUniformBlocks = 0x8E8A,
        MaxTessControlAtomicCounters = 0x92D3,
        MaxTessEvaluationAtomicCounters = 0x92D4,
        MaxTessControlShaderStorageBlocks = 0x90D8,
        MaxTessEvaluationShaderStorageBlocks = 0x90D9,
        MaxTextureBufferSize = 0x8C2B,
        TextureBindingBuffer = 0x8C2C,
        TextureBufferOffsetAlignment = 0x919F,
        TextureBinding2DMultisampleArray = 0x9105,
    }
    public enum BufferTargetARB : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,
        TransformFeedbackBuffer = 0x8C8E,
        CopyReadBuffer = 0x8F36,
        CopyWriteBuffer = 0x8F37,
        UniformBuffer = 0x8A11,
        DispatchIndirectBuffer = 0x90EE,
        DrawIndirectBuffer = 0x8F3F,
        AtomicCounterBuffer = 0x92C0,
        ShaderStorageBuffer = 0x90D2,
        TextureBuffer = 0x8C2A,
    }
    public enum CopyBufferSubDataTarget : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,
        TransformFeedbackBuffer = 0x8C8E,
        CopyReadBuffer = 0x8F36,
        CopyWriteBuffer = 0x8F37,
        UniformBuffer = 0x8A11,
        DispatchIndirectBuffer = 0x90EE,
        DrawIndirectBuffer = 0x8F3F,
        AtomicCounterBuffer = 0x92C0,
        ShaderStorageBuffer = 0x90D2,
        TextureBuffer = 0x8C2A,
    }
    public enum BufferStorageTarget : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,
        TransformFeedbackBuffer = 0x8C8E,
        CopyReadBuffer = 0x8F36,
        CopyWriteBuffer = 0x8F37,
        UniformBuffer = 0x8A11,
        DispatchIndirectBuffer = 0x90EE,
        DrawIndirectBuffer = 0x8F3F,
        AtomicCounterBuffer = 0x92C0,
        ShaderStorageBuffer = 0x90D2,
        TextureBuffer = 0x8C2A,
    }
    public enum VertexBufferObjectUsage : uint
    {
        StreamDraw = 0x88E0,
        StaticDraw = 0x88E4,
        DynamicDraw = 0x88E8,
        StreamRead = 0x88E1,
        StreamCopy = 0x88E2,
        StaticRead = 0x88E5,
        StaticCopy = 0x88E6,
        DynamicRead = 0x88E9,
        DynamicCopy = 0x88EA,
    }
    public enum BufferUsageARB : uint
    {
        StreamDraw = 0x88E0,
        StaticDraw = 0x88E4,
        DynamicDraw = 0x88E8,
        StreamRead = 0x88E1,
        StreamCopy = 0x88E2,
        StaticRead = 0x88E5,
        StaticCopy = 0x88E6,
        DynamicRead = 0x88E9,
        DynamicCopy = 0x88EA,
    }
    public enum BufferPNameARB : uint
    {
        Size = 0x8764,
        Usage = 0x8765,
        Mapped = 0x88BC,
        AccessFlags = 0x911F,
        MapLength = 0x9120,
        MapOffset = 0x9121,
    }
    public enum VertexAttribPropertyARB : uint
    {
        CurrentVertexAttrib = 0x8626,
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayBufferBinding = 0x889F,
        VertexAttribArrayInteger = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
        VertexAttribBinding = 0x82D4,
        VertexAttribRelativeOffset = 0x82D5,
    }
    public enum VertexAttribEnum : uint
    {
        CurrentVertexAttrib = 0x8626,
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayBufferBinding = 0x889F,
        VertexAttribArrayInteger = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
    }
    public enum DrawBufferMode : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
        ColorAttachment0 = 0x8CE0,
        None = 0x0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }
    public enum ReadBufferMode : uint
    {
        Front = 0x404,
        Back = 0x405,
        ColorAttachment0 = 0x8CE0,
        None = 0x0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
    }
    public enum ColorBuffer : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
        ColorAttachment0 = 0x8CE0,
        None = 0x0,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }
    public enum TriangleFace : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
    }
    public enum EnableCap : uint
    {
        Texture2D = 0xDE1,
        CullFace = 0xB44,
        Blend = 0xBE2,
        Dither = 0xBD0,
        StencilTest = 0xB90,
        DepthTest = 0xB71,
        ScissorTest = 0xC11,
        PolygonOffsetFill = 0x8037,
        SampleAlphaToCoverage = 0x809E,
        SampleCoverage = 0x80A0,
        TextureCubeMap = 0x8513,
        RasterizerDiscard = 0x8C89,
        PrimitiveRestartFixedIndex = 0x8D69,
        SampleMask = 0x8E51,
        DebugOutputSynchronous = 0x8242,
        VertexArray = 0x8074,
        DebugOutput = 0x92E0,
        SampleShading = 0x8C36,
    }
    public enum CopyImageSubDataTarget : uint
    {
        Texture2D = 0xDE1,
        TextureCubeMap = 0x8513,
        Renderbuffer = 0x8D41,
        Texture3D = 0x806F,
        Texture2DArray = 0x8C1A,
        Texture2DMultisample = 0x9100,
        TextureCubeMapArray = 0x9009,
        Texture2DMultisampleArray = 0x9102,
    }
    public enum TextureTarget : uint
    {
        Texture2D = 0xDE1,
        TextureCubeMap = 0x8513,
        TextureCubeMapPositiveX = 0x8515,
        TextureCubeMapNegativeX = 0x8516,
        TextureCubeMapPositiveY = 0x8517,
        TextureCubeMapNegativeY = 0x8518,
        TextureCubeMapPositiveZ = 0x8519,
        TextureCubeMapNegativeZ = 0x851A,
        Renderbuffer = 0x8D41,
        Texture3D = 0x806F,
        Texture2DArray = 0x8C1A,
        Texture2DMultisample = 0x9100,
        TextureBuffer = 0x8C2A,
        TextureCubeMapArray = 0x9009,
        Texture2DMultisampleArray = 0x9102,
    }
    public enum TextureEnvMode : uint
    {
        Blend = 0xBE2,
        Replace = 0x1E01,
    }
    public enum GraphicsResetStatus : uint
    {
        NoError = 0x0,
        GuiltyContextReset = 0x8253,
        InnocentContextReset = 0x8254,
        UnknownContextReset = 0x8255,
    }
    public enum ErrorCode : uint
    {
        NoError = 0x0,
        InvalidEnum = 0x500,
        InvalidValue = 0x501,
        InvalidOperation = 0x502,
        OutOfMemory = 0x505,
        InvalidFramebufferOperation = 0x506,
        StackOverflow = 0x503,
        StackUnderflow = 0x504,
    }
    public enum FrontFaceDirection : uint
    {
        Cw = 0x900,
        Ccw = 0x901,
    }
    public enum PixelStoreParameter : uint
    {
        UnpackAlignment = 0xCF5,
        PackAlignment = 0xD05,
        UnpackRowLength = 0xCF2,
        UnpackSkipRows = 0xCF3,
        UnpackSkipPixels = 0xCF4,
        PackRowLength = 0xD02,
        PackSkipRows = 0xD03,
        PackSkipPixels = 0xD04,
        UnpackSkipImages = 0x806D,
        UnpackImageHeight = 0x806E,
    }
    public enum GetFramebufferParameter : uint
    {
        SampleBuffers = 0x80A8,
        Samples = 0x80A9,
        ImplementationColorReadType = 0x8B9A,
        ImplementationColorReadFormat = 0x8B9B,
        FramebufferDefaultWidth = 0x9310,
        FramebufferDefaultHeight = 0x9311,
        FramebufferDefaultSamples = 0x9313,
        FramebufferDefaultFixedSampleLocations = 0x9314,
        FramebufferDefaultLayers = 0x9312,
    }
    public enum InternalFormatPName : uint
    {
        Samples = 0x80A9,
        NumSampleCounts = 0x9380,
        ImageFormatCompatibilityType = 0x90C7,
        TextureCompressed = 0x86A1,
    }
    public enum DebugSeverity : uint
    {
        DontCare = 0x1100,
        DebugSeverityNotification = 0x826B,
        DebugSeverityHigh = 0x9146,
        DebugSeverityMedium = 0x9147,
        DebugSeverityLow = 0x9148,
    }
    public enum HintMode : uint
    {
        DontCare = 0x1100,
        Fastest = 0x1101,
        Nicest = 0x1102,
    }
    public enum DebugSource : uint
    {
        DontCare = 0x1100,
        DebugSourceApi = 0x8246,
        DebugSourceWindowSystem = 0x8247,
        DebugSourceShaderCompiler = 0x8248,
        DebugSourceThirdParty = 0x8249,
        DebugSourceApplication = 0x824A,
        DebugSourceOther = 0x824B,
    }
    public enum DebugType : uint
    {
        DontCare = 0x1100,
        DebugTypeError = 0x824C,
        DebugTypeDeprecatedBehavior = 0x824D,
        DebugTypeUndefinedBehavior = 0x824E,
        DebugTypePortability = 0x824F,
        DebugTypePerformance = 0x8250,
        DebugTypeOther = 0x8251,
        DebugTypeMarker = 0x8268,
        DebugTypePushGroup = 0x8269,
        DebugTypePopGroup = 0x826A,
    }
    public enum HintTarget : uint
    {
        GenerateMipmapHint = 0x8192,
        FragmentShaderDerivativeHint = 0x8B8B,
        ProgramBinaryRetrievableHint = 0x8257,
    }
    public enum VertexAttribIType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
    }
    public enum WeightPointerTypeARB : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
    }
    public enum TangentPointerTypeEXT : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum BinormalPointerTypeEXT : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum ColorPointerType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
    }
    public enum ListNameType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
    }
    public enum NormalPointerType : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum PixelType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        UnsignedShort4444 = 0x8033,
        UnsignedShort5551 = 0x8034,
        UnsignedShort565 = 0x8363,
        UnsignedInt2101010Rev = 0x8368,
        UnsignedInt10F11F11FRev = 0x8C3B,
        UnsignedInt5999Rev = 0x8C3E,
        Float32UnsignedInt248Rev = 0x8DAD,
        UnsignedInt248 = 0x84FA,
        HalfFloat = 0x140B,
    }
    public enum VertexAttribType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Fixed = 0x140C,
        UnsignedInt2101010Rev = 0x8368,
        UnsignedInt10F11F11FRev = 0x8C3B,
        HalfFloat = 0x140B,
        Int2101010Rev = 0x8D9F,
    }
    public enum VertexAttribPointerType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        Fixed = 0x140C,
        UnsignedInt2101010Rev = 0x8368,
        UnsignedInt10F11F11FRev = 0x8C3B,
        HalfFloat = 0x140B,
        Int2101010Rev = 0x8D9F,
    }
    public enum ScalarType : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum ReplacementCodeTypeSUN : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum ElementPointerTypeATI : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum MatrixIndexPointerTypeARB : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum DrawElementsType : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
        Int = 0x1405,
    }
    public enum SecondaryColorPointerTypeIBM : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum IndexPointerType : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum TexCoordPointerType : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum VertexPointerType : uint
    {
        Short = 0x1402,
        Int = 0x1404,
        Float = 0x1406,
    }
    public enum PixelFormat : uint
    {
        UnsignedShort = 0x1403,
        UnsignedInt = 0x1405,
        DepthComponent = 0x1902,
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
        Red = 0x1903,
        RedInteger = 0x8D94,
        RgbInteger = 0x8D98,
        RgbaInteger = 0x8D99,
        DepthStencil = 0x84F9,
        Rg = 0x8227,
        RgInteger = 0x8228,
        Green = 0x1904,
        Blue = 0x1905,
        StencilIndex = 0x1901,
    }
    public enum AttributeType : uint
    {
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        FloatVec2 = 0x8B50,
        FloatVec3 = 0x8B51,
        FloatVec4 = 0x8B52,
        IntVec2 = 0x8B53,
        IntVec3 = 0x8B54,
        IntVec4 = 0x8B55,
        Bool = 0x8B56,
        BoolVec2 = 0x8B57,
        BoolVec3 = 0x8B58,
        BoolVec4 = 0x8B59,
        FloatMat2 = 0x8B5A,
        FloatMat3 = 0x8B5B,
        FloatMat4 = 0x8B5C,
        Sampler2D = 0x8B5E,
        SamplerCube = 0x8B60,
        Sampler3D = 0x8B5F,
        Sampler2DShadow = 0x8B62,
        FloatMat2X3 = 0x8B65,
        FloatMat2X4 = 0x8B66,
        FloatMat3X2 = 0x8B67,
        FloatMat3X4 = 0x8B68,
        FloatMat4X2 = 0x8B69,
        FloatMat4X3 = 0x8B6A,
        Sampler2DArrayShadow = 0x8DC4,
        SamplerCubeShadow = 0x8DC5,
        UnsignedIntVec2 = 0x8DC6,
        UnsignedIntVec3 = 0x8DC7,
        UnsignedIntVec4 = 0x8DC8,
        IntSampler2D = 0x8DCA,
        IntSampler3D = 0x8DCB,
        IntSamplerCube = 0x8DCC,
        IntSampler2DArray = 0x8DCF,
        UnsignedIntSampler2D = 0x8DD2,
        UnsignedIntSampler3D = 0x8DD3,
        UnsignedIntSamplerCube = 0x8DD4,
        UnsignedIntSampler2DArray = 0x8DD7,
        Image2D = 0x904D,
        Image3D = 0x904E,
        ImageCube = 0x9050,
        Image2DArray = 0x9053,
        IntImage2D = 0x9058,
        IntImage3D = 0x9059,
        IntImageCube = 0x905B,
        IntImage2DArray = 0x905E,
        UnsignedIntImage2D = 0x9063,
        UnsignedIntImage3D = 0x9064,
        UnsignedIntImageCube = 0x9066,
        UnsignedIntImage2DArray = 0x9069,
        Sampler2DMultisample = 0x9108,
        IntSampler2DMultisample = 0x9109,
        UnsignedIntSampler2DMultisample = 0x910A,
        SamplerBuffer = 0x8DC2,
        IntSamplerBuffer = 0x8DD0,
        UnsignedIntSamplerBuffer = 0x8DD8,
        ImageBuffer = 0x9051,
        IntImageBuffer = 0x905C,
        UnsignedIntImageBuffer = 0x9067,
        SamplerCubeMapArray = 0x900C,
        SamplerCubeMapArrayShadow = 0x900D,
        IntSamplerCubeMapArray = 0x900E,
        UnsignedIntSamplerCubeMapArray = 0x900F,
        ImageCubeMapArray = 0x9054,
        IntImageCubeMapArray = 0x905F,
        UnsignedIntImageCubeMapArray = 0x906A,
        Sampler2DMultisampleArray = 0x910B,
        IntSampler2DMultisampleArray = 0x910C,
        UnsignedIntSampler2DMultisampleArray = 0x910D,
    }
    public enum UniformType : uint
    {
        Int = 0x1404,
        UnsignedInt = 0x1405,
        Float = 0x1406,
        FloatVec2 = 0x8B50,
        FloatVec3 = 0x8B51,
        FloatVec4 = 0x8B52,
        IntVec2 = 0x8B53,
        IntVec3 = 0x8B54,
        IntVec4 = 0x8B55,
        Bool = 0x8B56,
        BoolVec2 = 0x8B57,
        BoolVec3 = 0x8B58,
        BoolVec4 = 0x8B59,
        FloatMat2 = 0x8B5A,
        FloatMat3 = 0x8B5B,
        FloatMat4 = 0x8B5C,
        Sampler2D = 0x8B5E,
        SamplerCube = 0x8B60,
        Sampler3D = 0x8B5F,
        Sampler2DShadow = 0x8B62,
        FloatMat2X3 = 0x8B65,
        FloatMat2X4 = 0x8B66,
        FloatMat3X2 = 0x8B67,
        FloatMat3X4 = 0x8B68,
        FloatMat4X2 = 0x8B69,
        FloatMat4X3 = 0x8B6A,
        Sampler2DArray = 0x8DC1,
        Sampler2DArrayShadow = 0x8DC4,
        SamplerCubeShadow = 0x8DC5,
        UnsignedIntVec2 = 0x8DC6,
        UnsignedIntVec3 = 0x8DC7,
        UnsignedIntVec4 = 0x8DC8,
        IntSampler2D = 0x8DCA,
        IntSampler3D = 0x8DCB,
        IntSamplerCube = 0x8DCC,
        IntSampler2DArray = 0x8DCF,
        UnsignedIntSampler2D = 0x8DD2,
        UnsignedIntSampler3D = 0x8DD3,
        UnsignedIntSamplerCube = 0x8DD4,
        UnsignedIntSampler2DArray = 0x8DD7,
        Sampler2DMultisample = 0x9108,
        IntSampler2DMultisample = 0x9109,
        UnsignedIntSampler2DMultisample = 0x910A,
        SamplerBuffer = 0x8DC2,
        IntSamplerBuffer = 0x8DD0,
        UnsignedIntSamplerBuffer = 0x8DD8,
        SamplerCubeMapArray = 0x900C,
        SamplerCubeMapArrayShadow = 0x900D,
        IntSamplerCubeMapArray = 0x900E,
        UnsignedIntSamplerCubeMapArray = 0x900F,
        Sampler2DMultisampleArray = 0x910B,
        IntSampler2DMultisampleArray = 0x910C,
        UnsignedIntSampler2DMultisampleArray = 0x910D,
    }
    public enum MapTypeNV : uint
    {
        Float = 0x1406,
    }
    public enum VertexWeightPointerTypeEXT : uint
    {
        Float = 0x1406,
    }
    public enum FogCoordinatePointerType : uint
    {
        Float = 0x1406,
    }
    public enum FogPointerTypeEXT : uint
    {
        Float = 0x1406,
    }
    public enum FogPointerTypeIBM : uint
    {
        Float = 0x1406,
    }
    public enum InternalFormat : uint
    {
        DepthComponent = 0x1902,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Rgba4 = 0x8056,
        Rgb5A1 = 0x8057,
        Rgb565 = 0x8D62,
        DepthComponent16 = 0x81A5,
        StencilIndex8 = 0x8D48,
        Red = 0x1903,
        Rgb8 = 0x8051,
        Rgba8 = 0x8058,
        Rgb10A2 = 0x8059,
        DepthComponent24 = 0x81A6,
        Srgb = 0x8C40,
        Srgb8 = 0x8C41,
        Srgb8Alpha8 = 0x8C43,
        Rgba32F = 0x8814,
        Rgb32F = 0x8815,
        Rgba16F = 0x881A,
        Rgb16F = 0x881B,
        R11FG11FB10F = 0x8C3A,
        Rgb9E5 = 0x8C3D,
        Rgba32Ui = 0x8D70,
        Rgb32Ui = 0x8D71,
        Rgba16Ui = 0x8D76,
        Rgb16Ui = 0x8D77,
        Rgba8Ui = 0x8D7C,
        Rgb8Ui = 0x8D7D,
        Rgba32I = 0x8D82,
        Rgb32I = 0x8D83,
        Rgba16I = 0x8D88,
        Rgb16I = 0x8D89,
        Rgba8I = 0x8D8E,
        Rgb8I = 0x8D8F,
        DepthComponent32F = 0x8CAC,
        Depth32FStencil8 = 0x8CAD,
        DepthStencil = 0x84F9,
        Depth24Stencil8 = 0x88F0,
        Rg = 0x8227,
        R8 = 0x8229,
        Rg8 = 0x822B,
        R16F = 0x822D,
        R32F = 0x822E,
        Rg16F = 0x822F,
        Rg32F = 0x8230,
        R8I = 0x8231,
        R8Ui = 0x8232,
        R16I = 0x8233,
        R16Ui = 0x8234,
        R32I = 0x8235,
        R32Ui = 0x8236,
        Rg8I = 0x8237,
        Rg8Ui = 0x8238,
        Rg16I = 0x8239,
        Rg16Ui = 0x823A,
        Rg32I = 0x823B,
        Rg32Ui = 0x823C,
        R8Snorm = 0x8F94,
        Rg8Snorm = 0x8F95,
        Rgb8Snorm = 0x8F96,
        Rgba8Snorm = 0x8F97,
        Rgb10A2Ui = 0x906F,
        CompressedR11Eac = 0x9270,
        CompressedSignedR11Eac = 0x9271,
        CompressedRg11Eac = 0x9272,
        CompressedSignedRg11Eac = 0x9273,
        CompressedRgb8Etc2 = 0x9274,
        CompressedSrgb8Etc2 = 0x9275,
        CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276,
        CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277,
        CompressedRgba8Etc2Eac = 0x9278,
        CompressedSrgb8Alpha8Etc2Eac = 0x9279,
        StencilIndex = 0x1901,
        CompressedRgbaAstc4X4 = 0x93B0,
        CompressedRgbaAstc5X4 = 0x93B1,
        CompressedRgbaAstc5X5 = 0x93B2,
        CompressedRgbaAstc6X5 = 0x93B3,
        CompressedRgbaAstc6X6 = 0x93B4,
        CompressedRgbaAstc8X5 = 0x93B5,
        CompressedRgbaAstc8X6 = 0x93B6,
        CompressedRgbaAstc8X8 = 0x93B7,
        CompressedRgbaAstc10X5 = 0x93B8,
        CompressedRgbaAstc10X6 = 0x93B9,
        CompressedRgbaAstc10X8 = 0x93BA,
        CompressedRgbaAstc10X10 = 0x93BB,
        CompressedRgbaAstc12X10 = 0x93BC,
        CompressedRgbaAstc12X12 = 0x93BD,
        CompressedSrgb8Alpha8Astc4X4 = 0x93D0,
        CompressedSrgb8Alpha8Astc5X4 = 0x93D1,
        CompressedSrgb8Alpha8Astc5X5 = 0x93D2,
        CompressedSrgb8Alpha8Astc6X5 = 0x93D3,
        CompressedSrgb8Alpha8Astc6X6 = 0x93D4,
        CompressedSrgb8Alpha8Astc8X5 = 0x93D5,
        CompressedSrgb8Alpha8Astc8X6 = 0x93D6,
        CompressedSrgb8Alpha8Astc8X8 = 0x93D7,
        CompressedSrgb8Alpha8Astc10X5 = 0x93D8,
        CompressedSrgb8Alpha8Astc10X6 = 0x93D9,
        CompressedSrgb8Alpha8Astc10X8 = 0x93DA,
        CompressedSrgb8Alpha8Astc10X10 = 0x93DB,
        CompressedSrgb8Alpha8Astc12X10 = 0x93DC,
        CompressedSrgb8Alpha8Astc12X12 = 0x93DD,
    }
    public enum DepthStencilTextureMode : uint
    {
        DepthComponent = 0x1902,
        StencilIndex = 0x1901,
    }
    public enum FragmentShaderValueRepATI : uint
    {
        Alpha = 0x1906,
        None = 0x0,
        Red = 0x1903,
        Green = 0x1904,
        Blue = 0x1905,
    }
    public enum PathColorFormat : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
        None = 0x0,
    }
    public enum PixelTexGenModeSGIX : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        None = 0x0,
    }
    public enum CombinerComponentUsageNV : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
        Blue = 0x1905,
    }
    public enum CombinerPortionNV : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
    }
    public enum PipelineParameterName : uint
    {
        FragmentShader = 0x8B30,
        VertexShader = 0x8B31,
        InfoLogLength = 0x8B84,
        ActiveProgram = 0x8259,
        GeometryShader = 0x8DD9,
        TessControlShader = 0x8E88,
        TessEvaluationShader = 0x8E87,
    }
    public enum ShaderType : uint
    {
        FragmentShader = 0x8B30,
        VertexShader = 0x8B31,
        ComputeShader = 0x91B9,
        GeometryShader = 0x8DD9,
        TessControlShader = 0x8E88,
        TessEvaluationShader = 0x8E87,
    }
    public enum ShaderParameterName : uint
    {
        ShaderType = 0x8B4F,
        DeleteStatus = 0x8B80,
        CompileStatus = 0x8B81,
        InfoLogLength = 0x8B84,
        ShaderSourceLength = 0x8B88,
    }
    public enum ProgramPropertyARB : uint
    {
        DeleteStatus = 0x8B80,
        LinkStatus = 0x8B82,
        ValidateStatus = 0x8B83,
        AttachedShaders = 0x8B85,
        ActiveUniforms = 0x8B86,
        ActiveUniformMaxLength = 0x8B87,
        ActiveAttributes = 0x8B89,
        ActiveAttributeMaxLength = 0x8B8A,
        InfoLogLength = 0x8B84,
        TransformFeedbackVaryingMaxLength = 0x8C76,
        TransformFeedbackBufferMode = 0x8C7F,
        TransformFeedbackVaryings = 0x8C83,
        ActiveUniformBlockMaxNameLength = 0x8A35,
        ActiveUniformBlocks = 0x8A36,
        ProgramBinaryLength = 0x8741,
        ComputeWorkGroupSize = 0x8267,
        ActiveAtomicCounterBuffers = 0x92D9,
        GeometryVerticesOut = 0x8916,
        GeometryInputType = 0x8917,
        GeometryOutputType = 0x8918,
    }
    public enum StringName : uint
    {
        ShadingLanguageVersion = 0x8B8C,
        Vendor = 0x1F00,
        Renderer = 0x1F01,
        Version = 0x1F02,
        Extensions = 0x1F03,
    }
    public enum StencilFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum IndexFunctionEXT : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum AlphaFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum DepthFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum LightEnvModeSGIX : uint
    {
        Replace = 0x1E01,
    }
    public enum LogicOp : uint
    {
        Invert = 0x150A,
    }
    public enum PathFillMode : uint
    {
        Invert = 0x150A,
    }
    public enum BlitFramebufferFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }
    public enum TextureMagFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }
    public enum TextureMinFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
        NearestMipmapNearest = 0x2700,
        LinearMipmapNearest = 0x2701,
        NearestMipmapLinear = 0x2702,
        LinearMipmapLinear = 0x2703,
    }
    public enum FogMode : uint
    {
        Linear = 0x2601,
    }
    public enum TextureParameterName : uint
    {
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        TextureWrapR = 0x8072,
        TextureMinLod = 0x813A,
        TextureMaxLod = 0x813B,
        TextureBaseLevel = 0x813C,
        TextureMaxLevel = 0x813D,
        TextureCompareMode = 0x884C,
        TextureCompareFunc = 0x884D,
        TextureSwizzleR = 0x8E42,
        TextureSwizzleG = 0x8E43,
        TextureSwizzleB = 0x8E44,
        TextureSwizzleA = 0x8E45,
        DepthStencilTextureMode = 0x90EA,
        TextureWidth = 0x1000,
        TextureHeight = 0x1001,
        TextureInternalFormat = 0x1003,
        TextureRedSize = 0x805C,
        TextureGreenSize = 0x805D,
        TextureBlueSize = 0x805E,
        TextureAlphaSize = 0x805F,
        TextureBorderColor = 0x1004,
    }
    public enum GetTextureParameter : uint
    {
        MagFilter = 0x2800,
        MinFilter = 0x2801,
        WrapS = 0x2802,
        WrapT = 0x2803,
        Width = 0x1000,
        Height = 0x1001,
        InternalFormat = 0x1003,
        RedSize = 0x805C,
        GreenSize = 0x805D,
        BlueSize = 0x805E,
        AlphaSize = 0x805F,
        BorderColor = 0x1004,
    }
    public enum SamplerParameterI : uint
    {
        MagFilter = 0x2800,
        MinFilter = 0x2801,
        WrapS = 0x2802,
        WrapT = 0x2803,
        WrapR = 0x8072,
        CompareMode = 0x884C,
        CompareFunc = 0x884D,
    }
    public enum MatrixMode : uint
    {
        Texture = 0x1702,
    }
    public enum ObjectIdentifier : uint
    {
        Texture = 0x1702,
        Framebuffer = 0x8D40,
        Renderbuffer = 0x8D41,
        TransformFeedback = 0x8E22,
        Buffer = 0x82E0,
        Shader = 0x82E1,
        Program = 0x82E2,
        VertexArray = 0x8074,
        Query = 0x82E3,
        ProgramPipeline = 0x82E4,
        Sampler = 0x82E6,
    }
    public enum TextureUnit : uint
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }
    public enum FragmentShaderTextureSourceATI : uint
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }
    public enum TextureWrapMode : uint
    {
        Repeat = 0x2901,
        ClampToEdge = 0x812F,
        MirroredRepeat = 0x8370,
        ClampToBorder = 0x812D,
    }
    public enum VertexArrayPName : uint
    {
        ArrayEnabled = 0x8622,
        ArraySize = 0x8623,
        ArrayStride = 0x8624,
        ArrayType = 0x8625,
        ArrayNormalized = 0x886A,
        ArrayInteger = 0x88FD,
        ArrayDivisor = 0x88FE,
        RelativeOffset = 0x82D5,
    }
    public enum VertexAttribPointerPropertyARB : uint
    {
        ArrayPointer = 0x8645,
    }
    public enum PrecisionType : uint
    {
        LowFloat = 0x8DF0,
        MediumFloat = 0x8DF1,
        HighFloat = 0x8DF2,
        LowInt = 0x8DF3,
        MediumInt = 0x8DF4,
        HighInt = 0x8DF5,
    }
    public enum FramebufferTarget : uint
    {
        Framebuffer = 0x8D40,
        ReadFramebuffer = 0x8CA8,
        DrawFramebuffer = 0x8CA9,
    }
    public enum RenderbufferTarget : uint
    {
        Renderbuffer = 0x8D41,
    }
    public enum SizedInternalFormat : uint
    {
        Rgba4 = 0x8056,
        Rgb5A1 = 0x8057,
        Rgb565 = 0x8D62,
        DepthComponent16 = 0x81A5,
        StencilIndex8 = 0x8D48,
        Rgb8 = 0x8051,
        Rgba8 = 0x8058,
        Rgb10A2 = 0x8059,
        DepthComponent24 = 0x81A6,
        Srgb8 = 0x8C41,
        Srgb8Alpha8 = 0x8C43,
        Rgba32F = 0x8814,
        Rgb32F = 0x8815,
        Rgba16F = 0x881A,
        Rgb16F = 0x881B,
        R11FG11FB10F = 0x8C3A,
        Rgb9E5 = 0x8C3D,
        Rgba32Ui = 0x8D70,
        Rgb32Ui = 0x8D71,
        Rgba16Ui = 0x8D76,
        Rgb16Ui = 0x8D77,
        Rgba8Ui = 0x8D7C,
        Rgb8Ui = 0x8D7D,
        Rgba32I = 0x8D82,
        Rgb32I = 0x8D83,
        Rgba16I = 0x8D88,
        Rgb16I = 0x8D89,
        Rgba8I = 0x8D8E,
        Rgb8I = 0x8D8F,
        DepthComponent32F = 0x8CAC,
        Depth32FStencil8 = 0x8CAD,
        Depth24Stencil8 = 0x88F0,
        R8 = 0x8229,
        Rg8 = 0x822B,
        R16F = 0x822D,
        R32F = 0x822E,
        Rg16F = 0x822F,
        Rg32F = 0x8230,
        R8I = 0x8231,
        R8Ui = 0x8232,
        R16I = 0x8233,
        R16Ui = 0x8234,
        R32I = 0x8235,
        R32Ui = 0x8236,
        Rg8I = 0x8237,
        Rg8Ui = 0x8238,
        Rg16I = 0x8239,
        Rg16Ui = 0x823A,
        Rg32I = 0x823B,
        Rg32Ui = 0x823C,
        R8Snorm = 0x8F94,
        Rg8Snorm = 0x8F95,
        Rgb8Snorm = 0x8F96,
        Rgba8Snorm = 0x8F97,
        Rgb10A2Ui = 0x906F,
        CompressedR11Eac = 0x9270,
        CompressedSignedR11Eac = 0x9271,
        CompressedRg11Eac = 0x9272,
        CompressedSignedRg11Eac = 0x9273,
        CompressedRgb8Etc2 = 0x9274,
        CompressedSrgb8Etc2 = 0x9275,
        CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276,
        CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277,
        CompressedRgba8Etc2Eac = 0x9278,
        CompressedSrgb8Alpha8Etc2Eac = 0x9279,
        CompressedRgbaAstc4X4 = 0x93B0,
        CompressedRgbaAstc5X4 = 0x93B1,
        CompressedRgbaAstc5X5 = 0x93B2,
        CompressedRgbaAstc6X5 = 0x93B3,
        CompressedRgbaAstc6X6 = 0x93B4,
        CompressedRgbaAstc8X5 = 0x93B5,
        CompressedRgbaAstc8X6 = 0x93B6,
        CompressedRgbaAstc8X8 = 0x93B7,
        CompressedRgbaAstc10X5 = 0x93B8,
        CompressedRgbaAstc10X6 = 0x93B9,
        CompressedRgbaAstc10X8 = 0x93BA,
        CompressedRgbaAstc10X10 = 0x93BB,
        CompressedRgbaAstc12X10 = 0x93BC,
        CompressedRgbaAstc12X12 = 0x93BD,
        CompressedSrgb8Alpha8Astc4X4 = 0x93D0,
        CompressedSrgb8Alpha8Astc5X4 = 0x93D1,
        CompressedSrgb8Alpha8Astc5X5 = 0x93D2,
        CompressedSrgb8Alpha8Astc6X5 = 0x93D3,
        CompressedSrgb8Alpha8Astc6X6 = 0x93D4,
        CompressedSrgb8Alpha8Astc8X5 = 0x93D5,
        CompressedSrgb8Alpha8Astc8X6 = 0x93D6,
        CompressedSrgb8Alpha8Astc8X8 = 0x93D7,
        CompressedSrgb8Alpha8Astc10X5 = 0x93D8,
        CompressedSrgb8Alpha8Astc10X6 = 0x93D9,
        CompressedSrgb8Alpha8Astc10X8 = 0x93DA,
        CompressedSrgb8Alpha8Astc10X10 = 0x93DB,
        CompressedSrgb8Alpha8Astc12X10 = 0x93DC,
        CompressedSrgb8Alpha8Astc12X12 = 0x93DD,
    }
    public enum RenderbufferParameterName : uint
    {
        Width = 0x8D42,
        Height = 0x8D43,
        InternalFormat = 0x8D44,
        RedSize = 0x8D50,
        GreenSize = 0x8D51,
        BlueSize = 0x8D52,
        AlphaSize = 0x8D53,
        DepthSize = 0x8D54,
        StencilSize = 0x8D55,
        Samples = 0x8CAB,
    }
    public enum FramebufferAttachmentParameterName : uint
    {
        ObjectType = 0x8CD0,
        ObjectName = 0x8CD1,
        TextureLevel = 0x8CD2,
        TextureCubeMapFace = 0x8CD3,
        ColorEncoding = 0x8210,
        ComponentType = 0x8211,
        RedSize = 0x8212,
        GreenSize = 0x8213,
        BlueSize = 0x8214,
        AlphaSize = 0x8215,
        DepthSize = 0x8216,
        StencilSize = 0x8217,
        TextureLayer = 0x8CD4,
        Layered = 0x8DA7,
    }
    public enum InvalidateFramebufferAttachment : uint
    {
        ColorAttachment0 = 0x8CE0,
        DepthAttachment = 0x8D00,
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
        DepthStencilAttachment = 0x821A,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }
    public enum FramebufferAttachment : uint
    {
        ColorAttachment0 = 0x8CE0,
        DepthAttachment = 0x8D00,
        StencilAttachment = 0x8D20,
        DepthStencilAttachment = 0x821A,
        ColorAttachment1 = 0x8CE1,
        ColorAttachment2 = 0x8CE2,
        ColorAttachment3 = 0x8CE3,
        ColorAttachment4 = 0x8CE4,
        ColorAttachment5 = 0x8CE5,
        ColorAttachment6 = 0x8CE6,
        ColorAttachment7 = 0x8CE7,
        ColorAttachment8 = 0x8CE8,
        ColorAttachment9 = 0x8CE9,
        ColorAttachment10 = 0x8CEA,
        ColorAttachment11 = 0x8CEB,
        ColorAttachment12 = 0x8CEC,
        ColorAttachment13 = 0x8CED,
        ColorAttachment14 = 0x8CEE,
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }
    public enum FragmentShaderDestMaskATI : uint
    {
        None = 0x0,
    }
    public enum FragmentShaderDestModMaskATI : uint
    {
        None = 0x0,
    }
    public enum PathFontStyle : uint
    {
        None = 0x0,
    }
    public enum SyncBehaviorFlags : uint
    {
        None = 0x0,
    }
    public enum TextureCompareMode : uint
    {
        None = 0x0,
        CompareRefToTexture = 0x884E,
    }
    public enum CombinerBiasNV : uint
    {
        None = 0x0,
    }
    public enum CombinerScaleNV : uint
    {
        None = 0x0,
    }
    public enum PathGenMode : uint
    {
        None = 0x0,
    }
    public enum PathTransformType : uint
    {
        None = 0x0,
    }
    public enum FramebufferStatus : uint
    {
        Complete = 0x8CD5,
        IncompleteAttachment = 0x8CD6,
        IncompleteMissingAttachment = 0x8CD7,
        Unsupported = 0x8CDD,
        Undefined = 0x8219,
        IncompleteMultisample = 0x8D56,
        IncompleteLayerTargets = 0x8DA8,
    }
    public enum Ungrouped : uint
    {
        FramebufferIncompleteDimensions = 0x8CD9,
        FramebufferBinding = 0x8CA6,
        DrawBuffer0 = 0x8825,
        DrawBuffer1 = 0x8826,
        DrawBuffer2 = 0x8827,
        DrawBuffer3 = 0x8828,
        DrawBuffer4 = 0x8829,
        DrawBuffer5 = 0x882A,
        DrawBuffer6 = 0x882B,
        DrawBuffer7 = 0x882C,
        DrawBuffer8 = 0x882D,
        DrawBuffer9 = 0x882E,
        DrawBuffer10 = 0x882F,
        DrawBuffer11 = 0x8830,
        DrawBuffer12 = 0x8831,
        DrawBuffer13 = 0x8832,
        DrawBuffer14 = 0x8833,
        DrawBuffer15 = 0x8834,
        MaxTransformFeedbackSeparateComponents = 0x8C80,
        MaxTransformFeedbackInterleavedComponents = 0x8C8A,
        MaxTransformFeedbackSeparateAttribs = 0x8C8B,
        FramebufferDefault = 0x8218,
        UnsignedNormalized = 0x8C17,
        MaxSamples = 0x8D57,
        SignedNormalized = 0x8F9C,
        CopyReadBufferBinding = 0x8F36,
        CopyWriteBufferBinding = 0x8F37,
        SyncFence = 0x9116,
        Unsignaled = 0x9118,
        Signaled = 0x9119,
        TransformFeedbackBinding = 0x8E25,
        TextureImmutableFormat = 0x912F,
        TextureImmutableLevels = 0x82DF,
        MaxComputeImageUniforms = 0x91BD,
        MaxComputeSharedMemorySize = 0x8262,
        DrawIndirectBufferBinding = 0x8F43,
        AtomicCounterBufferStart = 0x92C2,
        AtomicCounterBufferSize = 0x92C3,
        MaxVertexAtomicCounterBuffers = 0x92CC,
        MaxFragmentAtomicCounterBuffers = 0x92D0,
        MaxCombinedAtomicCounterBuffers = 0x92D1,
        MaxAtomicCounterBufferSize = 0x92D8,
        MaxAtomicCounterBufferBindings = 0x92DC,
        UnsignedIntAtomicCounter = 0x92DB,
        MaxImageUnits = 0x8F38,
        MaxVertexImageUniforms = 0x90CA,
        MaxFragmentImageUniforms = 0x90CE,
        MaxCombinedImageUniforms = 0x90CF,
        ImageBindingName = 0x8F3A,
        ImageBindingLevel = 0x8F3B,
        ImageBindingLayered = 0x8F3C,
        ImageBindingLayer = 0x8F3D,
        ImageBindingAccess = 0x8F3E,
        ImageBindingFormat = 0x906E,
        ImageFormatCompatibilityBySize = 0x90C8,
        ImageFormatCompatibilityByClass = 0x90C9,
        MaxShaderStorageBlockSize = 0x90DE,
        MaxCombinedShaderOutputResources = 0x8F39,
        MinProgramTextureGatherOffset = 0x8E5E,
        MaxProgramTextureGatherOffset = 0x8E5F,
        SampleMaskValue = 0x8E52,
        TextureSamples = 0x9106,
        TextureFixedSampleLocations = 0x9107,
        TextureDepth = 0x8071,
        TextureDepthSize = 0x884A,
        TextureStencilSize = 0x88F1,
        TextureSharedSize = 0x8C3F,
        TextureRedType = 0x8C10,
        TextureGreenType = 0x8C11,
        TextureBlueType = 0x8C12,
        TextureAlphaType = 0x8C13,
        TextureDepthType = 0x8C16,
        VertexBindingBuffer = 0x8F4F,
        MaxVertexAttribStride = 0x82E5,
        MultisampleLineWidthRange = 0x9381,
        MultisampleLineWidthGranularity = 0x9382,
        Multiply = 0x9294,
        Screen = 0x9295,
        Overlay = 0x9296,
        Darken = 0x9297,
        Lighten = 0x9298,
        Colordodge = 0x9299,
        Colorburn = 0x929A,
        Hardlight = 0x929B,
        Softlight = 0x929C,
        Difference = 0x929E,
        Exclusion = 0x92A0,
        HslHue = 0x92AD,
        HslSaturation = 0x92AE,
        HslColor = 0x92AF,
        HslLuminosity = 0x92B0,
        DebugNextLoggedMessageLength = 0x8243,
        MaxDebugMessageLength = 0x9143,
        MaxDebugLoggedMessages = 0x9144,
        DebugLoggedMessages = 0x9145,
        GeometryShaderInvocations = 0x887F,
        MaxGeometryOutputVertices = 0x8DE0,
        MaxGeometryTotalOutputComponents = 0x8DE1,
        MaxGeometryShaderInvocations = 0x8E5A,
        MaxGeometryAtomicCounterBuffers = 0x92CF,
        MaxGeometryImageUniforms = 0x90CD,
        UndefinedVertex = 0x8260,
        PrimitiveBoundingBox = 0x92BE,
        LoseContextOnReset = 0x8252,
        ResetNotificationStrategy = 0x8256,
        NoResetNotification = 0x8261,
        ContextLost = 0x507,
        MinSampleShadingValue = 0x8C37,
        MinFragmentInterpolationOffset = 0x8E5B,
        MaxFragmentInterpolationOffset = 0x8E5C,
        FragmentInterpolationOffsetBits = 0x8E5D,
        TessControlOutputVertices = 0x8E75,
        TessGenMode = 0x8E76,
        TessGenSpacing = 0x8E77,
        TessGenVertexOrder = 0x8E78,
        TessGenPointMode = 0x8E79,
        Isolines = 0x8E7A,
        FractionalOdd = 0x8E7B,
        FractionalEven = 0x8E7C,
        MaxPatchVertices = 0x8E7D,
        MaxTessGenLevel = 0x8E7E,
        MaxTessControlUniformComponents = 0x8E7F,
        MaxTessEvaluationUniformComponents = 0x8E80,
        MaxTessControlTextureImageUnits = 0x8E81,
        MaxTessEvaluationTextureImageUnits = 0x8E82,
        MaxTessControlOutputComponents = 0x8E83,
        MaxTessPatchComponents = 0x8E84,
        MaxTessControlTotalOutputComponents = 0x8E85,
        MaxTessEvaluationOutputComponents = 0x8E86,
        MaxTessControlInputComponents = 0x886C,
        MaxTessEvaluationInputComponents = 0x886D,
        MaxCombinedTessControlUniformComponents = 0x8E1E,
        MaxCombinedTessEvaluationUniformComponents = 0x8E1F,
        MaxTessControlAtomicCounterBuffers = 0x92CD,
        MaxTessEvaluationAtomicCounterBuffers = 0x92CE,
        MaxTessControlImageUniforms = 0x90CB,
        MaxTessEvaluationImageUniforms = 0x90CC,
        PrimitiveRestartForPatchesSupported = 0x8221,
        TextureBufferBinding = 0x8C2A,
        TextureBufferDataStoreBinding = 0x8C2D,
        TextureBufferOffset = 0x919D,
        TextureBufferSize = 0x919E,
        TextureBindingCubeMapArray = 0x900A,
    }
    public enum Buffer : uint
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
    }
    public enum PixelCopyType : uint
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
    }
    public enum SamplerParameterF : uint
    {
        MinLod = 0x813A,
        MaxLod = 0x813B,
        BorderColor = 0x1004,
    }
    public enum QueryParameterName : uint
    {
        CurrentQuery = 0x8865,
    }
    public enum QueryObjectParameterName : uint
    {
        Result = 0x8866,
        ResultAvailable = 0x8867,
    }
    public enum BufferPointerNameARB : uint
    {
        MapPointer = 0x88BD,
    }
    public enum TransformFeedbackPName : uint
    {
        BufferStart = 0x8C84,
        BufferSize = 0x8C85,
        BufferBinding = 0x8C8F,
        Paused = 0x8E23,
        Active = 0x8E24,
    }
    public enum QueryTarget : uint
    {
        TransformFeedbackPrimitivesWritten = 0x8C88,
        AnySamplesPassed = 0x8C2F,
        AnySamplesPassedConservative = 0x8D6A,
        PrimitivesGenerated = 0x8C87,
    }
    public enum TransformFeedbackBufferMode : uint
    {
        InterleavedAttribs = 0x8C8C,
        SeparateAttribs = 0x8C8D,
    }
    public enum ProgramInterface : uint
    {
        TransformFeedbackBuffer = 0x8C8E,
        Uniform = 0x92E1,
        UniformBlock = 0x92E2,
        ProgramInput = 0x92E3,
        ProgramOutput = 0x92E4,
        BufferVariable = 0x92E5,
        ShaderStorageBlock = 0x92E6,
        TransformFeedbackVarying = 0x92F4,
    }
    public enum BufferStorageMask : uint
    {
        Read = 0x1,
        Write = 0x2,
    }
    public enum MapBufferAccessMask : uint
    {
        Read = 0x1,
        Write = 0x2,
        InvalidateRange = 0x4,
        InvalidateBuffer = 0x8,
        FlushExplicit = 0x10,
        Unsynchronized = 0x20,
    }
    public enum UniformPName : uint
    {
        Type = 0x8A37,
        Size = 0x8A38,
        NameLength = 0x8A39,
        BlockIndex = 0x8A3A,
        Offset = 0x8A3B,
        ArrayStride = 0x8A3C,
        MatrixStride = 0x8A3D,
        IsRowMajor = 0x8A3E,
    }
    public enum SubroutineParameterName : uint
    {
        Size = 0x8A38,
        NameLength = 0x8A39,
    }
    public enum UniformBlockPName : uint
    {
        Binding = 0x8A3F,
        DataSize = 0x8A40,
        NameLength = 0x8A41,
        ActiveUniforms = 0x8A42,
        ActiveUniformIndices = 0x8A43,
        ReferencedByVertexShader = 0x8A44,
        ReferencedByFragmentShader = 0x8A46,
    }
    public enum SyncParameterName : uint
    {
        ObjectType = 0x9112,
        SyncCondition = 0x9113,
        SyncStatus = 0x9114,
        SyncFlags = 0x9115,
    }
    public enum SyncCondition : uint
    {
        GpuCommandsComplete = 0x9117,
    }
    public enum SyncStatus : uint
    {
        AlreadySignaled = 0x911A,
        TimeoutExpired = 0x911B,
        ConditionSatisfied = 0x911C,
        WaitFailed = 0x911D,
    }
    public enum SyncObjectMask : uint
    {
        FlushCommandsBit = 0x1,
    }
    public enum BindTransformFeedbackTarget : uint
    {
        TransformFeedback = 0x8E22,
    }
    public enum ProgramParameterPName : uint
    {
        BinaryRetrievableHint = 0x8257,
        Separable = 0x8258,
    }
    public enum UseProgramStageMask : uint
    {
        ComputeShaderBit = 0x20,
        VertexShaderBit = 0x1,
        FragmentShaderBit = 0x2,
        AllShaderBits = 0xFFFFFFFF,
        GeometryShaderBit = 0x4,
        TessControlShaderBit = 0x8,
        TessEvaluationShaderBit = 0x10,
    }
    public enum FramebufferParameterName : uint
    {
        Width = 0x9310,
        Height = 0x9311,
        Samples = 0x9313,
        FixedSampleLocations = 0x9314,
        Layers = 0x9312,
    }
    public enum ProgramResourceProperty : uint
    {
        Uniform = 0x92E1,
        NameLength = 0x92F9,
        Type = 0x92FA,
        ArraySize = 0x92FB,
        Offset = 0x92FC,
        BlockIndex = 0x92FD,
        ArrayStride = 0x92FE,
        MatrixStride = 0x92FF,
        IsRowMajor = 0x9300,
        AtomicCounterBufferIndex = 0x9301,
        BufferBinding = 0x9302,
        BufferDataSize = 0x9303,
        NumActiveVariables = 0x9304,
        ActiveVariables = 0x9305,
        ReferencedByVertexShader = 0x9306,
        ReferencedByFragmentShader = 0x930A,
        ReferencedByComputeShader = 0x930B,
        TopLevelArraySize = 0x930C,
        TopLevelArrayStride = 0x930D,
        Location = 0x930E,
        ReferencedByGeometryShader = 0x9309,
        IsPerPatch = 0x92E7,
        ReferencedByTessControlShader = 0x9307,
        ReferencedByTessEvaluationShader = 0x9308,
    }
    public enum ProgramInterfacePName : uint
    {
        ActiveResources = 0x92F5,
        MaxNameLength = 0x92F6,
        MaxNumActiveVariables = 0x92F7,
    }
    public enum AtomicCounterBufferPName : uint
    {
        Binding = 0x92C1,
    }
    public enum MemoryBarrierMask : uint
    {
        VertexAttribArrayBarrierBit = 0x1,
        ElementArrayBarrierBit = 0x2,
        UniformBarrierBit = 0x4,
        TextureFetchBarrierBit = 0x8,
        ShaderImageAccessBarrierBit = 0x20,
        CommandBarrierBit = 0x40,
        PixelBufferBarrierBit = 0x80,
        TextureUpdateBarrierBit = 0x100,
        BufferUpdateBarrierBit = 0x200,
        FramebufferBarrierBit = 0x400,
        TransformFeedbackBarrierBit = 0x800,
        AtomicCounterBarrierBit = 0x1000,
        AllBarrierBits = 0xFFFFFFFF,
        ShaderStorageBarrierBit = 0x2000,
    }
    public enum BufferAccessARB : uint
    {
        ReadOnly = 0x88B8,
        WriteOnly = 0x88B9,
        ReadWrite = 0x88BA,
    }
    public enum GetMultisamplePNameNV : uint
    {
        SamplePosition = 0x8E50,
    }
    public enum GetPointervPName : uint
    {
        Function = 0x8244,
        UserParam = 0x8245,
    }
    public enum ContextFlagMask : uint
    {
        Debug = 0x2,
        RobustAccess = 0x4,
    }
    public enum VertexProvokingMode : uint
    {
        FirstVertexConvention = 0x8E4D,
        LastVertexConvention = 0x8E4E,
    }
    public enum PatchParameterName : uint
    {
        Vertices = 0x8E72,
    }
}
