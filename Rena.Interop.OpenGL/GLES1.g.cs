// <auto-generated/> 
// CLI args: --spec GL --apis GLES1 1.1 --output Rena.Interop.OpenGL/GLES1.g.cs --class-name GLES1 --namespace Rena.Interop.OpenGL

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Buffers;
using System.Buffers.Text;
using unsafe GLenum = uint;
using unsafe GLboolean = byte;
using unsafe GLbitfield = uint;
using unsafe GLvoid = byte;
using unsafe GLbyte = sbyte;
using unsafe GLubyte = byte;
using unsafe GLshort = short;
using unsafe GLushort = ushort;
using unsafe GLint = int;
using unsafe GLuint = uint;
using unsafe GLclampx = int;
using unsafe GLsizei = int;
using unsafe GLfloat = float;
using unsafe GLclampf = float;
using unsafe GLdouble = double;
using unsafe GLclampd = double;
using unsafe GLeglClientBufferEXT = void*;
using unsafe GLeglImageOES = void*;
using unsafe GLchar = byte;
using unsafe GLcharARB = byte;
using unsafe GLhalf = ushort;
using unsafe GLhalfARB = ushort;
using unsafe GLfixed = int;
using unsafe GLintptr = nint;
using unsafe GLintptrARB = nint;
using unsafe GLsizeiptr = nint;
using unsafe GLsizeiptrARB = nint;
using unsafe GLint64 = long;
using unsafe GLint64EXT = long;
using unsafe GLuint64 = ulong;
using unsafe GLuint64EXT = ulong;
using unsafe GLsync = global::Rena.Interop.OpenGL.GLES1.__GLsync*;
using unsafe GLDEBUGPROC = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCARB = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCKHR = delegate* unmanaged<uint,uint,uint,uint,int,byte*,void*,void>;
using unsafe GLDEBUGPROCAMD = delegate* unmanaged<uint,uint,uint,int,byte*,void*,void>;
using unsafe GLhalfNV = ushort;
using unsafe GLvdpauSurfaceNV = nint;
using unsafe GLVULKANPROCNV = delegate* unmanaged<void>;

namespace Rena.Interop.OpenGL;

public static class GLES1
{
    public unsafe sealed class Commands
    {
        public readonly ushort Major;
        public readonly ushort Minor;
        public readonly bool IsEmbedded;

        public readonly bool Version10;

        public Commands(delegate* unmanaged<byte*, void*> loader)
        {
            fixed(byte* name = GetStringUtf8) GetString = (delegate* unmanaged<StringName, GLubyte*>)loader(name); 
            if(GetString == null) return;

            var version = GetString(StringName.Version);
            if(version is null) return;
            if(!TryParseVersion(MemoryMarshal.CreateReadOnlySpanFromNullTerminated(version), out Major, out Minor, out IsEmbedded)) return;

            Version10 = Major > 1 || (Major == 1 && Minor >= 0);

            if(IsEmbedded && Version10)
            {
                fixed(byte* name = AlphaFuncUtf8) this.AlphaFunc = (delegate* unmanaged<AlphaFunction, float, void>)loader(name);
                fixed(byte* name = ClearColorUtf8) this.ClearColor = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = ClearDepthfUtf8) this.ClearDepthf = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = ClipPlanefUtf8) this.ClipPlanef = (delegate* unmanaged<ClipPlaneName, float*, void>)loader(name);
                fixed(byte* name = Color4fUtf8) this.Color4f = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = DepthRangefUtf8) this.DepthRangef = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = FogfUtf8) this.Fogf = (delegate* unmanaged<FogParameter, float, void>)loader(name);
                fixed(byte* name = FogfvUtf8) this.Fogfv = (delegate* unmanaged<FogParameter, float*, void>)loader(name);
                fixed(byte* name = FrustumfUtf8) this.Frustumf = (delegate* unmanaged<float, float, float, float, float, float, void>)loader(name);
                fixed(byte* name = GetClipPlanefUtf8) this.GetClipPlanef = (delegate* unmanaged<ClipPlaneName, float*, void>)loader(name);
                fixed(byte* name = GetFloatvUtf8) this.GetFloatv = (delegate* unmanaged<GetPName, float*, void>)loader(name);
                fixed(byte* name = GetLightfvUtf8) this.GetLightfv = (delegate* unmanaged<LightName, LightParameter, float*, void>)loader(name);
                fixed(byte* name = GetMaterialfvUtf8) this.GetMaterialfv = (delegate* unmanaged<TriangleFace, MaterialParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexEnvfvUtf8) this.GetTexEnvfv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void>)loader(name);
                fixed(byte* name = GetTexParameterfvUtf8) this.GetTexParameterfv = (delegate* unmanaged<TextureTarget, GetTextureParameter, float*, void>)loader(name);
                fixed(byte* name = LightModelfUtf8) this.LightModelf = (delegate* unmanaged<LightModelParameter, float, void>)loader(name);
                fixed(byte* name = LightModelfvUtf8) this.LightModelfv = (delegate* unmanaged<LightModelParameter, float*, void>)loader(name);
                fixed(byte* name = LightfUtf8) this.Lightf = (delegate* unmanaged<LightName, LightParameter, float, void>)loader(name);
                fixed(byte* name = LightfvUtf8) this.Lightfv = (delegate* unmanaged<LightName, LightParameter, float*, void>)loader(name);
                fixed(byte* name = LineWidthUtf8) this.LineWidth = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = LoadMatrixfUtf8) this.LoadMatrixf = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = MaterialfUtf8) this.Materialf = (delegate* unmanaged<TriangleFace, MaterialParameter, float, void>)loader(name);
                fixed(byte* name = MaterialfvUtf8) this.Materialfv = (delegate* unmanaged<TriangleFace, MaterialParameter, float*, void>)loader(name);
                fixed(byte* name = MultMatrixfUtf8) this.MultMatrixf = (delegate* unmanaged<float*, void>)loader(name);
                fixed(byte* name = MultiTexCoord4fUtf8) this.MultiTexCoord4f = (delegate* unmanaged<TextureUnit, float, float, float, float, void>)loader(name);
                fixed(byte* name = Normal3fUtf8) this.Normal3f = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = OrthofUtf8) this.Orthof = (delegate* unmanaged<float, float, float, float, float, float, void>)loader(name);
                fixed(byte* name = PointParameterfUtf8) this.PointParameterf = (delegate* unmanaged<PointParameterNameARB, float, void>)loader(name);
                fixed(byte* name = PointParameterfvUtf8) this.PointParameterfv = (delegate* unmanaged<PointParameterNameARB, float*, void>)loader(name);
                fixed(byte* name = PointSizeUtf8) this.PointSize = (delegate* unmanaged<float, void>)loader(name);
                fixed(byte* name = PolygonOffsetUtf8) this.PolygonOffset = (delegate* unmanaged<float, float, void>)loader(name);
                fixed(byte* name = RotatefUtf8) this.Rotatef = (delegate* unmanaged<float, float, float, float, void>)loader(name);
                fixed(byte* name = ScalefUtf8) this.Scalef = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = TexEnvfUtf8) this.TexEnvf = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float, void>)loader(name);
                fixed(byte* name = TexEnvfvUtf8) this.TexEnvfv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void>)loader(name);
                fixed(byte* name = TexParameterfUtf8) this.TexParameterf = (delegate* unmanaged<TextureTarget, TextureParameterName, float, void>)loader(name);
                fixed(byte* name = TexParameterfvUtf8) this.TexParameterfv = (delegate* unmanaged<TextureTarget, TextureParameterName, float*, void>)loader(name);
                fixed(byte* name = TranslatefUtf8) this.Translatef = (delegate* unmanaged<float, float, float, void>)loader(name);
                fixed(byte* name = ActiveTextureUtf8) this.ActiveTexture = (delegate* unmanaged<TextureUnit, void>)loader(name);
                fixed(byte* name = AlphaFuncxUtf8) this.AlphaFuncx = (delegate* unmanaged<AlphaFunction, GLfixed, void>)loader(name);
                fixed(byte* name = BindBufferUtf8) this.BindBuffer = (delegate* unmanaged<BufferTargetARB, uint, void>)loader(name);
                fixed(byte* name = BindTextureUtf8) this.BindTexture = (delegate* unmanaged<TextureTarget, uint, void>)loader(name);
                fixed(byte* name = BlendFuncUtf8) this.BlendFunc = (delegate* unmanaged<BlendingFactor, BlendingFactor, void>)loader(name);
                fixed(byte* name = BufferDataUtf8) this.BufferData = (delegate* unmanaged<BufferTargetARB, GLsizeiptr, void*, BufferUsageARB, void>)loader(name);
                fixed(byte* name = BufferSubDataUtf8) this.BufferSubData = (delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void>)loader(name);
                fixed(byte* name = ClearUtf8) this.Clear = (delegate* unmanaged<ClearBufferMask, void>)loader(name);
                fixed(byte* name = ClearColorxUtf8) this.ClearColorx = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = ClearDepthxUtf8) this.ClearDepthx = (delegate* unmanaged<GLfixed, void>)loader(name);
                fixed(byte* name = ClearStencilUtf8) this.ClearStencil = (delegate* unmanaged<int, void>)loader(name);
                fixed(byte* name = ClientActiveTextureUtf8) this.ClientActiveTexture = (delegate* unmanaged<TextureUnit, void>)loader(name);
                fixed(byte* name = ClipPlanexUtf8) this.ClipPlanex = (delegate* unmanaged<ClipPlaneName, GLfixed*, void>)loader(name);
                fixed(byte* name = Color4ubUtf8) this.Color4ub = (delegate* unmanaged<GLubyte, GLubyte, GLubyte, GLubyte, void>)loader(name);
                fixed(byte* name = Color4xUtf8) this.Color4x = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = ColorMaskUtf8) this.ColorMask = (delegate* unmanaged<byte, byte, byte, byte, void>)loader(name);
                fixed(byte* name = ColorPointerUtf8) this.ColorPointer = (delegate* unmanaged<int, ColorPointerType, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexImage2DUtf8) this.CompressedTexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void*, void>)loader(name);
                fixed(byte* name = CompressedTexSubImage2DUtf8) this.CompressedTexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, InternalFormat, int, void*, void>)loader(name);
                fixed(byte* name = CopyTexImage2DUtf8) this.CopyTexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CopyTexSubImage2DUtf8) this.CopyTexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, void>)loader(name);
                fixed(byte* name = CullFaceUtf8) this.CullFace = (delegate* unmanaged<TriangleFace, void>)loader(name);
                fixed(byte* name = DeleteBuffersUtf8) this.DeleteBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DeleteTexturesUtf8) this.DeleteTextures = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = DepthFuncUtf8) this.DepthFunc = (delegate* unmanaged<DepthFunction, void>)loader(name);
                fixed(byte* name = DepthMaskUtf8) this.DepthMask = (delegate* unmanaged<byte, void>)loader(name);
                fixed(byte* name = DepthRangexUtf8) this.DepthRangex = (delegate* unmanaged<GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = DisableUtf8) this.Disable = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = DisableClientStateUtf8) this.DisableClientState = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = DrawArraysUtf8) this.DrawArrays = (delegate* unmanaged<PrimitiveType, int, int, void>)loader(name);
                fixed(byte* name = DrawElementsUtf8) this.DrawElements = (delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, void>)loader(name);
                fixed(byte* name = EnableUtf8) this.Enable = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = EnableClientStateUtf8) this.EnableClientState = (delegate* unmanaged<EnableCap, void>)loader(name);
                fixed(byte* name = FinishUtf8) this.Finish = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = FlushUtf8) this.Flush = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = FogxUtf8) this.Fogx = (delegate* unmanaged<FogPName, GLfixed, void>)loader(name);
                fixed(byte* name = FogxvUtf8) this.Fogxv = (delegate* unmanaged<FogPName, GLfixed*, void>)loader(name);
                fixed(byte* name = FrontFaceUtf8) this.FrontFace = (delegate* unmanaged<FrontFaceDirection, void>)loader(name);
                fixed(byte* name = FrustumxUtf8) this.Frustumx = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = GetBooleanvUtf8) this.GetBooleanv = (delegate* unmanaged<GetPName, byte*, void>)loader(name);
                fixed(byte* name = GetBufferParameterivUtf8) this.GetBufferParameteriv = (delegate* unmanaged<BufferTargetARB, BufferPNameARB, int*, void>)loader(name);
                fixed(byte* name = GetClipPlanexUtf8) this.GetClipPlanex = (delegate* unmanaged<ClipPlaneName, GLfixed*, void>)loader(name);
                fixed(byte* name = GenBuffersUtf8) this.GenBuffers = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GenTexturesUtf8) this.GenTextures = (delegate* unmanaged<int, uint*, void>)loader(name);
                fixed(byte* name = GetErrorUtf8) this.GetError = (delegate* unmanaged<ErrorCode>)loader(name);
                fixed(byte* name = GetFixedvUtf8) this.GetFixedv = (delegate* unmanaged<GetPName, GLfixed*, void>)loader(name);
                fixed(byte* name = GetIntegervUtf8) this.GetIntegerv = (delegate* unmanaged<GetPName, int*, void>)loader(name);
                fixed(byte* name = GetLightxvUtf8) this.GetLightxv = (delegate* unmanaged<LightName, LightParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = GetMaterialxvUtf8) this.GetMaterialxv = (delegate* unmanaged<TriangleFace, MaterialParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = GetPointervUtf8) this.GetPointerv = (delegate* unmanaged<GetPointervPName, void**, void>)loader(name);
                fixed(byte* name = GetStringUtf8) this.GetString = (delegate* unmanaged<StringName, GLubyte*>)loader(name);
                fixed(byte* name = GetTexEnvivUtf8) this.GetTexEnviv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexEnvxvUtf8) this.GetTexEnvxv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = GetTexParameterivUtf8) this.GetTexParameteriv = (delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void>)loader(name);
                fixed(byte* name = GetTexParameterxvUtf8) this.GetTexParameterxv = (delegate* unmanaged<TextureTarget, GetTextureParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = HintUtf8) this.Hint = (delegate* unmanaged<HintTarget, HintMode, void>)loader(name);
                fixed(byte* name = IsBufferUtf8) this.IsBuffer = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = IsEnabledUtf8) this.IsEnabled = (delegate* unmanaged<EnableCap, byte>)loader(name);
                fixed(byte* name = IsTextureUtf8) this.IsTexture = (delegate* unmanaged<uint, byte>)loader(name);
                fixed(byte* name = LightModelxUtf8) this.LightModelx = (delegate* unmanaged<LightModelParameter, GLfixed, void>)loader(name);
                fixed(byte* name = LightModelxvUtf8) this.LightModelxv = (delegate* unmanaged<LightModelParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = LightxUtf8) this.Lightx = (delegate* unmanaged<LightName, LightParameter, GLfixed, void>)loader(name);
                fixed(byte* name = LightxvUtf8) this.Lightxv = (delegate* unmanaged<LightName, LightParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = LineWidthxUtf8) this.LineWidthx = (delegate* unmanaged<GLfixed, void>)loader(name);
                fixed(byte* name = LoadIdentityUtf8) this.LoadIdentity = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = LoadMatrixxUtf8) this.LoadMatrixx = (delegate* unmanaged<GLfixed*, void>)loader(name);
                fixed(byte* name = LogicOpUtf8) this.LogicOp = (delegate* unmanaged<LogicOp, void>)loader(name);
                fixed(byte* name = MaterialxUtf8) this.Materialx = (delegate* unmanaged<TriangleFace, MaterialParameter, GLfixed, void>)loader(name);
                fixed(byte* name = MaterialxvUtf8) this.Materialxv = (delegate* unmanaged<TriangleFace, MaterialParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = MatrixModeUtf8) this.MatrixMode = (delegate* unmanaged<MatrixMode, void>)loader(name);
                fixed(byte* name = MultMatrixxUtf8) this.MultMatrixx = (delegate* unmanaged<GLfixed*, void>)loader(name);
                fixed(byte* name = MultiTexCoord4xUtf8) this.MultiTexCoord4x = (delegate* unmanaged<TextureUnit, GLfixed, GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = Normal3xUtf8) this.Normal3x = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = NormalPointerUtf8) this.NormalPointer = (delegate* unmanaged<NormalPointerType, int, void*, void>)loader(name);
                fixed(byte* name = OrthoxUtf8) this.Orthox = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = PixelStoreiUtf8) this.PixelStorei = (delegate* unmanaged<PixelStoreParameter, int, void>)loader(name);
                fixed(byte* name = PointParameterxUtf8) this.PointParameterx = (delegate* unmanaged<PointParameterNameARB, GLfixed, void>)loader(name);
                fixed(byte* name = PointParameterxvUtf8) this.PointParameterxv = (delegate* unmanaged<PointParameterNameARB, GLfixed*, void>)loader(name);
                fixed(byte* name = PointSizexUtf8) this.PointSizex = (delegate* unmanaged<GLfixed, void>)loader(name);
                fixed(byte* name = PolygonOffsetxUtf8) this.PolygonOffsetx = (delegate* unmanaged<GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = PopMatrixUtf8) this.PopMatrix = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = PushMatrixUtf8) this.PushMatrix = (delegate* unmanaged<void>)loader(name);
                fixed(byte* name = ReadPixelsUtf8) this.ReadPixels = (delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = RotatexUtf8) this.Rotatex = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = SampleCoverageUtf8) this.SampleCoverage = (delegate* unmanaged<float, byte, void>)loader(name);
                fixed(byte* name = SampleCoveragexUtf8) this.SampleCoveragex = (delegate* unmanaged<GLclampx, byte, void>)loader(name);
                fixed(byte* name = ScalexUtf8) this.Scalex = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = ScissorUtf8) this.Scissor = (delegate* unmanaged<int, int, int, int, void>)loader(name);
                fixed(byte* name = ShadeModelUtf8) this.ShadeModel = (delegate* unmanaged<ShadingModel, void>)loader(name);
                fixed(byte* name = StencilFuncUtf8) this.StencilFunc = (delegate* unmanaged<StencilFunction, int, uint, void>)loader(name);
                fixed(byte* name = StencilMaskUtf8) this.StencilMask = (delegate* unmanaged<uint, void>)loader(name);
                fixed(byte* name = StencilOpUtf8) this.StencilOp = (delegate* unmanaged<StencilOp, StencilOp, StencilOp, void>)loader(name);
                fixed(byte* name = TexCoordPointerUtf8) this.TexCoordPointer = (delegate* unmanaged<int, TexCoordPointerType, int, void*, void>)loader(name);
                fixed(byte* name = TexEnviUtf8) this.TexEnvi = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int, void>)loader(name);
                fixed(byte* name = TexEnvxUtf8) this.TexEnvx = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, GLfixed, void>)loader(name);
                fixed(byte* name = TexEnvivUtf8) this.TexEnviv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void>)loader(name);
                fixed(byte* name = TexEnvxvUtf8) this.TexEnvxv = (delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = TexImage2DUtf8) this.TexImage2D = (delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TexParameteriUtf8) this.TexParameteri = (delegate* unmanaged<TextureTarget, TextureParameterName, int, void>)loader(name);
                fixed(byte* name = TexParameterxUtf8) this.TexParameterx = (delegate* unmanaged<TextureTarget, GetTextureParameter, GLfixed, void>)loader(name);
                fixed(byte* name = TexParameterivUtf8) this.TexParameteriv = (delegate* unmanaged<TextureTarget, TextureParameterName, int*, void>)loader(name);
                fixed(byte* name = TexParameterxvUtf8) this.TexParameterxv = (delegate* unmanaged<TextureTarget, GetTextureParameter, GLfixed*, void>)loader(name);
                fixed(byte* name = TexSubImage2DUtf8) this.TexSubImage2D = (delegate* unmanaged<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*, void>)loader(name);
                fixed(byte* name = TranslatexUtf8) this.Translatex = (delegate* unmanaged<GLfixed, GLfixed, GLfixed, void>)loader(name);
                fixed(byte* name = VertexPointerUtf8) this.VertexPointer = (delegate* unmanaged<int, VertexPointerType, int, void*, void>)loader(name);
                fixed(byte* name = ViewportUtf8) this.Viewport = (delegate* unmanaged<int, int, int, int, void>)loader(name);
            }

        }

        public readonly delegate* unmanaged<AlphaFunction, float, void> AlphaFunc;
        public readonly delegate* unmanaged<float, float, float, float, void> ClearColor;
        public readonly delegate* unmanaged<float, void> ClearDepthf;
        public readonly delegate* unmanaged<ClipPlaneName, float*, void> ClipPlanef;
        public readonly delegate* unmanaged<float, float, float, float, void> Color4f;
        public readonly delegate* unmanaged<float, float, void> DepthRangef;
        public readonly delegate* unmanaged<FogParameter, float, void> Fogf;
        public readonly delegate* unmanaged<FogParameter, float*, void> Fogfv;
        public readonly delegate* unmanaged<float, float, float, float, float, float, void> Frustumf;
        public readonly delegate* unmanaged<ClipPlaneName, float*, void> GetClipPlanef;
        public readonly delegate* unmanaged<GetPName, float*, void> GetFloatv;
        public readonly delegate* unmanaged<LightName, LightParameter, float*, void> GetLightfv;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, float*, void> GetMaterialfv;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void> GetTexEnvfv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, float*, void> GetTexParameterfv;
        public readonly delegate* unmanaged<LightModelParameter, float, void> LightModelf;
        public readonly delegate* unmanaged<LightModelParameter, float*, void> LightModelfv;
        public readonly delegate* unmanaged<LightName, LightParameter, float, void> Lightf;
        public readonly delegate* unmanaged<LightName, LightParameter, float*, void> Lightfv;
        public readonly delegate* unmanaged<float, void> LineWidth;
        public readonly delegate* unmanaged<float*, void> LoadMatrixf;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, float, void> Materialf;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, float*, void> Materialfv;
        public readonly delegate* unmanaged<float*, void> MultMatrixf;
        public readonly delegate* unmanaged<TextureUnit, float, float, float, float, void> MultiTexCoord4f;
        public readonly delegate* unmanaged<float, float, float, void> Normal3f;
        public readonly delegate* unmanaged<float, float, float, float, float, float, void> Orthof;
        public readonly delegate* unmanaged<PointParameterNameARB, float, void> PointParameterf;
        public readonly delegate* unmanaged<PointParameterNameARB, float*, void> PointParameterfv;
        public readonly delegate* unmanaged<float, void> PointSize;
        public readonly delegate* unmanaged<float, float, void> PolygonOffset;
        public readonly delegate* unmanaged<float, float, float, float, void> Rotatef;
        public readonly delegate* unmanaged<float, float, float, void> Scalef;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float, void> TexEnvf;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, float*, void> TexEnvfv;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, float, void> TexParameterf;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, float*, void> TexParameterfv;
        public readonly delegate* unmanaged<float, float, float, void> Translatef;
        public readonly delegate* unmanaged<TextureUnit, void> ActiveTexture;
        public readonly delegate* unmanaged<AlphaFunction, GLfixed, void> AlphaFuncx;
        public readonly delegate* unmanaged<BufferTargetARB, uint, void> BindBuffer;
        public readonly delegate* unmanaged<TextureTarget, uint, void> BindTexture;
        public readonly delegate* unmanaged<BlendingFactor, BlendingFactor, void> BlendFunc;
        public readonly delegate* unmanaged<BufferTargetARB, GLsizeiptr, void*, BufferUsageARB, void> BufferData;
        public readonly delegate* unmanaged<BufferTargetARB, GLintptr, GLsizeiptr, void*, void> BufferSubData;
        public readonly delegate* unmanaged<ClearBufferMask, void> Clear;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, void> ClearColorx;
        public readonly delegate* unmanaged<GLfixed, void> ClearDepthx;
        public readonly delegate* unmanaged<int, void> ClearStencil;
        public readonly delegate* unmanaged<TextureUnit, void> ClientActiveTexture;
        public readonly delegate* unmanaged<ClipPlaneName, GLfixed*, void> ClipPlanex;
        public readonly delegate* unmanaged<GLubyte, GLubyte, GLubyte, GLubyte, void> Color4ub;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, void> Color4x;
        public readonly delegate* unmanaged<byte, byte, byte, byte, void> ColorMask;
        public readonly delegate* unmanaged<int, ColorPointerType, int, void*, void> ColorPointer;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, void*, void> CompressedTexImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, InternalFormat, int, void*, void> CompressedTexSubImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, int, int, void> CopyTexImage2D;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, int, int, void> CopyTexSubImage2D;
        public readonly delegate* unmanaged<TriangleFace, void> CullFace;
        public readonly delegate* unmanaged<int, uint*, void> DeleteBuffers;
        public readonly delegate* unmanaged<int, uint*, void> DeleteTextures;
        public readonly delegate* unmanaged<DepthFunction, void> DepthFunc;
        public readonly delegate* unmanaged<byte, void> DepthMask;
        public readonly delegate* unmanaged<GLfixed, GLfixed, void> DepthRangex;
        public readonly delegate* unmanaged<EnableCap, void> Disable;
        public readonly delegate* unmanaged<EnableCap, void> DisableClientState;
        public readonly delegate* unmanaged<PrimitiveType, int, int, void> DrawArrays;
        public readonly delegate* unmanaged<PrimitiveType, int, DrawElementsType, void*, void> DrawElements;
        public readonly delegate* unmanaged<EnableCap, void> Enable;
        public readonly delegate* unmanaged<EnableCap, void> EnableClientState;
        public readonly delegate* unmanaged<void> Finish;
        public readonly delegate* unmanaged<void> Flush;
        public readonly delegate* unmanaged<FogPName, GLfixed, void> Fogx;
        public readonly delegate* unmanaged<FogPName, GLfixed*, void> Fogxv;
        public readonly delegate* unmanaged<FrontFaceDirection, void> FrontFace;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, void> Frustumx;
        public readonly delegate* unmanaged<GetPName, byte*, void> GetBooleanv;
        public readonly delegate* unmanaged<BufferTargetARB, BufferPNameARB, int*, void> GetBufferParameteriv;
        public readonly delegate* unmanaged<ClipPlaneName, GLfixed*, void> GetClipPlanex;
        public readonly delegate* unmanaged<int, uint*, void> GenBuffers;
        public readonly delegate* unmanaged<int, uint*, void> GenTextures;
        public readonly delegate* unmanaged<ErrorCode> GetError;
        public readonly delegate* unmanaged<GetPName, GLfixed*, void> GetFixedv;
        public readonly delegate* unmanaged<GetPName, int*, void> GetIntegerv;
        public readonly delegate* unmanaged<LightName, LightParameter, GLfixed*, void> GetLightxv;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, GLfixed*, void> GetMaterialxv;
        public readonly delegate* unmanaged<GetPointervPName, void**, void> GetPointerv;
        public readonly delegate* unmanaged<StringName, GLubyte*> GetString;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void> GetTexEnviv;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, GLfixed*, void> GetTexEnvxv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, int*, void> GetTexParameteriv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, GLfixed*, void> GetTexParameterxv;
        public readonly delegate* unmanaged<HintTarget, HintMode, void> Hint;
        public readonly delegate* unmanaged<uint, byte> IsBuffer;
        public readonly delegate* unmanaged<EnableCap, byte> IsEnabled;
        public readonly delegate* unmanaged<uint, byte> IsTexture;
        public readonly delegate* unmanaged<LightModelParameter, GLfixed, void> LightModelx;
        public readonly delegate* unmanaged<LightModelParameter, GLfixed*, void> LightModelxv;
        public readonly delegate* unmanaged<LightName, LightParameter, GLfixed, void> Lightx;
        public readonly delegate* unmanaged<LightName, LightParameter, GLfixed*, void> Lightxv;
        public readonly delegate* unmanaged<GLfixed, void> LineWidthx;
        public readonly delegate* unmanaged<void> LoadIdentity;
        public readonly delegate* unmanaged<GLfixed*, void> LoadMatrixx;
        public readonly delegate* unmanaged<LogicOp, void> LogicOp;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, GLfixed, void> Materialx;
        public readonly delegate* unmanaged<TriangleFace, MaterialParameter, GLfixed*, void> Materialxv;
        public readonly delegate* unmanaged<MatrixMode, void> MatrixMode;
        public readonly delegate* unmanaged<GLfixed*, void> MultMatrixx;
        public readonly delegate* unmanaged<TextureUnit, GLfixed, GLfixed, GLfixed, GLfixed, void> MultiTexCoord4x;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, void> Normal3x;
        public readonly delegate* unmanaged<NormalPointerType, int, void*, void> NormalPointer;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, void> Orthox;
        public readonly delegate* unmanaged<PixelStoreParameter, int, void> PixelStorei;
        public readonly delegate* unmanaged<PointParameterNameARB, GLfixed, void> PointParameterx;
        public readonly delegate* unmanaged<PointParameterNameARB, GLfixed*, void> PointParameterxv;
        public readonly delegate* unmanaged<GLfixed, void> PointSizex;
        public readonly delegate* unmanaged<GLfixed, GLfixed, void> PolygonOffsetx;
        public readonly delegate* unmanaged<void> PopMatrix;
        public readonly delegate* unmanaged<void> PushMatrix;
        public readonly delegate* unmanaged<int, int, int, int, PixelFormat, PixelType, void*, void> ReadPixels;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, GLfixed, void> Rotatex;
        public readonly delegate* unmanaged<float, byte, void> SampleCoverage;
        public readonly delegate* unmanaged<GLclampx, byte, void> SampleCoveragex;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, void> Scalex;
        public readonly delegate* unmanaged<int, int, int, int, void> Scissor;
        public readonly delegate* unmanaged<ShadingModel, void> ShadeModel;
        public readonly delegate* unmanaged<StencilFunction, int, uint, void> StencilFunc;
        public readonly delegate* unmanaged<uint, void> StencilMask;
        public readonly delegate* unmanaged<StencilOp, StencilOp, StencilOp, void> StencilOp;
        public readonly delegate* unmanaged<int, TexCoordPointerType, int, void*, void> TexCoordPointer;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int, void> TexEnvi;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, GLfixed, void> TexEnvx;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, int*, void> TexEnviv;
        public readonly delegate* unmanaged<TextureEnvTarget, TextureEnvParameter, GLfixed*, void> TexEnvxv;
        public readonly delegate* unmanaged<TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*, void> TexImage2D;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int, void> TexParameteri;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, GLfixed, void> TexParameterx;
        public readonly delegate* unmanaged<TextureTarget, TextureParameterName, int*, void> TexParameteriv;
        public readonly delegate* unmanaged<TextureTarget, GetTextureParameter, GLfixed*, void> TexParameterxv;
        public readonly delegate* unmanaged<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*, void> TexSubImage2D;
        public readonly delegate* unmanaged<GLfixed, GLfixed, GLfixed, void> Translatex;
        public readonly delegate* unmanaged<int, VertexPointerType, int, void*, void> VertexPointer;
        public readonly delegate* unmanaged<int, int, int, int, void> Viewport;

        public static ReadOnlySpan<byte> AlphaFuncUtf8 => "glAlphaFunc"u8;
        public static ReadOnlySpan<byte> ClearColorUtf8 => "glClearColor"u8;
        public static ReadOnlySpan<byte> ClearDepthfUtf8 => "glClearDepthf"u8;
        public static ReadOnlySpan<byte> ClipPlanefUtf8 => "glClipPlanef"u8;
        public static ReadOnlySpan<byte> Color4fUtf8 => "glColor4f"u8;
        public static ReadOnlySpan<byte> DepthRangefUtf8 => "glDepthRangef"u8;
        public static ReadOnlySpan<byte> FogfUtf8 => "glFogf"u8;
        public static ReadOnlySpan<byte> FogfvUtf8 => "glFogfv"u8;
        public static ReadOnlySpan<byte> FrustumfUtf8 => "glFrustumf"u8;
        public static ReadOnlySpan<byte> GetClipPlanefUtf8 => "glGetClipPlanef"u8;
        public static ReadOnlySpan<byte> GetFloatvUtf8 => "glGetFloatv"u8;
        public static ReadOnlySpan<byte> GetLightfvUtf8 => "glGetLightfv"u8;
        public static ReadOnlySpan<byte> GetMaterialfvUtf8 => "glGetMaterialfv"u8;
        public static ReadOnlySpan<byte> GetTexEnvfvUtf8 => "glGetTexEnvfv"u8;
        public static ReadOnlySpan<byte> GetTexParameterfvUtf8 => "glGetTexParameterfv"u8;
        public static ReadOnlySpan<byte> LightModelfUtf8 => "glLightModelf"u8;
        public static ReadOnlySpan<byte> LightModelfvUtf8 => "glLightModelfv"u8;
        public static ReadOnlySpan<byte> LightfUtf8 => "glLightf"u8;
        public static ReadOnlySpan<byte> LightfvUtf8 => "glLightfv"u8;
        public static ReadOnlySpan<byte> LineWidthUtf8 => "glLineWidth"u8;
        public static ReadOnlySpan<byte> LoadMatrixfUtf8 => "glLoadMatrixf"u8;
        public static ReadOnlySpan<byte> MaterialfUtf8 => "glMaterialf"u8;
        public static ReadOnlySpan<byte> MaterialfvUtf8 => "glMaterialfv"u8;
        public static ReadOnlySpan<byte> MultMatrixfUtf8 => "glMultMatrixf"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4fUtf8 => "glMultiTexCoord4f"u8;
        public static ReadOnlySpan<byte> Normal3fUtf8 => "glNormal3f"u8;
        public static ReadOnlySpan<byte> OrthofUtf8 => "glOrthof"u8;
        public static ReadOnlySpan<byte> PointParameterfUtf8 => "glPointParameterf"u8;
        public static ReadOnlySpan<byte> PointParameterfvUtf8 => "glPointParameterfv"u8;
        public static ReadOnlySpan<byte> PointSizeUtf8 => "glPointSize"u8;
        public static ReadOnlySpan<byte> PolygonOffsetUtf8 => "glPolygonOffset"u8;
        public static ReadOnlySpan<byte> RotatefUtf8 => "glRotatef"u8;
        public static ReadOnlySpan<byte> ScalefUtf8 => "glScalef"u8;
        public static ReadOnlySpan<byte> TexEnvfUtf8 => "glTexEnvf"u8;
        public static ReadOnlySpan<byte> TexEnvfvUtf8 => "glTexEnvfv"u8;
        public static ReadOnlySpan<byte> TexParameterfUtf8 => "glTexParameterf"u8;
        public static ReadOnlySpan<byte> TexParameterfvUtf8 => "glTexParameterfv"u8;
        public static ReadOnlySpan<byte> TranslatefUtf8 => "glTranslatef"u8;
        public static ReadOnlySpan<byte> ActiveTextureUtf8 => "glActiveTexture"u8;
        public static ReadOnlySpan<byte> AlphaFuncxUtf8 => "glAlphaFuncx"u8;
        public static ReadOnlySpan<byte> BindBufferUtf8 => "glBindBuffer"u8;
        public static ReadOnlySpan<byte> BindTextureUtf8 => "glBindTexture"u8;
        public static ReadOnlySpan<byte> BlendFuncUtf8 => "glBlendFunc"u8;
        public static ReadOnlySpan<byte> BufferDataUtf8 => "glBufferData"u8;
        public static ReadOnlySpan<byte> BufferSubDataUtf8 => "glBufferSubData"u8;
        public static ReadOnlySpan<byte> ClearUtf8 => "glClear"u8;
        public static ReadOnlySpan<byte> ClearColorxUtf8 => "glClearColorx"u8;
        public static ReadOnlySpan<byte> ClearDepthxUtf8 => "glClearDepthx"u8;
        public static ReadOnlySpan<byte> ClearStencilUtf8 => "glClearStencil"u8;
        public static ReadOnlySpan<byte> ClientActiveTextureUtf8 => "glClientActiveTexture"u8;
        public static ReadOnlySpan<byte> ClipPlanexUtf8 => "glClipPlanex"u8;
        public static ReadOnlySpan<byte> Color4ubUtf8 => "glColor4ub"u8;
        public static ReadOnlySpan<byte> Color4xUtf8 => "glColor4x"u8;
        public static ReadOnlySpan<byte> ColorMaskUtf8 => "glColorMask"u8;
        public static ReadOnlySpan<byte> ColorPointerUtf8 => "glColorPointer"u8;
        public static ReadOnlySpan<byte> CompressedTexImage2DUtf8 => "glCompressedTexImage2D"u8;
        public static ReadOnlySpan<byte> CompressedTexSubImage2DUtf8 => "glCompressedTexSubImage2D"u8;
        public static ReadOnlySpan<byte> CopyTexImage2DUtf8 => "glCopyTexImage2D"u8;
        public static ReadOnlySpan<byte> CopyTexSubImage2DUtf8 => "glCopyTexSubImage2D"u8;
        public static ReadOnlySpan<byte> CullFaceUtf8 => "glCullFace"u8;
        public static ReadOnlySpan<byte> DeleteBuffersUtf8 => "glDeleteBuffers"u8;
        public static ReadOnlySpan<byte> DeleteTexturesUtf8 => "glDeleteTextures"u8;
        public static ReadOnlySpan<byte> DepthFuncUtf8 => "glDepthFunc"u8;
        public static ReadOnlySpan<byte> DepthMaskUtf8 => "glDepthMask"u8;
        public static ReadOnlySpan<byte> DepthRangexUtf8 => "glDepthRangex"u8;
        public static ReadOnlySpan<byte> DisableUtf8 => "glDisable"u8;
        public static ReadOnlySpan<byte> DisableClientStateUtf8 => "glDisableClientState"u8;
        public static ReadOnlySpan<byte> DrawArraysUtf8 => "glDrawArrays"u8;
        public static ReadOnlySpan<byte> DrawElementsUtf8 => "glDrawElements"u8;
        public static ReadOnlySpan<byte> EnableUtf8 => "glEnable"u8;
        public static ReadOnlySpan<byte> EnableClientStateUtf8 => "glEnableClientState"u8;
        public static ReadOnlySpan<byte> FinishUtf8 => "glFinish"u8;
        public static ReadOnlySpan<byte> FlushUtf8 => "glFlush"u8;
        public static ReadOnlySpan<byte> FogxUtf8 => "glFogx"u8;
        public static ReadOnlySpan<byte> FogxvUtf8 => "glFogxv"u8;
        public static ReadOnlySpan<byte> FrontFaceUtf8 => "glFrontFace"u8;
        public static ReadOnlySpan<byte> FrustumxUtf8 => "glFrustumx"u8;
        public static ReadOnlySpan<byte> GetBooleanvUtf8 => "glGetBooleanv"u8;
        public static ReadOnlySpan<byte> GetBufferParameterivUtf8 => "glGetBufferParameteriv"u8;
        public static ReadOnlySpan<byte> GetClipPlanexUtf8 => "glGetClipPlanex"u8;
        public static ReadOnlySpan<byte> GenBuffersUtf8 => "glGenBuffers"u8;
        public static ReadOnlySpan<byte> GenTexturesUtf8 => "glGenTextures"u8;
        public static ReadOnlySpan<byte> GetErrorUtf8 => "glGetError"u8;
        public static ReadOnlySpan<byte> GetFixedvUtf8 => "glGetFixedv"u8;
        public static ReadOnlySpan<byte> GetIntegervUtf8 => "glGetIntegerv"u8;
        public static ReadOnlySpan<byte> GetLightxvUtf8 => "glGetLightxv"u8;
        public static ReadOnlySpan<byte> GetMaterialxvUtf8 => "glGetMaterialxv"u8;
        public static ReadOnlySpan<byte> GetPointervUtf8 => "glGetPointerv"u8;
        public static ReadOnlySpan<byte> GetStringUtf8 => "glGetString"u8;
        public static ReadOnlySpan<byte> GetTexEnvivUtf8 => "glGetTexEnviv"u8;
        public static ReadOnlySpan<byte> GetTexEnvxvUtf8 => "glGetTexEnvxv"u8;
        public static ReadOnlySpan<byte> GetTexParameterivUtf8 => "glGetTexParameteriv"u8;
        public static ReadOnlySpan<byte> GetTexParameterxvUtf8 => "glGetTexParameterxv"u8;
        public static ReadOnlySpan<byte> HintUtf8 => "glHint"u8;
        public static ReadOnlySpan<byte> IsBufferUtf8 => "glIsBuffer"u8;
        public static ReadOnlySpan<byte> IsEnabledUtf8 => "glIsEnabled"u8;
        public static ReadOnlySpan<byte> IsTextureUtf8 => "glIsTexture"u8;
        public static ReadOnlySpan<byte> LightModelxUtf8 => "glLightModelx"u8;
        public static ReadOnlySpan<byte> LightModelxvUtf8 => "glLightModelxv"u8;
        public static ReadOnlySpan<byte> LightxUtf8 => "glLightx"u8;
        public static ReadOnlySpan<byte> LightxvUtf8 => "glLightxv"u8;
        public static ReadOnlySpan<byte> LineWidthxUtf8 => "glLineWidthx"u8;
        public static ReadOnlySpan<byte> LoadIdentityUtf8 => "glLoadIdentity"u8;
        public static ReadOnlySpan<byte> LoadMatrixxUtf8 => "glLoadMatrixx"u8;
        public static ReadOnlySpan<byte> LogicOpUtf8 => "glLogicOp"u8;
        public static ReadOnlySpan<byte> MaterialxUtf8 => "glMaterialx"u8;
        public static ReadOnlySpan<byte> MaterialxvUtf8 => "glMaterialxv"u8;
        public static ReadOnlySpan<byte> MatrixModeUtf8 => "glMatrixMode"u8;
        public static ReadOnlySpan<byte> MultMatrixxUtf8 => "glMultMatrixx"u8;
        public static ReadOnlySpan<byte> MultiTexCoord4xUtf8 => "glMultiTexCoord4x"u8;
        public static ReadOnlySpan<byte> Normal3xUtf8 => "glNormal3x"u8;
        public static ReadOnlySpan<byte> NormalPointerUtf8 => "glNormalPointer"u8;
        public static ReadOnlySpan<byte> OrthoxUtf8 => "glOrthox"u8;
        public static ReadOnlySpan<byte> PixelStoreiUtf8 => "glPixelStorei"u8;
        public static ReadOnlySpan<byte> PointParameterxUtf8 => "glPointParameterx"u8;
        public static ReadOnlySpan<byte> PointParameterxvUtf8 => "glPointParameterxv"u8;
        public static ReadOnlySpan<byte> PointSizexUtf8 => "glPointSizex"u8;
        public static ReadOnlySpan<byte> PolygonOffsetxUtf8 => "glPolygonOffsetx"u8;
        public static ReadOnlySpan<byte> PopMatrixUtf8 => "glPopMatrix"u8;
        public static ReadOnlySpan<byte> PushMatrixUtf8 => "glPushMatrix"u8;
        public static ReadOnlySpan<byte> ReadPixelsUtf8 => "glReadPixels"u8;
        public static ReadOnlySpan<byte> RotatexUtf8 => "glRotatex"u8;
        public static ReadOnlySpan<byte> SampleCoverageUtf8 => "glSampleCoverage"u8;
        public static ReadOnlySpan<byte> SampleCoveragexUtf8 => "glSampleCoveragex"u8;
        public static ReadOnlySpan<byte> ScalexUtf8 => "glScalex"u8;
        public static ReadOnlySpan<byte> ScissorUtf8 => "glScissor"u8;
        public static ReadOnlySpan<byte> ShadeModelUtf8 => "glShadeModel"u8;
        public static ReadOnlySpan<byte> StencilFuncUtf8 => "glStencilFunc"u8;
        public static ReadOnlySpan<byte> StencilMaskUtf8 => "glStencilMask"u8;
        public static ReadOnlySpan<byte> StencilOpUtf8 => "glStencilOp"u8;
        public static ReadOnlySpan<byte> TexCoordPointerUtf8 => "glTexCoordPointer"u8;
        public static ReadOnlySpan<byte> TexEnviUtf8 => "glTexEnvi"u8;
        public static ReadOnlySpan<byte> TexEnvxUtf8 => "glTexEnvx"u8;
        public static ReadOnlySpan<byte> TexEnvivUtf8 => "glTexEnviv"u8;
        public static ReadOnlySpan<byte> TexEnvxvUtf8 => "glTexEnvxv"u8;
        public static ReadOnlySpan<byte> TexImage2DUtf8 => "glTexImage2D"u8;
        public static ReadOnlySpan<byte> TexParameteriUtf8 => "glTexParameteri"u8;
        public static ReadOnlySpan<byte> TexParameterxUtf8 => "glTexParameterx"u8;
        public static ReadOnlySpan<byte> TexParameterivUtf8 => "glTexParameteriv"u8;
        public static ReadOnlySpan<byte> TexParameterxvUtf8 => "glTexParameterxv"u8;
        public static ReadOnlySpan<byte> TexSubImage2DUtf8 => "glTexSubImage2D"u8;
        public static ReadOnlySpan<byte> TranslatexUtf8 => "glTranslatex"u8;
        public static ReadOnlySpan<byte> VertexPointerUtf8 => "glVertexPointer"u8;
        public static ReadOnlySpan<byte> ViewportUtf8 => "glViewport"u8;

        private static ReadOnlySpan<byte> OpenGLESCMPrefix => "OpenGL ES-CM"u8;
        private static ReadOnlySpan<byte> OpenGLESCXPrefix => "OpenGL ES-CX"u8;
        private static ReadOnlySpan<byte> OpenGLESPrefix => "OpenGL ES"u8;
        private static ReadOnlySpan<byte> OpenGLSCPrefix => "OpenGL SC"u8;

        private static bool TryParseVersion(ReadOnlySpan<byte> value, out ushort major, out ushort minor, out bool isEmbedded)
        {
            if(value.StartsWith(OpenGLESCMPrefix))
            {
                value = value[(OpenGLESCMPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLESCXPrefix))
            {
                value = value[(OpenGLESCXPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLESPrefix))
            {
                value = value[(OpenGLESPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else if(value.StartsWith(OpenGLSCPrefix))
            {
                value = value[(OpenGLSCPrefix.Length + 1)..];
                isEmbedded = true;
            }
            else
            {
                isEmbedded = false;
            }

            return TryParseVersion(value, out major, out minor);
        }

        private static bool TryParseVersion(ReadOnlySpan<byte> value, out ushort major, out ushort minor)
        {
            var dotIndex = value.IndexOf((byte)'.');
            var spaceIndex = value.IndexOf((byte)' ');

            if(dotIndex == -1)
            {
                (major, minor) = (default, default);
                return false;
            }

            var fromFirstDot = value[(dotIndex + 1)..];
            var nextDot = fromFirstDot.IndexOf((byte)'.');
            var lastIndex = nextDot != -1 ? nextDot : (spaceIndex != -1 ? spaceIndex : fromFirstDot.Length);

            if(Utf8Parser.TryParse(value[..dotIndex], out major, out _) && Utf8Parser.TryParse(fromFirstDot[..lastIndex], out minor, out _))
                return true;

            major = minor = 0;
            return false;
        }
    }

    public readonly struct __GLsync;
    public readonly struct _cl_context;
    public readonly struct _cl_event;
    public enum SpecialNumbers : uint
    {
        VersionEsCl10 = 0x1,
        VersionEsCm11 = 0x1,
        VersionEsCl11 = 0x1,
        False = 0x0,
        True = 0x1,
        Zero = 0x0,
        One = 0x1,
        NoError = 0x0,
    }
    public enum AttribMask : uint
    {
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
        ColorBufferBit = 0x4000,
    }
    public enum ClearBufferMask : uint
    {
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
        ColorBufferBit = 0x4000,
    }
    public enum Boolean : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum VertexShaderWriteMaskEXT : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum ClampColorModeARB : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum PrimitiveType : uint
    {
        Points = 0x0,
        Lines = 0x1,
        LineLoop = 0x2,
        LineStrip = 0x3,
        Triangles = 0x4,
        TriangleStrip = 0x5,
        TriangleFan = 0x6,
    }
    public enum StencilFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum IndexFunctionEXT : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum AlphaFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum DepthFunction : uint
    {
        Never = 0x200,
        Less = 0x201,
        Equal = 0x202,
        Lequal = 0x203,
        Greater = 0x204,
        Notequal = 0x205,
        Gequal = 0x206,
        Always = 0x207,
    }
    public enum TextureSwizzle : uint
    {
        Zero = 0x0,
        One = 0x1,
        Alpha = 0x1906,
    }
    public enum StencilOp : uint
    {
        Zero = 0x0,
        Invert = 0x150A,
        Keep = 0x1E00,
        Replace = 0x1E01,
        Incr = 0x1E02,
        Decr = 0x1E03,
    }
    public enum BlendingFactor : uint
    {
        Zero = 0x0,
        One = 0x1,
        SrcColor = 0x300,
        OneMinusSrcColor = 0x301,
        SrcAlpha = 0x302,
        OneMinusSrcAlpha = 0x303,
        DstAlpha = 0x304,
        OneMinusDstAlpha = 0x305,
        DstColor = 0x306,
        OneMinusDstColor = 0x307,
        SrcAlphaSaturate = 0x308,
        Src1Alpha = 0x8589,
    }
    public enum FragmentShaderGenericSourceATI : uint
    {
        Zero = 0x0,
        One = 0x1,
        PrimaryColor = 0x8577,
    }
    public enum GetPName : uint
    {
        ClipPlane0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipPlane5 = 0x3005,
        Fog = 0xB60,
        Lighting = 0xB50,
        Texture2D = 0xDE1,
        CullFace = 0xB44,
        AlphaTest = 0xBC0,
        Blend = 0xBE2,
        ColorLogicOp = 0xBF2,
        Dither = 0xBD0,
        StencilTest = 0xB90,
        DepthTest = 0xB71,
        PointSmooth = 0xB10,
        LineSmooth = 0xB20,
        ScissorTest = 0xC11,
        ColorMaterial = 0xB57,
        Normalize = 0xBA1,
        VertexArray = 0x8074,
        NormalArray = 0x8075,
        ColorArray = 0x8076,
        TextureCoordArray = 0x8078,
        FogDensity = 0xB62,
        FogStart = 0xB63,
        FogEnd = 0xB64,
        FogMode = 0xB65,
        FogColor = 0xB66,
        CurrentColor = 0xB00,
        CurrentNormal = 0xB02,
        CurrentTextureCoords = 0xB03,
        PointSize = 0xB11,
        PointSizeMin = 0x8126,
        PointSizeMax = 0x8127,
        PointFadeThresholdSize = 0x8128,
        PointDistanceAttenuation = 0x8129,
        SmoothPointSizeRange = 0xB12,
        LineWidth = 0xB21,
        SmoothLineWidthRange = 0xB22,
        AliasedPointSizeRange = 0x846D,
        AliasedLineWidthRange = 0x846E,
        CullFaceMode = 0xB45,
        FrontFace = 0xB46,
        ShadeModel = 0xB54,
        DepthRange = 0xB70,
        DepthWritemask = 0xB72,
        DepthClearValue = 0xB73,
        DepthFunc = 0xB74,
        StencilClearValue = 0xB91,
        StencilFunc = 0xB92,
        StencilValueMask = 0xB93,
        StencilFail = 0xB94,
        StencilPassDepthFail = 0xB95,
        StencilPassDepthPass = 0xB96,
        StencilRef = 0xB97,
        StencilWritemask = 0xB98,
        MatrixMode = 0xBA0,
        Viewport = 0xBA2,
        ModelviewStackDepth = 0xBA3,
        ProjectionStackDepth = 0xBA4,
        TextureStackDepth = 0xBA5,
        ModelviewMatrix = 0xBA6,
        ProjectionMatrix = 0xBA7,
        TextureMatrix = 0xBA8,
        AlphaTestFunc = 0xBC1,
        AlphaTestRef = 0xBC2,
        BlendDst = 0xBE0,
        BlendSrc = 0xBE1,
        LogicOpMode = 0xBF0,
        ScissorBox = 0xC10,
        ColorClearValue = 0xC22,
        ColorWritemask = 0xC23,
        MaxLights = 0xD31,
        MaxClipPlanes = 0xD32,
        MaxTextureSize = 0xD33,
        MaxModelviewStackDepth = 0xD36,
        MaxProjectionStackDepth = 0xD38,
        MaxTextureStackDepth = 0xD39,
        MaxViewportDims = 0xD3A,
        SubpixelBits = 0xD50,
        RedBits = 0xD52,
        GreenBits = 0xD53,
        BlueBits = 0xD54,
        AlphaBits = 0xD55,
        DepthBits = 0xD56,
        StencilBits = 0xD57,
        PolygonOffsetUnits = 0x2A00,
        PolygonOffsetFill = 0x8037,
        PolygonOffsetFactor = 0x8038,
        TextureBinding2D = 0x8069,
        VertexArraySize = 0x807A,
        VertexArrayType = 0x807B,
        VertexArrayStride = 0x807C,
        NormalArrayType = 0x807E,
        NormalArrayStride = 0x807F,
        ColorArraySize = 0x8081,
        ColorArrayType = 0x8082,
        ColorArrayStride = 0x8083,
        TextureCoordArraySize = 0x8088,
        TextureCoordArrayType = 0x8089,
        TextureCoordArrayStride = 0x808A,
        SampleBuffers = 0x80A8,
        Samples = 0x80A9,
        SampleCoverageValue = 0x80AA,
        SampleCoverageInvert = 0x80AB,
        NumCompressedTextureFormats = 0x86A2,
        CompressedTextureFormats = 0x86A3,
        PerspectiveCorrectionHint = 0xC50,
        PointSmoothHint = 0xC51,
        LineSmoothHint = 0xC52,
        FogHint = 0xC54,
        LightModelAmbient = 0xB53,
        LightModelTwoSide = 0xB52,
        UnpackAlignment = 0xCF5,
        PackAlignment = 0xD05,
        ActiveTexture = 0x84E0,
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,
        ArrayBufferBinding = 0x8894,
        ElementArrayBufferBinding = 0x8895,
        AlphaScale = 0xD1C,
    }
    public enum EnableCap : uint
    {
        ClipPlane0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipPlane5 = 0x3005,
        Fog = 0xB60,
        Lighting = 0xB50,
        Texture2D = 0xDE1,
        CullFace = 0xB44,
        AlphaTest = 0xBC0,
        Blend = 0xBE2,
        ColorLogicOp = 0xBF2,
        Dither = 0xBD0,
        StencilTest = 0xB90,
        DepthTest = 0xB71,
        PointSmooth = 0xB10,
        LineSmooth = 0xB20,
        ScissorTest = 0xC11,
        ColorMaterial = 0xB57,
        Normalize = 0xBA1,
        VertexArray = 0x8074,
        NormalArray = 0x8075,
        ColorArray = 0x8076,
        TextureCoordArray = 0x8078,
        Multisample = 0x809D,
        SampleAlphaToCoverage = 0x809E,
        SampleAlphaToOne = 0x809F,
        SampleCoverage = 0x80A0,
        PolygonOffsetFill = 0x8037,
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,
    }
    public enum ClipPlaneName : uint
    {
        Plane0 = 0x3000,
        Plane1 = 0x3001,
        Plane2 = 0x3002,
        Plane3 = 0x3003,
        Plane4 = 0x3004,
        Plane5 = 0x3005,
    }
    public enum DrawBufferMode : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
    }
    public enum ReadBufferMode : uint
    {
        Front = 0x404,
        Back = 0x405,
    }
    public enum ColorBuffer : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
    }
    public enum TriangleFace : uint
    {
        Front = 0x404,
        Back = 0x405,
        FrontAndBack = 0x408,
    }
    public enum CopyImageSubDataTarget : uint
    {
        Texture2D = 0xDE1,
    }
    public enum TextureTarget : uint
    {
        N2D = 0xDE1,
    }
    public enum TextureEnvMode : uint
    {
        Blend = 0xBE2,
        Replace = 0x1E01,
        Modulate = 0x2100,
        Decal = 0x2101,
        Add = 0x104,
        Combine = 0x8570,
    }
    public enum Ungrouped : uint
    {
        RescaleNormal = 0x803A,
        MaxTextureUnits = 0x84E2,
        ClientActiveTexture = 0x84E1,
        VertexArrayBufferBinding = 0x8896,
        NormalArrayBufferBinding = 0x8897,
        ColorArrayBufferBinding = 0x8898,
        TextureCoordArrayBufferBinding = 0x889A,
        Subtract = 0x84E7,
        Dot3Rgb = 0x86AE,
        Dot3Rgba = 0x86AF,
    }
    public enum ObjectIdentifier : uint
    {
        VertexArray = 0x8074,
        Texture = 0x1702,
    }
    public enum GraphicsResetStatus : uint
    {
        NoError = 0x0,
    }
    public enum ErrorCode : uint
    {
        NoError = 0x0,
        InvalidEnum = 0x500,
        InvalidValue = 0x501,
        InvalidOperation = 0x502,
        StackOverflow = 0x503,
        StackUnderflow = 0x504,
        OutOfMemory = 0x505,
    }
    public enum FogMode : uint
    {
        Exp = 0x800,
        Exp2 = 0x801,
        Linear = 0x2601,
    }
    public enum FogPName : uint
    {
        Density = 0xB62,
        Start = 0xB63,
        End = 0xB64,
        Mode = 0xB65,
    }
    public enum FogParameter : uint
    {
        Density = 0xB62,
        Start = 0xB63,
        End = 0xB64,
        Mode = 0xB65,
        Color = 0xB66,
    }
    public enum FrontFaceDirection : uint
    {
        Cw = 0x900,
        Ccw = 0x901,
    }
    public enum VertexShaderTextureUnitParameter : uint
    {
        CurrentTextureCoords = 0xB03,
        TextureMatrix = 0xBA8,
    }
    public enum PointParameterNameARB : uint
    {
        SizeMin = 0x8126,
        SizeMax = 0x8127,
        FadeThresholdSize = 0x8128,
        DistanceAttenuation = 0x8129,
    }
    public enum GetPointervPName : uint
    {
        VertexArrayPointer = 0x808E,
        NormalArrayPointer = 0x808F,
        ColorArrayPointer = 0x8090,
        TextureCoordArrayPointer = 0x8092,
    }
    public enum GetFramebufferParameter : uint
    {
        SampleBuffers = 0x80A8,
        Samples = 0x80A9,
    }
    public enum InternalFormatPName : uint
    {
        Samples = 0x80A9,
        GenerateMipmap = 0x8191,
    }
    public enum DebugSeverity : uint
    {
        DontCare = 0x1100,
    }
    public enum HintMode : uint
    {
        DontCare = 0x1100,
        Fastest = 0x1101,
        Nicest = 0x1102,
    }
    public enum DebugSource : uint
    {
        DontCare = 0x1100,
    }
    public enum DebugType : uint
    {
        DontCare = 0x1100,
    }
    public enum HintTarget : uint
    {
        PerspectiveCorrectionHint = 0xC50,
        PointSmoothHint = 0xC51,
        LineSmoothHint = 0xC52,
        FogHint = 0xC54,
        GenerateMipmapHint = 0x8192,
    }
    public enum LightModelParameter : uint
    {
        Ambient = 0xB53,
        TwoSide = 0xB52,
    }
    public enum LightParameter : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Position = 0x1203,
        SpotDirection = 0x1204,
        SpotExponent = 0x1205,
        SpotCutoff = 0x1206,
        ConstantAttenuation = 0x1207,
        LinearAttenuation = 0x1208,
        QuadraticAttenuation = 0x1209,
    }
    public enum MaterialParameter : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Emission = 0x1600,
        Shininess = 0x1601,
        AmbientAndDiffuse = 0x1602,
    }
    public enum FragmentLightParameterSGIX : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Position = 0x1203,
        SpotDirection = 0x1204,
        SpotExponent = 0x1205,
        SpotCutoff = 0x1206,
        ConstantAttenuation = 0x1207,
        LinearAttenuation = 0x1208,
        QuadraticAttenuation = 0x1209,
    }
    public enum ColorMaterialParameter : uint
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Emission = 0x1600,
        AmbientAndDiffuse = 0x1602,
    }
    public enum VertexAttribIType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
    }
    public enum WeightPointerTypeARB : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Float = 0x1406,
    }
    public enum TangentPointerTypeEXT : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum BinormalPointerTypeEXT : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum ColorPointerType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Float = 0x1406,
    }
    public enum ListNameType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Float = 0x1406,
    }
    public enum NormalPointerType : uint
    {
        Byte = 0x1400,
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum PixelType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Float = 0x1406,
        UnsignedShort4444 = 0x8033,
        UnsignedShort5551 = 0x8034,
        UnsignedShort565 = 0x8363,
    }
    public enum VertexAttribType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Float = 0x1406,
        Fixed = 0x140C,
    }
    public enum VertexAttribPointerType : uint
    {
        Byte = 0x1400,
        UnsignedByte = 0x1401,
        Short = 0x1402,
        UnsignedShort = 0x1403,
        Float = 0x1406,
        Fixed = 0x140C,
    }
    public enum ScalarType : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
    }
    public enum ReplacementCodeTypeSUN : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
    }
    public enum ElementPointerTypeATI : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
    }
    public enum MatrixIndexPointerTypeARB : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
    }
    public enum DrawElementsType : uint
    {
        Byte = 0x1401,
        Short = 0x1403,
    }
    public enum SecondaryColorPointerTypeIBM : uint
    {
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum IndexPointerType : uint
    {
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum TexCoordPointerType : uint
    {
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum VertexPointerType : uint
    {
        Short = 0x1402,
        Float = 0x1406,
    }
    public enum PixelFormat : uint
    {
        UnsignedShort = 0x1403,
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
    }
    public enum AttributeType : uint
    {
        Float = 0x1406,
    }
    public enum UniformType : uint
    {
        Float = 0x1406,
    }
    public enum MapTypeNV : uint
    {
        Float = 0x1406,
    }
    public enum VertexWeightPointerTypeEXT : uint
    {
        Float = 0x1406,
    }
    public enum FogCoordinatePointerType : uint
    {
        Float = 0x1406,
    }
    public enum FogPointerTypeEXT : uint
    {
        Float = 0x1406,
    }
    public enum FogPointerTypeIBM : uint
    {
        Float = 0x1406,
    }
    public enum LogicOp : uint
    {
        Clear = 0x1500,
        And = 0x1501,
        AndReverse = 0x1502,
        Copy = 0x1503,
        AndInverted = 0x1504,
        Noop = 0x1505,
        Xor = 0x1506,
        Or = 0x1507,
        Nor = 0x1508,
        Equiv = 0x1509,
        Invert = 0x150A,
        OrReverse = 0x150B,
        CopyInverted = 0x150C,
        OrInverted = 0x150D,
        Nand = 0x150E,
        Set = 0x150F,
    }
    public enum PathFillMode : uint
    {
        Invert = 0x150A,
    }
    public enum MatrixMode : uint
    {
        Modelview = 0x1700,
        Projection = 0x1701,
        Texture = 0x1702,
    }
    public enum FragmentShaderValueRepATI : uint
    {
        Alpha = 0x1906,
    }
    public enum PathColorFormat : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
    }
    public enum PixelTexGenModeSGIX : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
    }
    public enum CombinerComponentUsageNV : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
    }
    public enum CombinerPortionNV : uint
    {
        Alpha = 0x1906,
        Rgb = 0x1907,
    }
    public enum InternalFormat : uint
    {
        Rgb = 0x1907,
        Rgba = 0x1908,
    }
    public enum PixelStoreParameter : uint
    {
        UnpackAlignment = 0xCF5,
        PackAlignment = 0xD05,
    }
    public enum ShadingModel : uint
    {
        Flat = 0x1D00,
        Smooth = 0x1D01,
    }
    public enum LightEnvModeSGIX : uint
    {
        Replace = 0x1E01,
        Modulate = 0x2100,
        Add = 0x104,
    }
    public enum StringName : uint
    {
        Vendor = 0x1F00,
        Renderer = 0x1F01,
        Version = 0x1F02,
        Extensions = 0x1F03,
    }
    public enum AccumOp : uint
    {
        Add = 0x104,
    }
    public enum TextureEnvParameter : uint
    {
        TextureEnvMode = 0x2200,
        TextureEnvColor = 0x2201,
        Combine = 0x8570,
        CombineRgb = 0x8571,
        CombineAlpha = 0x8572,
        RgbScale = 0x8573,
        AddSigned = 0x8574,
        Interpolate = 0x8575,
        Constant = 0x8576,
        PrimaryColor = 0x8577,
        Previous = 0x8578,
        Operand0Rgb = 0x8590,
        Operand1Rgb = 0x8591,
        Operand2Rgb = 0x8592,
        Operand0Alpha = 0x8598,
        Operand1Alpha = 0x8599,
        Operand2Alpha = 0x859A,
        AlphaScale = 0xD1C,
        Src0Rgb = 0x8580,
        Src1Rgb = 0x8581,
        Src2Rgb = 0x8582,
        Src0Alpha = 0x8588,
        Src1Alpha = 0x8589,
        Src2Alpha = 0x858A,
    }
    public enum TextureEnvTarget : uint
    {
        TextureEnv = 0x2300,
    }
    public enum BlitFramebufferFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }
    public enum TextureMagFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }
    public enum TextureMinFilter : uint
    {
        Nearest = 0x2600,
        Linear = 0x2601,
        NearestMipmapNearest = 0x2700,
        LinearMipmapNearest = 0x2701,
        NearestMipmapLinear = 0x2702,
        LinearMipmapLinear = 0x2703,
    }
    public enum TextureParameterName : uint
    {
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        GenerateMipmap = 0x8191,
    }
    public enum GetTextureParameter : uint
    {
        MagFilter = 0x2800,
        MinFilter = 0x2801,
        WrapS = 0x2802,
        WrapT = 0x2803,
    }
    public enum SamplerParameterI : uint
    {
        MagFilter = 0x2800,
        MinFilter = 0x2801,
        WrapS = 0x2802,
        WrapT = 0x2803,
    }
    public enum TextureUnit : uint
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }
    public enum FragmentShaderTextureSourceATI : uint
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }
    public enum TextureWrapMode : uint
    {
        Repeat = 0x2901,
        ClampToEdge = 0x812F,
    }
    public enum LightName : uint
    {
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,
    }
    public enum BufferTargetARB : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
    }
    public enum CopyBufferSubDataTarget : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
    }
    public enum BufferStorageTarget : uint
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
    }
    public enum VertexBufferObjectUsage : uint
    {
        StaticDraw = 0x88E4,
        DynamicDraw = 0x88E8,
    }
    public enum BufferUsageARB : uint
    {
        StaticDraw = 0x88E4,
        DynamicDraw = 0x88E8,
    }
    public enum BufferPNameARB : uint
    {
        Size = 0x8764,
        Usage = 0x8765,
    }
    public enum PathGenMode : uint
    {
        Constant = 0x8576,
    }
    public enum PathColor : uint
    {
        Primary = 0x8577,
    }
    public enum PixelTransferParameter : uint
    {
        AlphaScale = 0xD1C,
    }
}
