using System.Buffers;
using System.Buffers.Text;
using System.Runtime.InteropServices;

namespace Rena.Interop.OpenGL;

public unsafe partial class GLES2
{
    public static ReadOnlySpan<byte> glActiveTextureFunctionName => "glActiveTexture"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> ActiveTexture;
    public static ReadOnlySpan<byte> glAttachShaderFunctionName => "glAttachShader"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> AttachShader;
    public static ReadOnlySpan<byte> glBindAttribLocationFunctionName => "glBindAttribLocation"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLchar */ byte*, /* void */ void> BindAttribLocation;
    public static ReadOnlySpan<byte> glBindBufferFunctionName => "glBindBuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> BindBuffer;
    public static ReadOnlySpan<byte> glBindFramebufferFunctionName => "glBindFramebuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> BindFramebuffer;
    public static ReadOnlySpan<byte> glBindRenderbufferFunctionName => "glBindRenderbuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> BindRenderbuffer;
    public static ReadOnlySpan<byte> glBindTextureFunctionName => "glBindTexture"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> BindTexture;
    public static ReadOnlySpan<byte> glBlendColorFunctionName => "glBlendColor"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> BlendColor;
    public static ReadOnlySpan<byte> glBlendEquationFunctionName => "glBlendEquation"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> BlendEquation;
    public static ReadOnlySpan<byte> glBlendEquationSeparateFunctionName => "glBlendEquationSeparate"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void> BlendEquationSeparate;
    public static ReadOnlySpan<byte> glBlendFuncFunctionName => "glBlendFunc"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void> BlendFunc;
    public static ReadOnlySpan<byte> glBlendFuncSeparateFunctionName => "glBlendFuncSeparate"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void> BlendFuncSeparate;
    public static ReadOnlySpan<byte> glBufferDataFunctionName => "glBufferData"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizeiptr */ nint, /* void */ void*, /* GLenum */ int, /* void */ void> BufferData;
    public static ReadOnlySpan<byte> glBufferSubDataFunctionName => "glBufferSubData"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void*, /* void */ void> BufferSubData;
    public static ReadOnlySpan<byte> glCheckFramebufferStatusFunctionName => "glCheckFramebufferStatus"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int> CheckFramebufferStatus;
    public static ReadOnlySpan<byte> glClearFunctionName => "glClear"u8;
    public readonly delegate* unmanaged</* GLbitfield */ int, /* void */ void> Clear;
    public static ReadOnlySpan<byte> glClearColorFunctionName => "glClearColor"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> ClearColor;
    public static ReadOnlySpan<byte> glClearDepthfFunctionName => "glClearDepthf"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* void */ void> ClearDepthf;
    public static ReadOnlySpan<byte> glClearStencilFunctionName => "glClearStencil"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* void */ void> ClearStencil;
    public static ReadOnlySpan<byte> glColorMaskFunctionName => "glColorMask"u8;
    public readonly delegate* unmanaged</* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* void */ void> ColorMask;
    public static ReadOnlySpan<byte> glCompileShaderFunctionName => "glCompileShader"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> CompileShader;
    public static ReadOnlySpan<byte> glCompressedTexImage2DFunctionName => "glCompressedTexImage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> CompressedTexImage2D;
    public static ReadOnlySpan<byte> glCompressedTexSubImage2DFunctionName => "glCompressedTexSubImage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> CompressedTexSubImage2D;
    public static ReadOnlySpan<byte> glCopyTexImage2DFunctionName => "glCopyTexImage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* void */ void> CopyTexImage2D;
    public static ReadOnlySpan<byte> glCopyTexSubImage2DFunctionName => "glCopyTexSubImage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> CopyTexSubImage2D;
    public static ReadOnlySpan<byte> glCreateProgramFunctionName => "glCreateProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint> CreateProgram;
    public static ReadOnlySpan<byte> glCreateShaderFunctionName => "glCreateShader"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint> CreateShader;
    public static ReadOnlySpan<byte> glCullFaceFunctionName => "glCullFace"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> CullFace;
    public static ReadOnlySpan<byte> glDeleteBuffersFunctionName => "glDeleteBuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteBuffers;
    public static ReadOnlySpan<byte> glDeleteFramebuffersFunctionName => "glDeleteFramebuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteFramebuffers;
    public static ReadOnlySpan<byte> glDeleteProgramFunctionName => "glDeleteProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> DeleteProgram;
    public static ReadOnlySpan<byte> glDeleteRenderbuffersFunctionName => "glDeleteRenderbuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteRenderbuffers;
    public static ReadOnlySpan<byte> glDeleteShaderFunctionName => "glDeleteShader"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> DeleteShader;
    public static ReadOnlySpan<byte> glDeleteTexturesFunctionName => "glDeleteTextures"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteTextures;
    public static ReadOnlySpan<byte> glDepthFuncFunctionName => "glDepthFunc"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> DepthFunc;
    public static ReadOnlySpan<byte> glDepthMaskFunctionName => "glDepthMask"u8;
    public readonly delegate* unmanaged</* GLboolean */ int, /* void */ void> DepthMask;
    public static ReadOnlySpan<byte> glDepthRangefFunctionName => "glDepthRangef"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void> DepthRangef;
    public static ReadOnlySpan<byte> glDetachShaderFunctionName => "glDetachShader"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> DetachShader;
    public static ReadOnlySpan<byte> glDisableFunctionName => "glDisable"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> Disable;
    public static ReadOnlySpan<byte> glDisableVertexAttribArrayFunctionName => "glDisableVertexAttribArray"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> DisableVertexAttribArray;
    public static ReadOnlySpan<byte> glDrawArraysFunctionName => "glDrawArrays"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void> DrawArrays;
    public static ReadOnlySpan<byte> glDrawElementsFunctionName => "glDrawElements"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* void */ void> DrawElements;
    public static ReadOnlySpan<byte> glEnableFunctionName => "glEnable"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> Enable;
    public static ReadOnlySpan<byte> glEnableVertexAttribArrayFunctionName => "glEnableVertexAttribArray"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> EnableVertexAttribArray;
    public static ReadOnlySpan<byte> glFinishFunctionName => "glFinish"u8;
    public readonly delegate* unmanaged</* void */ void> Finish;
    public static ReadOnlySpan<byte> glFlushFunctionName => "glFlush"u8;
    public readonly delegate* unmanaged</* void */ void> Flush;
    public static ReadOnlySpan<byte> glFramebufferRenderbufferFunctionName => "glFramebufferRenderbuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void> FramebufferRenderbuffer;
    public static ReadOnlySpan<byte> glFramebufferTexture2DFunctionName => "glFramebufferTexture2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* void */ void> FramebufferTexture2D;
    public static ReadOnlySpan<byte> glFrontFaceFunctionName => "glFrontFace"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> FrontFace;
    public static ReadOnlySpan<byte> glGenBuffersFunctionName => "glGenBuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenBuffers;
    public static ReadOnlySpan<byte> glGenerateMipmapFunctionName => "glGenerateMipmap"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> GenerateMipmap;
    public static ReadOnlySpan<byte> glGenFramebuffersFunctionName => "glGenFramebuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenFramebuffers;
    public static ReadOnlySpan<byte> glGenRenderbuffersFunctionName => "glGenRenderbuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenRenderbuffers;
    public static ReadOnlySpan<byte> glGenTexturesFunctionName => "glGenTextures"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenTextures;
    public static ReadOnlySpan<byte> glGetActiveAttribFunctionName => "glGetActiveAttrib"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* GLenum */ int*, /* GLchar */ byte*, /* void */ void> GetActiveAttrib;
    public static ReadOnlySpan<byte> glGetActiveUniformFunctionName => "glGetActiveUniform"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* GLenum */ int*, /* GLchar */ byte*, /* void */ void> GetActiveUniform;
    public static ReadOnlySpan<byte> glGetAttachedShadersFunctionName => "glGetAttachedShaders"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLuint */ uint*, /* void */ void> GetAttachedShaders;
    public static ReadOnlySpan<byte> glGetAttribLocationFunctionName => "glGetAttribLocation"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int> GetAttribLocation;
    public static ReadOnlySpan<byte> glGetBooleanvFunctionName => "glGetBooleanv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLboolean */ int*, /* void */ void> GetBooleanv;
    public static ReadOnlySpan<byte> glGetBufferParameterivFunctionName => "glGetBufferParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetBufferParameteriv;
    public static ReadOnlySpan<byte> glGetErrorFunctionName => "glGetError"u8;
    public readonly delegate* unmanaged</* GLenum */ int> GetError;
    public static ReadOnlySpan<byte> glGetFloatvFunctionName => "glGetFloatv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLfloat */ float*, /* void */ void> GetFloatv;
    public static ReadOnlySpan<byte> glGetFramebufferAttachmentParameterivFunctionName => "glGetFramebufferAttachmentParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetFramebufferAttachmentParameteriv;
    public static ReadOnlySpan<byte> glGetIntegervFunctionName => "glGetIntegerv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int*, /* void */ void> GetIntegerv;
    public static ReadOnlySpan<byte> glGetProgramivFunctionName => "glGetProgramiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetProgramiv;
    public static ReadOnlySpan<byte> glGetProgramInfoLogFunctionName => "glGetProgramInfoLog"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetProgramInfoLog;
    public static ReadOnlySpan<byte> glGetRenderbufferParameterivFunctionName => "glGetRenderbufferParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetRenderbufferParameteriv;
    public static ReadOnlySpan<byte> glGetShaderivFunctionName => "glGetShaderiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetShaderiv;
    public static ReadOnlySpan<byte> glGetShaderInfoLogFunctionName => "glGetShaderInfoLog"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetShaderInfoLog;
    public static ReadOnlySpan<byte> glGetShaderPrecisionFormatFunctionName => "glGetShaderPrecisionFormat"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* GLint */ int*, /* void */ void> GetShaderPrecisionFormat;
    public static ReadOnlySpan<byte> glGetShaderSourceFunctionName => "glGetShaderSource"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetShaderSource;
    public static ReadOnlySpan<byte> glGetStringFunctionName => "glGetString"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLubyte */ byte*> GetString;
    public static ReadOnlySpan<byte> glGetTexParameterfvFunctionName => "glGetTexParameterfv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void> GetTexParameterfv;
    public static ReadOnlySpan<byte> glGetTexParameterivFunctionName => "glGetTexParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetTexParameteriv;
    public static ReadOnlySpan<byte> glGetUniformfvFunctionName => "glGetUniformfv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float*, /* void */ void> GetUniformfv;
    public static ReadOnlySpan<byte> glGetUniformivFunctionName => "glGetUniformiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int*, /* void */ void> GetUniformiv;
    public static ReadOnlySpan<byte> glGetUniformLocationFunctionName => "glGetUniformLocation"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int> GetUniformLocation;
    public static ReadOnlySpan<byte> glGetVertexAttribfvFunctionName => "glGetVertexAttribfv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void> GetVertexAttribfv;
    public static ReadOnlySpan<byte> glGetVertexAttribivFunctionName => "glGetVertexAttribiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetVertexAttribiv;
    public static ReadOnlySpan<byte> glGetVertexAttribPointervFunctionName => "glGetVertexAttribPointerv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void**, /* void */ void> GetVertexAttribPointerv;
    public static ReadOnlySpan<byte> glHintFunctionName => "glHint"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void> Hint;
    public static ReadOnlySpan<byte> glIsBufferFunctionName => "glIsBuffer"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsBuffer;
    public static ReadOnlySpan<byte> glIsEnabledFunctionName => "glIsEnabled"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLboolean */ int> IsEnabled;
    public static ReadOnlySpan<byte> glIsFramebufferFunctionName => "glIsFramebuffer"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsFramebuffer;
    public static ReadOnlySpan<byte> glIsProgramFunctionName => "glIsProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsProgram;
    public static ReadOnlySpan<byte> glIsRenderbufferFunctionName => "glIsRenderbuffer"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsRenderbuffer;
    public static ReadOnlySpan<byte> glIsShaderFunctionName => "glIsShader"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsShader;
    public static ReadOnlySpan<byte> glIsTextureFunctionName => "glIsTexture"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsTexture;
    public static ReadOnlySpan<byte> glLineWidthFunctionName => "glLineWidth"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* void */ void> LineWidth;
    public static ReadOnlySpan<byte> glLinkProgramFunctionName => "glLinkProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> LinkProgram;
    public static ReadOnlySpan<byte> glPixelStoreiFunctionName => "glPixelStorei"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void> PixelStorei;
    public static ReadOnlySpan<byte> glPolygonOffsetFunctionName => "glPolygonOffset"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* void */ void> PolygonOffset;
    public static ReadOnlySpan<byte> glReadPixelsFunctionName => "glReadPixels"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void> ReadPixels;
    public static ReadOnlySpan<byte> glReleaseShaderCompilerFunctionName => "glReleaseShaderCompiler"u8;
    public readonly delegate* unmanaged</* void */ void> ReleaseShaderCompiler;
    public static ReadOnlySpan<byte> glRenderbufferStorageFunctionName => "glRenderbufferStorage"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> RenderbufferStorage;
    public static ReadOnlySpan<byte> glSampleCoverageFunctionName => "glSampleCoverage"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* GLboolean */ int, /* void */ void> SampleCoverage;
    public static ReadOnlySpan<byte> glScissorFunctionName => "glScissor"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> Scissor;
    public static ReadOnlySpan<byte> glShaderBinaryFunctionName => "glShaderBinary"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* void */ void> ShaderBinary;
    public static ReadOnlySpan<byte> glShaderSourceFunctionName => "glShaderSource"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte**, /* GLint */ int*, /* void */ void> ShaderSource;
    public static ReadOnlySpan<byte> glStencilFuncFunctionName => "glStencilFunc"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLuint */ uint, /* void */ void> StencilFunc;
    public static ReadOnlySpan<byte> glStencilFuncSeparateFunctionName => "glStencilFuncSeparate"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* GLuint */ uint, /* void */ void> StencilFuncSeparate;
    public static ReadOnlySpan<byte> glStencilMaskFunctionName => "glStencilMask"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> StencilMask;
    public static ReadOnlySpan<byte> glStencilMaskSeparateFunctionName => "glStencilMaskSeparate"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> StencilMaskSeparate;
    public static ReadOnlySpan<byte> glStencilOpFunctionName => "glStencilOp"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void> StencilOp;
    public static ReadOnlySpan<byte> glStencilOpSeparateFunctionName => "glStencilOpSeparate"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void> StencilOpSeparate;
    public static ReadOnlySpan<byte> glTexImage2DFunctionName => "glTexImage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void> TexImage2D;
    public static ReadOnlySpan<byte> glTexParameterfFunctionName => "glTexParameterf"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float, /* void */ void> TexParameterf;
    public static ReadOnlySpan<byte> glTexParameterfvFunctionName => "glTexParameterfv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void> TexParameterfv;
    public static ReadOnlySpan<byte> glTexParameteriFunctionName => "glTexParameteri"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void> TexParameteri;
    public static ReadOnlySpan<byte> glTexParameterivFunctionName => "glTexParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> TexParameteriv;
    public static ReadOnlySpan<byte> glTexSubImage2DFunctionName => "glTexSubImage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void> TexSubImage2D;
    public static ReadOnlySpan<byte> glUniform1fFunctionName => "glUniform1f"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* void */ void> Uniform1f;
    public static ReadOnlySpan<byte> glUniform1fvFunctionName => "glUniform1fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> Uniform1fv;
    public static ReadOnlySpan<byte> glUniform1iFunctionName => "glUniform1i"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* void */ void> Uniform1i;
    public static ReadOnlySpan<byte> glUniform1ivFunctionName => "glUniform1iv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> Uniform1iv;
    public static ReadOnlySpan<byte> glUniform2fFunctionName => "glUniform2f"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> Uniform2f;
    public static ReadOnlySpan<byte> glUniform2fvFunctionName => "glUniform2fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> Uniform2fv;
    public static ReadOnlySpan<byte> glUniform2iFunctionName => "glUniform2i"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> Uniform2i;
    public static ReadOnlySpan<byte> glUniform2ivFunctionName => "glUniform2iv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> Uniform2iv;
    public static ReadOnlySpan<byte> glUniform3fFunctionName => "glUniform3f"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> Uniform3f;
    public static ReadOnlySpan<byte> glUniform3fvFunctionName => "glUniform3fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> Uniform3fv;
    public static ReadOnlySpan<byte> glUniform3iFunctionName => "glUniform3i"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> Uniform3i;
    public static ReadOnlySpan<byte> glUniform3ivFunctionName => "glUniform3iv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> Uniform3iv;
    public static ReadOnlySpan<byte> glUniform4fFunctionName => "glUniform4f"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> Uniform4f;
    public static ReadOnlySpan<byte> glUniform4fvFunctionName => "glUniform4fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> Uniform4fv;
    public static ReadOnlySpan<byte> glUniform4iFunctionName => "glUniform4i"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> Uniform4i;
    public static ReadOnlySpan<byte> glUniform4ivFunctionName => "glUniform4iv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> Uniform4iv;
    public static ReadOnlySpan<byte> glUniformMatrix2fvFunctionName => "glUniformMatrix2fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix2fv;
    public static ReadOnlySpan<byte> glUniformMatrix3fvFunctionName => "glUniformMatrix3fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix3fv;
    public static ReadOnlySpan<byte> glUniformMatrix4fvFunctionName => "glUniformMatrix4fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix4fv;
    public static ReadOnlySpan<byte> glUseProgramFunctionName => "glUseProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> UseProgram;
    public static ReadOnlySpan<byte> glValidateProgramFunctionName => "glValidateProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> ValidateProgram;
    public static ReadOnlySpan<byte> glVertexAttrib1fFunctionName => "glVertexAttrib1f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* void */ void> VertexAttrib1f;
    public static ReadOnlySpan<byte> glVertexAttrib1fvFunctionName => "glVertexAttrib1fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void> VertexAttrib1fv;
    public static ReadOnlySpan<byte> glVertexAttrib2fFunctionName => "glVertexAttrib2f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> VertexAttrib2f;
    public static ReadOnlySpan<byte> glVertexAttrib2fvFunctionName => "glVertexAttrib2fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void> VertexAttrib2fv;
    public static ReadOnlySpan<byte> glVertexAttrib3fFunctionName => "glVertexAttrib3f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> VertexAttrib3f;
    public static ReadOnlySpan<byte> glVertexAttrib3fvFunctionName => "glVertexAttrib3fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void> VertexAttrib3fv;
    public static ReadOnlySpan<byte> glVertexAttrib4fFunctionName => "glVertexAttrib4f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> VertexAttrib4f;
    public static ReadOnlySpan<byte> glVertexAttrib4fvFunctionName => "glVertexAttrib4fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLfloat */ float*, /* void */ void> VertexAttrib4fv;
    public static ReadOnlySpan<byte> glVertexAttribPointerFunctionName => "glVertexAttribPointer"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLboolean */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> VertexAttribPointer;
    public static ReadOnlySpan<byte> glViewportFunctionName => "glViewport"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> Viewport;
    public static ReadOnlySpan<byte> glReadBufferFunctionName => "glReadBuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> ReadBuffer;
    public static ReadOnlySpan<byte> glDrawRangeElementsFunctionName => "glDrawRangeElements"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* void */ void> DrawRangeElements;
    public static ReadOnlySpan<byte> glTexImage3DFunctionName => "glTexImage3D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void> TexImage3D;
    public static ReadOnlySpan<byte> glTexSubImage3DFunctionName => "glTexSubImage3D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void> TexSubImage3D;
    public static ReadOnlySpan<byte> glCopyTexSubImage3DFunctionName => "glCopyTexSubImage3D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> CopyTexSubImage3D;
    public static ReadOnlySpan<byte> glCompressedTexImage3DFunctionName => "glCompressedTexImage3D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLint */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> CompressedTexImage3D;
    public static ReadOnlySpan<byte> glCompressedTexSubImage3DFunctionName => "glCompressedTexSubImage3D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> CompressedTexSubImage3D;
    public static ReadOnlySpan<byte> glGenQueriesFunctionName => "glGenQueries"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenQueries;
    public static ReadOnlySpan<byte> glDeleteQueriesFunctionName => "glDeleteQueries"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteQueries;
    public static ReadOnlySpan<byte> glIsQueryFunctionName => "glIsQuery"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsQuery;
    public static ReadOnlySpan<byte> glBeginQueryFunctionName => "glBeginQuery"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> BeginQuery;
    public static ReadOnlySpan<byte> glEndQueryFunctionName => "glEndQuery"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> EndQuery;
    public static ReadOnlySpan<byte> glGetQueryivFunctionName => "glGetQueryiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetQueryiv;
    public static ReadOnlySpan<byte> glGetQueryObjectuivFunctionName => "glGetQueryObjectuiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void> GetQueryObjectuiv;
    public static ReadOnlySpan<byte> glUnmapBufferFunctionName => "glUnmapBuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLboolean */ int> UnmapBuffer;
    public static ReadOnlySpan<byte> glGetBufferPointervFunctionName => "glGetBufferPointerv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void**, /* void */ void> GetBufferPointerv;
    public static ReadOnlySpan<byte> glDrawBuffersFunctionName => "glDrawBuffers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLenum */ int*, /* void */ void> DrawBuffers;
    public static ReadOnlySpan<byte> glUniformMatrix2x3fvFunctionName => "glUniformMatrix2x3fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix2x3fv;
    public static ReadOnlySpan<byte> glUniformMatrix3x2fvFunctionName => "glUniformMatrix3x2fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix3x2fv;
    public static ReadOnlySpan<byte> glUniformMatrix2x4fvFunctionName => "glUniformMatrix2x4fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix2x4fv;
    public static ReadOnlySpan<byte> glUniformMatrix4x2fvFunctionName => "glUniformMatrix4x2fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix4x2fv;
    public static ReadOnlySpan<byte> glUniformMatrix3x4fvFunctionName => "glUniformMatrix3x4fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix3x4fv;
    public static ReadOnlySpan<byte> glUniformMatrix4x3fvFunctionName => "glUniformMatrix4x3fv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> UniformMatrix4x3fv;
    public static ReadOnlySpan<byte> glBlitFramebufferFunctionName => "glBlitFramebuffer"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLbitfield */ int, /* GLenum */ int, /* void */ void> BlitFramebuffer;
    public static ReadOnlySpan<byte> glRenderbufferStorageMultisampleFunctionName => "glRenderbufferStorageMultisample"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> RenderbufferStorageMultisample;
    public static ReadOnlySpan<byte> glFramebufferTextureLayerFunctionName => "glFramebufferTextureLayer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void> FramebufferTextureLayer;
    public static ReadOnlySpan<byte> glMapBufferRangeFunctionName => "glMapBufferRange"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* GLbitfield */ int, /* void */ void*> MapBufferRange;
    public static ReadOnlySpan<byte> glFlushMappedBufferRangeFunctionName => "glFlushMappedBufferRange"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void> FlushMappedBufferRange;
    public static ReadOnlySpan<byte> glBindVertexArrayFunctionName => "glBindVertexArray"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> BindVertexArray;
    public static ReadOnlySpan<byte> glDeleteVertexArraysFunctionName => "glDeleteVertexArrays"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteVertexArrays;
    public static ReadOnlySpan<byte> glGenVertexArraysFunctionName => "glGenVertexArrays"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenVertexArrays;
    public static ReadOnlySpan<byte> glIsVertexArrayFunctionName => "glIsVertexArray"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsVertexArray;
    public static ReadOnlySpan<byte> glGetIntegeri_vFunctionName => "glGetIntegeri_v"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLint */ int*, /* void */ void> GetIntegeri_v;
    public static ReadOnlySpan<byte> glBeginTransformFeedbackFunctionName => "glBeginTransformFeedback"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void> BeginTransformFeedback;
    public static ReadOnlySpan<byte> glEndTransformFeedbackFunctionName => "glEndTransformFeedback"u8;
    public readonly delegate* unmanaged</* void */ void> EndTransformFeedback;
    public static ReadOnlySpan<byte> glBindBufferRangeFunctionName => "glBindBufferRange"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void> BindBufferRange;
    public static ReadOnlySpan<byte> glBindBufferBaseFunctionName => "glBindBufferBase"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> BindBufferBase;
    public static ReadOnlySpan<byte> glTransformFeedbackVaryingsFunctionName => "glTransformFeedbackVaryings"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte**, /* GLenum */ int, /* void */ void> TransformFeedbackVaryings;
    public static ReadOnlySpan<byte> glGetTransformFeedbackVaryingFunctionName => "glGetTransformFeedbackVarying"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLsizei */ int*, /* GLenum */ int*, /* GLchar */ byte*, /* void */ void> GetTransformFeedbackVarying;
    public static ReadOnlySpan<byte> glVertexAttribIPointerFunctionName => "glVertexAttribIPointer"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> VertexAttribIPointer;
    public static ReadOnlySpan<byte> glGetVertexAttribIivFunctionName => "glGetVertexAttribIiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetVertexAttribIiv;
    public static ReadOnlySpan<byte> glGetVertexAttribIuivFunctionName => "glGetVertexAttribIuiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void> GetVertexAttribIuiv;
    public static ReadOnlySpan<byte> glVertexAttribI4iFunctionName => "glVertexAttribI4i"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> VertexAttribI4i;
    public static ReadOnlySpan<byte> glVertexAttribI4uiFunctionName => "glVertexAttribI4ui"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> VertexAttribI4ui;
    public static ReadOnlySpan<byte> glVertexAttribI4ivFunctionName => "glVertexAttribI4iv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int*, /* void */ void> VertexAttribI4iv;
    public static ReadOnlySpan<byte> glVertexAttribI4uivFunctionName => "glVertexAttribI4uiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint*, /* void */ void> VertexAttribI4uiv;
    public static ReadOnlySpan<byte> glGetUniformuivFunctionName => "glGetUniformuiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint*, /* void */ void> GetUniformuiv;
    public static ReadOnlySpan<byte> glGetFragDataLocationFunctionName => "glGetFragDataLocation"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLint */ int> GetFragDataLocation;
    public static ReadOnlySpan<byte> glUniform1uiFunctionName => "glUniform1ui"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* void */ void> Uniform1ui;
    public static ReadOnlySpan<byte> glUniform2uiFunctionName => "glUniform2ui"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> Uniform2ui;
    public static ReadOnlySpan<byte> glUniform3uiFunctionName => "glUniform3ui"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> Uniform3ui;
    public static ReadOnlySpan<byte> glUniform4uiFunctionName => "glUniform4ui"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> Uniform4ui;
    public static ReadOnlySpan<byte> glUniform1uivFunctionName => "glUniform1uiv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> Uniform1uiv;
    public static ReadOnlySpan<byte> glUniform2uivFunctionName => "glUniform2uiv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> Uniform2uiv;
    public static ReadOnlySpan<byte> glUniform3uivFunctionName => "glUniform3uiv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> Uniform3uiv;
    public static ReadOnlySpan<byte> glUniform4uivFunctionName => "glUniform4uiv"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> Uniform4uiv;
    public static ReadOnlySpan<byte> glClearBufferivFunctionName => "glClearBufferiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLint */ int*, /* void */ void> ClearBufferiv;
    public static ReadOnlySpan<byte> glClearBufferuivFunctionName => "glClearBufferuiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLuint */ uint*, /* void */ void> ClearBufferuiv;
    public static ReadOnlySpan<byte> glClearBufferfvFunctionName => "glClearBufferfv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLfloat */ float*, /* void */ void> ClearBufferfv;
    public static ReadOnlySpan<byte> glClearBufferfiFunctionName => "glClearBufferfi"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLfloat */ float, /* GLint */ int, /* void */ void> ClearBufferfi;
    public static ReadOnlySpan<byte> glGetStringiFunctionName => "glGetStringi"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLubyte */ byte*> GetStringi;
    public static ReadOnlySpan<byte> glCopyBufferSubDataFunctionName => "glCopyBufferSubData"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLintptr */ nint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void> CopyBufferSubData;
    public static ReadOnlySpan<byte> glGetUniformIndicesFunctionName => "glGetUniformIndices"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte**, /* GLuint */ uint*, /* void */ void> GetUniformIndices;
    public static ReadOnlySpan<byte> glGetActiveUniformsivFunctionName => "glGetActiveUniformsiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLuint */ uint*, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetActiveUniformsiv;
    public static ReadOnlySpan<byte> glGetUniformBlockIndexFunctionName => "glGetUniformBlockIndex"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLchar */ byte*, /* GLuint */ uint> GetUniformBlockIndex;
    public static ReadOnlySpan<byte> glGetActiveUniformBlockivFunctionName => "glGetActiveUniformBlockiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetActiveUniformBlockiv;
    public static ReadOnlySpan<byte> glGetActiveUniformBlockNameFunctionName => "glGetActiveUniformBlockName"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetActiveUniformBlockName;
    public static ReadOnlySpan<byte> glUniformBlockBindingFunctionName => "glUniformBlockBinding"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> UniformBlockBinding;
    public static ReadOnlySpan<byte> glDrawArraysInstancedFunctionName => "glDrawArraysInstanced"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> DrawArraysInstanced;
    public static ReadOnlySpan<byte> glDrawElementsInstancedFunctionName => "glDrawElementsInstanced"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* void */ void> DrawElementsInstanced;
    public static ReadOnlySpan<byte> glFenceSyncFunctionName => "glFenceSync"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLbitfield */ int, /* GLsync */ void*> FenceSync;
    public static ReadOnlySpan<byte> glIsSyncFunctionName => "glIsSync"u8;
    public readonly delegate* unmanaged</* GLsync */ void*, /* GLboolean */ int> IsSync;
    public static ReadOnlySpan<byte> glDeleteSyncFunctionName => "glDeleteSync"u8;
    public readonly delegate* unmanaged</* GLsync */ void*, /* void */ void> DeleteSync;
    public static ReadOnlySpan<byte> glClientWaitSyncFunctionName => "glClientWaitSync"u8;
    public readonly delegate* unmanaged</* GLsync */ void*, /* GLbitfield */ int, /* GLuint64 */ ulong, /* GLenum */ int> ClientWaitSync;
    public static ReadOnlySpan<byte> glWaitSyncFunctionName => "glWaitSync"u8;
    public readonly delegate* unmanaged</* GLsync */ void*, /* GLbitfield */ int, /* GLuint64 */ ulong, /* void */ void> WaitSync;
    public static ReadOnlySpan<byte> glGetInteger64vFunctionName => "glGetInteger64v"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint64 */ long*, /* void */ void> GetInteger64v;
    public static ReadOnlySpan<byte> glGetSyncivFunctionName => "glGetSynciv"u8;
    public readonly delegate* unmanaged</* GLsync */ void*, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* void */ void> GetSynciv;
    public static ReadOnlySpan<byte> glGetInteger64i_vFunctionName => "glGetInteger64i_v"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLint64 */ long*, /* void */ void> GetInteger64i_v;
    public static ReadOnlySpan<byte> glGetBufferParameteri64vFunctionName => "glGetBufferParameteri64v"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint64 */ long*, /* void */ void> GetBufferParameteri64v;
    public static ReadOnlySpan<byte> glGenSamplersFunctionName => "glGenSamplers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenSamplers;
    public static ReadOnlySpan<byte> glDeleteSamplersFunctionName => "glDeleteSamplers"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteSamplers;
    public static ReadOnlySpan<byte> glIsSamplerFunctionName => "glIsSampler"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsSampler;
    public static ReadOnlySpan<byte> glBindSamplerFunctionName => "glBindSampler"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> BindSampler;
    public static ReadOnlySpan<byte> glSamplerParameteriFunctionName => "glSamplerParameteri"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void> SamplerParameteri;
    public static ReadOnlySpan<byte> glSamplerParameterivFunctionName => "glSamplerParameteriv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> SamplerParameteriv;
    public static ReadOnlySpan<byte> glSamplerParameterfFunctionName => "glSamplerParameterf"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float, /* void */ void> SamplerParameterf;
    public static ReadOnlySpan<byte> glSamplerParameterfvFunctionName => "glSamplerParameterfv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void> SamplerParameterfv;
    public static ReadOnlySpan<byte> glGetSamplerParameterivFunctionName => "glGetSamplerParameteriv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetSamplerParameteriv;
    public static ReadOnlySpan<byte> glGetSamplerParameterfvFunctionName => "glGetSamplerParameterfv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLfloat */ float*, /* void */ void> GetSamplerParameterfv;
    public static ReadOnlySpan<byte> glVertexAttribDivisorFunctionName => "glVertexAttribDivisor"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> VertexAttribDivisor;
    public static ReadOnlySpan<byte> glBindTransformFeedbackFunctionName => "glBindTransformFeedback"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> BindTransformFeedback;
    public static ReadOnlySpan<byte> glDeleteTransformFeedbacksFunctionName => "glDeleteTransformFeedbacks"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteTransformFeedbacks;
    public static ReadOnlySpan<byte> glGenTransformFeedbacksFunctionName => "glGenTransformFeedbacks"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenTransformFeedbacks;
    public static ReadOnlySpan<byte> glIsTransformFeedbackFunctionName => "glIsTransformFeedback"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsTransformFeedback;
    public static ReadOnlySpan<byte> glPauseTransformFeedbackFunctionName => "glPauseTransformFeedback"u8;
    public readonly delegate* unmanaged</* void */ void> PauseTransformFeedback;
    public static ReadOnlySpan<byte> glResumeTransformFeedbackFunctionName => "glResumeTransformFeedback"u8;
    public readonly delegate* unmanaged</* void */ void> ResumeTransformFeedback;
    public static ReadOnlySpan<byte> glGetProgramBinaryFunctionName => "glGetProgramBinary"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLenum */ int*, /* void */ void*, /* void */ void> GetProgramBinary;
    public static ReadOnlySpan<byte> glProgramBinaryFunctionName => "glProgramBinary"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* void */ void> ProgramBinary;
    public static ReadOnlySpan<byte> glProgramParameteriFunctionName => "glProgramParameteri"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* void */ void> ProgramParameteri;
    public static ReadOnlySpan<byte> glInvalidateFramebufferFunctionName => "glInvalidateFramebuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int*, /* void */ void> InvalidateFramebuffer;
    public static ReadOnlySpan<byte> glInvalidateSubFramebufferFunctionName => "glInvalidateSubFramebuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int*, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> InvalidateSubFramebuffer;
    public static ReadOnlySpan<byte> glTexStorage2DFunctionName => "glTexStorage2D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> TexStorage2D;
    public static ReadOnlySpan<byte> glTexStorage3DFunctionName => "glTexStorage3D"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> TexStorage3D;
    public static ReadOnlySpan<byte> glGetInternalformativFunctionName => "glGetInternalformativ"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> GetInternalformativ;
    public static ReadOnlySpan<byte> glDispatchComputeFunctionName => "glDispatchCompute"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> DispatchCompute;
    public static ReadOnlySpan<byte> glDispatchComputeIndirectFunctionName => "glDispatchComputeIndirect"u8;
    public readonly delegate* unmanaged</* GLintptr */ nint, /* void */ void> DispatchComputeIndirect;
    public static ReadOnlySpan<byte> glDrawArraysIndirectFunctionName => "glDrawArraysIndirect"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void*, /* void */ void> DrawArraysIndirect;
    public static ReadOnlySpan<byte> glDrawElementsIndirectFunctionName => "glDrawElementsIndirect"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* void */ void*, /* void */ void> DrawElementsIndirect;
    public static ReadOnlySpan<byte> glFramebufferParameteriFunctionName => "glFramebufferParameteri"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int, /* void */ void> FramebufferParameteri;
    public static ReadOnlySpan<byte> glGetFramebufferParameterivFunctionName => "glGetFramebufferParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetFramebufferParameteriv;
    public static ReadOnlySpan<byte> glGetProgramInterfaceivFunctionName => "glGetProgramInterfaceiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetProgramInterfaceiv;
    public static ReadOnlySpan<byte> glGetProgramResourceIndexFunctionName => "glGetProgramResourceIndex"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLuint */ uint> GetProgramResourceIndex;
    public static ReadOnlySpan<byte> glGetProgramResourceNameFunctionName => "glGetProgramResourceName"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetProgramResourceName;
    public static ReadOnlySpan<byte> glGetProgramResourceivFunctionName => "glGetProgramResourceiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* GLsizei */ int, /* GLsizei */ int*, /* GLint */ int*, /* void */ void> GetProgramResourceiv;
    public static ReadOnlySpan<byte> glGetProgramResourceLocationFunctionName => "glGetProgramResourceLocation"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLchar */ byte*, /* GLint */ int> GetProgramResourceLocation;
    public static ReadOnlySpan<byte> glUseProgramStagesFunctionName => "glUseProgramStages"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLbitfield */ int, /* GLuint */ uint, /* void */ void> UseProgramStages;
    public static ReadOnlySpan<byte> glActiveShaderProgramFunctionName => "glActiveShaderProgram"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> ActiveShaderProgram;
    public static ReadOnlySpan<byte> glCreateShaderProgramvFunctionName => "glCreateShaderProgramv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLchar */ byte**, /* GLuint */ uint> CreateShaderProgramv;
    public static ReadOnlySpan<byte> glBindProgramPipelineFunctionName => "glBindProgramPipeline"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> BindProgramPipeline;
    public static ReadOnlySpan<byte> glDeleteProgramPipelinesFunctionName => "glDeleteProgramPipelines"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> DeleteProgramPipelines;
    public static ReadOnlySpan<byte> glGenProgramPipelinesFunctionName => "glGenProgramPipelines"u8;
    public readonly delegate* unmanaged</* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GenProgramPipelines;
    public static ReadOnlySpan<byte> glIsProgramPipelineFunctionName => "glIsProgramPipeline"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int> IsProgramPipeline;
    public static ReadOnlySpan<byte> glGetProgramPipelineivFunctionName => "glGetProgramPipelineiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetProgramPipelineiv;
    public static ReadOnlySpan<byte> glProgramUniform1iFunctionName => "glProgramUniform1i"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* void */ void> ProgramUniform1i;
    public static ReadOnlySpan<byte> glProgramUniform2iFunctionName => "glProgramUniform2i"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> ProgramUniform2i;
    public static ReadOnlySpan<byte> glProgramUniform3iFunctionName => "glProgramUniform3i"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> ProgramUniform3i;
    public static ReadOnlySpan<byte> glProgramUniform4iFunctionName => "glProgramUniform4i"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* void */ void> ProgramUniform4i;
    public static ReadOnlySpan<byte> glProgramUniform1uiFunctionName => "glProgramUniform1ui"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* void */ void> ProgramUniform1ui;
    public static ReadOnlySpan<byte> glProgramUniform2uiFunctionName => "glProgramUniform2ui"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> ProgramUniform2ui;
    public static ReadOnlySpan<byte> glProgramUniform3uiFunctionName => "glProgramUniform3ui"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> ProgramUniform3ui;
    public static ReadOnlySpan<byte> glProgramUniform4uiFunctionName => "glProgramUniform4ui"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* GLuint */ uint, /* void */ void> ProgramUniform4ui;
    public static ReadOnlySpan<byte> glProgramUniform1fFunctionName => "glProgramUniform1f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* void */ void> ProgramUniform1f;
    public static ReadOnlySpan<byte> glProgramUniform2fFunctionName => "glProgramUniform2f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> ProgramUniform2f;
    public static ReadOnlySpan<byte> glProgramUniform3fFunctionName => "glProgramUniform3f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> ProgramUniform3f;
    public static ReadOnlySpan<byte> glProgramUniform4fFunctionName => "glProgramUniform4f"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> ProgramUniform4f;
    public static ReadOnlySpan<byte> glProgramUniform1ivFunctionName => "glProgramUniform1iv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> ProgramUniform1iv;
    public static ReadOnlySpan<byte> glProgramUniform2ivFunctionName => "glProgramUniform2iv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> ProgramUniform2iv;
    public static ReadOnlySpan<byte> glProgramUniform3ivFunctionName => "glProgramUniform3iv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> ProgramUniform3iv;
    public static ReadOnlySpan<byte> glProgramUniform4ivFunctionName => "glProgramUniform4iv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> ProgramUniform4iv;
    public static ReadOnlySpan<byte> glProgramUniform1uivFunctionName => "glProgramUniform1uiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> ProgramUniform1uiv;
    public static ReadOnlySpan<byte> glProgramUniform2uivFunctionName => "glProgramUniform2uiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> ProgramUniform2uiv;
    public static ReadOnlySpan<byte> glProgramUniform3uivFunctionName => "glProgramUniform3uiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> ProgramUniform3uiv;
    public static ReadOnlySpan<byte> glProgramUniform4uivFunctionName => "glProgramUniform4uiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> ProgramUniform4uiv;
    public static ReadOnlySpan<byte> glProgramUniform1fvFunctionName => "glProgramUniform1fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> ProgramUniform1fv;
    public static ReadOnlySpan<byte> glProgramUniform2fvFunctionName => "glProgramUniform2fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> ProgramUniform2fv;
    public static ReadOnlySpan<byte> glProgramUniform3fvFunctionName => "glProgramUniform3fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> ProgramUniform3fv;
    public static ReadOnlySpan<byte> glProgramUniform4fvFunctionName => "glProgramUniform4fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> ProgramUniform4fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix2fvFunctionName => "glProgramUniformMatrix2fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix2fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix3fvFunctionName => "glProgramUniformMatrix3fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix3fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix4fvFunctionName => "glProgramUniformMatrix4fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix4fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix2x3fvFunctionName => "glProgramUniformMatrix2x3fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix2x3fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix3x2fvFunctionName => "glProgramUniformMatrix3x2fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix3x2fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix2x4fvFunctionName => "glProgramUniformMatrix2x4fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix2x4fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix4x2fvFunctionName => "glProgramUniformMatrix4x2fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix4x2fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix3x4fvFunctionName => "glProgramUniformMatrix3x4fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix3x4fv;
    public static ReadOnlySpan<byte> glProgramUniformMatrix4x3fvFunctionName => "glProgramUniformMatrix4x3fv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLboolean */ int, /* GLfloat */ float*, /* void */ void> ProgramUniformMatrix4x3fv;
    public static ReadOnlySpan<byte> glValidateProgramPipelineFunctionName => "glValidateProgramPipeline"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* void */ void> ValidateProgramPipeline;
    public static ReadOnlySpan<byte> glGetProgramPipelineInfoLogFunctionName => "glGetProgramPipelineInfoLog"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetProgramPipelineInfoLog;
    public static ReadOnlySpan<byte> glBindImageTextureFunctionName => "glBindImageTexture"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLint */ int, /* GLboolean */ int, /* GLint */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void> BindImageTexture;
    public static ReadOnlySpan<byte> glGetBooleani_vFunctionName => "glGetBooleani_v"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLboolean */ int*, /* void */ void> GetBooleani_v;
    public static ReadOnlySpan<byte> glMemoryBarrierFunctionName => "glMemoryBarrier"u8;
    public readonly delegate* unmanaged</* GLbitfield */ int, /* void */ void> MemoryBarrier;
    public static ReadOnlySpan<byte> glMemoryBarrierByRegionFunctionName => "glMemoryBarrierByRegion"u8;
    public readonly delegate* unmanaged</* GLbitfield */ int, /* void */ void> MemoryBarrierByRegion;
    public static ReadOnlySpan<byte> glTexStorage2DMultisampleFunctionName => "glTexStorage2DMultisample"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void> TexStorage2DMultisample;
    public static ReadOnlySpan<byte> glGetMultisamplefvFunctionName => "glGetMultisamplefv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLfloat */ float*, /* void */ void> GetMultisamplefv;
    public static ReadOnlySpan<byte> glSampleMaskiFunctionName => "glSampleMaski"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLbitfield */ int, /* void */ void> SampleMaski;
    public static ReadOnlySpan<byte> glGetTexLevelParameterivFunctionName => "glGetTexLevelParameteriv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetTexLevelParameteriv;
    public static ReadOnlySpan<byte> glGetTexLevelParameterfvFunctionName => "glGetTexLevelParameterfv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* GLenum */ int, /* GLfloat */ float*, /* void */ void> GetTexLevelParameterfv;
    public static ReadOnlySpan<byte> glBindVertexBufferFunctionName => "glBindVertexBuffer"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizei */ int, /* void */ void> BindVertexBuffer;
    public static ReadOnlySpan<byte> glVertexAttribFormatFunctionName => "glVertexAttribFormat"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLboolean */ int, /* GLuint */ uint, /* void */ void> VertexAttribFormat;
    public static ReadOnlySpan<byte> glVertexAttribIFormatFunctionName => "glVertexAttribIFormat"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void> VertexAttribIFormat;
    public static ReadOnlySpan<byte> glVertexAttribBindingFunctionName => "glVertexAttribBinding"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> VertexAttribBinding;
    public static ReadOnlySpan<byte> glVertexBindingDivisorFunctionName => "glVertexBindingDivisor"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLuint */ uint, /* void */ void> VertexBindingDivisor;
    public static ReadOnlySpan<byte> glBlendBarrierFunctionName => "glBlendBarrier"u8;
    public readonly delegate* unmanaged</* void */ void> BlendBarrier;
    public static ReadOnlySpan<byte> glCopyImageSubDataFunctionName => "glCopyImageSubData"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLuint */ uint, /* GLenum */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* void */ void> CopyImageSubData;
    public static ReadOnlySpan<byte> glDebugMessageControlFunctionName => "glDebugMessageControl"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* GLuint */ uint*, /* GLboolean */ int, /* void */ void> DebugMessageControl;
    public static ReadOnlySpan<byte> glDebugMessageInsertFunctionName => "glDebugMessageInsert"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLenum */ int, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void> DebugMessageInsert;
    public static ReadOnlySpan<byte> glDebugMessageCallbackFunctionName => "glDebugMessageCallback"u8;
    public readonly delegate* unmanaged</* GLDEBUGPROC */ delegate* unmanaged<int, int, uint, int, nint, sbyte*, void*, void>, /* void */ void*, /* void */ void> DebugMessageCallback;
    public static ReadOnlySpan<byte> glGetDebugMessageLogFunctionName => "glGetDebugMessageLog"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int*, /* GLenum */ int*, /* GLuint */ uint*, /* GLenum */ int*, /* GLsizei */ int*, /* GLchar */ byte*, /* GLuint */ uint> GetDebugMessageLog;
    public static ReadOnlySpan<byte> glPushDebugGroupFunctionName => "glPushDebugGroup"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void> PushDebugGroup;
    public static ReadOnlySpan<byte> glPopDebugGroupFunctionName => "glPopDebugGroup"u8;
    public readonly delegate* unmanaged</* void */ void> PopDebugGroup;
    public static ReadOnlySpan<byte> glObjectLabelFunctionName => "glObjectLabel"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void> ObjectLabel;
    public static ReadOnlySpan<byte> glGetObjectLabelFunctionName => "glGetObjectLabel"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetObjectLabel;
    public static ReadOnlySpan<byte> glObjectPtrLabelFunctionName => "glObjectPtrLabel"u8;
    public readonly delegate* unmanaged</* void */ void*, /* GLsizei */ int, /* GLchar */ byte*, /* void */ void> ObjectPtrLabel;
    public static ReadOnlySpan<byte> glGetObjectPtrLabelFunctionName => "glGetObjectPtrLabel"u8;
    public readonly delegate* unmanaged</* void */ void*, /* GLsizei */ int, /* GLsizei */ int*, /* GLchar */ byte*, /* void */ void> GetObjectPtrLabel;
    public static ReadOnlySpan<byte> glGetPointervFunctionName => "glGetPointerv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* void */ void**, /* void */ void> GetPointerv;
    public static ReadOnlySpan<byte> glEnableiFunctionName => "glEnablei"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> Enablei;
    public static ReadOnlySpan<byte> glDisableiFunctionName => "glDisablei"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* void */ void> Disablei;
    public static ReadOnlySpan<byte> glBlendEquationiFunctionName => "glBlendEquationi"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* void */ void> BlendEquationi;
    public static ReadOnlySpan<byte> glBlendEquationSeparateiFunctionName => "glBlendEquationSeparatei"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* void */ void> BlendEquationSeparatei;
    public static ReadOnlySpan<byte> glBlendFunciFunctionName => "glBlendFunci"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* void */ void> BlendFunci;
    public static ReadOnlySpan<byte> glBlendFuncSeparateiFunctionName => "glBlendFuncSeparatei"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* GLenum */ int, /* void */ void> BlendFuncSeparatei;
    public static ReadOnlySpan<byte> glColorMaskiFunctionName => "glColorMaski"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* GLboolean */ int, /* void */ void> ColorMaski;
    public static ReadOnlySpan<byte> glIsEnablediFunctionName => "glIsEnabledi"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLboolean */ int> IsEnabledi;
    public static ReadOnlySpan<byte> glDrawElementsBaseVertexFunctionName => "glDrawElementsBaseVertex"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLint */ int, /* void */ void> DrawElementsBaseVertex;
    public static ReadOnlySpan<byte> glDrawRangeElementsBaseVertexFunctionName => "glDrawRangeElementsBaseVertex"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLuint */ uint, /* GLuint */ uint, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLint */ int, /* void */ void> DrawRangeElementsBaseVertex;
    public static ReadOnlySpan<byte> glDrawElementsInstancedBaseVertexFunctionName => "glDrawElementsInstancedBaseVertex"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* void */ void*, /* GLsizei */ int, /* GLint */ int, /* void */ void> DrawElementsInstancedBaseVertex;
    public static ReadOnlySpan<byte> glFramebufferTextureFunctionName => "glFramebufferTexture"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLint */ int, /* void */ void> FramebufferTexture;
    public static ReadOnlySpan<byte> glPrimitiveBoundingBoxFunctionName => "glPrimitiveBoundingBox"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* GLfloat */ float, /* void */ void> PrimitiveBoundingBox;
    public static ReadOnlySpan<byte> glGetGraphicsResetStatusFunctionName => "glGetGraphicsResetStatus"u8;
    public readonly delegate* unmanaged</* GLenum */ int> GetGraphicsResetStatus;
    public static ReadOnlySpan<byte> glReadnPixelsFunctionName => "glReadnPixels"u8;
    public readonly delegate* unmanaged</* GLint */ int, /* GLint */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLenum */ int, /* GLenum */ int, /* GLsizei */ int, /* void */ void*, /* void */ void> ReadnPixels;
    public static ReadOnlySpan<byte> glGetnUniformfvFunctionName => "glGetnUniformfv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLfloat */ float*, /* void */ void> GetnUniformfv;
    public static ReadOnlySpan<byte> glGetnUniformivFunctionName => "glGetnUniformiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLint */ int*, /* void */ void> GetnUniformiv;
    public static ReadOnlySpan<byte> glGetnUniformuivFunctionName => "glGetnUniformuiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLint */ int, /* GLsizei */ int, /* GLuint */ uint*, /* void */ void> GetnUniformuiv;
    public static ReadOnlySpan<byte> glMinSampleShadingFunctionName => "glMinSampleShading"u8;
    public readonly delegate* unmanaged</* GLfloat */ float, /* void */ void> MinSampleShading;
    public static ReadOnlySpan<byte> glPatchParameteriFunctionName => "glPatchParameteri"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLint */ int, /* void */ void> PatchParameteri;
    public static ReadOnlySpan<byte> glTexParameterIivFunctionName => "glTexParameterIiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> TexParameterIiv;
    public static ReadOnlySpan<byte> glTexParameterIuivFunctionName => "glTexParameterIuiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void> TexParameterIuiv;
    public static ReadOnlySpan<byte> glGetTexParameterIivFunctionName => "glGetTexParameterIiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetTexParameterIiv;
    public static ReadOnlySpan<byte> glGetTexParameterIuivFunctionName => "glGetTexParameterIuiv"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint*, /* void */ void> GetTexParameterIuiv;
    public static ReadOnlySpan<byte> glSamplerParameterIivFunctionName => "glSamplerParameterIiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> SamplerParameterIiv;
    public static ReadOnlySpan<byte> glSamplerParameterIuivFunctionName => "glSamplerParameterIuiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void> SamplerParameterIuiv;
    public static ReadOnlySpan<byte> glGetSamplerParameterIivFunctionName => "glGetSamplerParameterIiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLint */ int*, /* void */ void> GetSamplerParameterIiv;
    public static ReadOnlySpan<byte> glGetSamplerParameterIuivFunctionName => "glGetSamplerParameterIuiv"u8;
    public readonly delegate* unmanaged</* GLuint */ uint, /* GLenum */ int, /* GLuint */ uint*, /* void */ void> GetSamplerParameterIuiv;
    public static ReadOnlySpan<byte> glTexBufferFunctionName => "glTexBuffer"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* void */ void> TexBuffer;
    public static ReadOnlySpan<byte> glTexBufferRangeFunctionName => "glTexBufferRange"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLenum */ int, /* GLuint */ uint, /* GLintptr */ nint, /* GLsizeiptr */ nint, /* void */ void> TexBufferRange;
    public static ReadOnlySpan<byte> glTexStorage3DMultisampleFunctionName => "glTexStorage3DMultisample"u8;
    public readonly delegate* unmanaged</* GLenum */ int, /* GLsizei */ int, /* GLenum */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLsizei */ int, /* GLboolean */ int, /* void */ void> TexStorage3DMultisample;
}
